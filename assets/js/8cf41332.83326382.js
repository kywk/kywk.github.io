"use strict";(self.webpackChunkkywk_me=self.webpackChunkkywk_me||[]).push([["69597"],{3544:function(e,n,t){t.r(n),t.d(n,{frontMatter:()=>l,toc:()=>d,default:()=>c,metadata:()=>i,assets:()=>h,contentTitle:()=>r});var i=JSON.parse('{"id":"bootcamp/algorithm/heap","title":"DS: Binary Heap","description":"[DS] Binary Heap","source":"@site/moco/bootcamp/algorithm/heap.md","sourceDirName":"bootcamp/algorithm","slug":"/bootcamp/algorithm/heap","permalink":"/moco/bootcamp/algorithm/heap","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"Algorithm","permalink":"/moco/tags/algorithm"},{"inline":true,"label":"CS","permalink":"/moco/tags/cs"},{"inline":true,"label":"LeetCode","permalink":"/moco/tags/leet-code"}],"version":"current","frontMatter":{"title":"DS: Binary Heap","description":"[DS] Binary Heap","tags":["Algorithm","CS","LeetCode"],"date_created":"2022-05-25T16:00:00.000Z","image":"https://lh3.googleusercontent.com/pw/AL9nZEUA9Ifvd5Z8SXDWkeVB6AC4MPGwnXaL6kBXNPoXwOQQ2jOcZ1Jw_0p8TKK8C3ZX0e67_FOY15eDrm7aaXSQJcKtoUzC80SAQEHsaBy6qS2AqNNs5VUFNXBKm439y_1wkvmDl-PnL8ReojnIumNlEvOXBg=w800-no?authuser=0"},"sidebar":"tutorialSidebar","previous":{"title":"DS: Graph","permalink":"/moco/bootcamp/algorithm/graph"},"next":{"title":"ALGO: Sorting","permalink":"/moco/bootcamp/algorithm/sorting"}}'),a=t(85893),s=t(50065);let l={title:"DS: Binary Heap",description:"[DS] Binary Heap",tags:["Algorithm","CS","LeetCode"],date_created:new Date("2022-05-25T16:00:00.000Z"),image:"https://lh3.googleusercontent.com/pw/AL9nZEUA9Ifvd5Z8SXDWkeVB6AC4MPGwnXaL6kBXNPoXwOQQ2jOcZ1Jw_0p8TKK8C3ZX0e67_FOY15eDrm7aaXSQJcKtoUzC80SAQEHsaBy6qS2AqNNs5VUFNXBKm439y_1wkvmDl-PnL8ReojnIumNlEvOXBg=w800-no?authuser=0"},r="[DS] Binary (Max) Heap",h={},d=[{value:"1-based Compact Array",id:"1-based-compact-array",level:2},{value:"Basic Operation",id:"basic-operation",level:2},{value:"siftUp",id:"siftup",level:3},{value:"siftDown",id:"siftdown",level:3},{value:"Method",id:"method",level:2},{value:"Create",id:"create",level:3},{value:"O(N log N)",id:"on-log-n",level:4},{value:"O(N)",id:"on",level:4},{value:"Insert",id:"insert",level:3},{value:"ExtractMax",id:"extractmax",level:3},{value:"UpdateKey(i, newv)",id:"updatekeyi-newv",level:3},{value:"Delete(i)",id:"deletei",level:3},{value:"Heap Sort",id:"heap-sort",level:2},{value:"\u5C0F\u7D50",id:"\u5C0F\u7D50",level:2},{value:"See Also",id:"see-also",level:2},{value:"Heap",id:"heap",level:3},{value:"Class \u985E\u5225",id:"class-\u985E\u5225",level:3}];function o(e){let n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",tabitem:"tabitem",tabs:"tabs",ul:"ul",...(0,s.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"import Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';"}),"\n",(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"ds-binary-max-heap",children:"[DS] Binary (Max) Heap"})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"Binary Max Heap property: The parent of each vertex - except the root - contains value greater than the value of that vertex. This is an easier-to-verify definition than the following alternative definition: The value of a vertex - except the leaf/leaves - must be greater than the value of its one (or two) child(ren)."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"https://visualgo.net/en/heap",children:(0,a.jsx)(n.em,{children:"Binary Heap (Priority Queue) - VisuAlgo"})})}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"1-based-compact-array",children:"1-based Compact Array"}),"\n",(0,a.jsx)(n.p,{children:"we can implement basic binary tree traversal operations with simple index manipulations (with help of bit shift manipulation):"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"parent(i) = i>>1, index i divided by 2 (integer division),"}),"\n",(0,a.jsx)(n.li,{children:"left(i) = i<<1, index i multiplied by 2,"}),"\n",(0,a.jsx)(n.li,{children:"right(i) = (i<<1)+1, index i multiplied by 2 and added by 1."}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"basic-operation",children:"Basic Operation"}),"\n",(0,a.jsx)(n.h3,{id:"siftup",children:"siftUp"}),"\n",(0,a.jsx)(n.p,{children:"siftUp swaps a node that is too large with its parent\n(thereby moving it up) until it is no larger than the node above it."}),"\n",(0,a.jsxs)(n.tabs,{children:["\n  ",(0,a.jsxs)(n.tabitem,{value:"go",label:"Go",default:!0,children:["\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func (h *Heap) siftUp(idx int) {\n    parent := idx >> 1\n    for idx > 1 && (*h)[idx] > (*h)[parent] {\n        (*h)[idx], (*h)[parent] = (*h)[parent], (*h)[idx]\n        idx = parent\n        parent = idx >> 1\n    }\n}\n"})}),"\n  "]}),"\n  ",(0,a.jsxs)(n.tabitem,{value:"js",label:"JavaScript",children:["\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"  siftUp(idx) {\n    let parent = idx >> 1\n    while ((idx > 1) && (this.data[idx] > this.data[parent])) {\n      this.swap(idx, parent)\n      idx = parent\n      parent = idx >> 1\n    }\n  }\n"})}),"\n  "]}),"\n  ",(0,a.jsxs)(n.tabitem,{value:"ts",label:"TypeScript",children:["\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"  siftUp(idx: number) {\n    let parent = idx >> 1\n    while ((idx > 1) && (this._data[idx] > this._data[parent])) {\n      this.swap(idx, parent)\n      idx = parent\n      parent = idx >> 1\n    }\n  }\n"})}),"\n  "]}),"\n  ",(0,a.jsxs)(n.tabitem,{value:"python",label:"Python",children:["\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"  def __siftUp(self, idx):\n    parent = idx >> 1\n    while idx > 1 and self.__data[idx] > self.__data[parent]:\n      self.__swap(idx, parent)\n      idx = parent\n      parent = idx >> 1\n"})}),"\n  "]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"siftdown",children:"siftDown"}),"\n",(0,a.jsx)(n.p,{children:"siftDown swaps a node that is too small with its largest child\n(thereby moving it down) until it is at least as large as both nodes\nbelow it."}),"\n",(0,a.jsxs)(n.tabs,{children:["\n  ",(0,a.jsxs)(n.tabitem,{value:"go",label:"Go",default:!0,children:["\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func (h *Heap) siftDown(idx int) {\n    isLChildLarger := false\n    isRChildLarger := false\n\n    left := idx << 1\n    if left < len(*h) {\n        if (*h)[left] > (*h)[idx] {\n            isLChildLarger = true\n        }\n    }\n\n    right := left + 1\n    if right < len(*h) {\n        if (*h)[right] > (*h)[idx] {\n            isRChildLarger = true\n        }\n    }\n\n    if isLChildLarger && isRChildLarger {\n        if (*h)[right] > (*h)[left] {\n            (*h)[right], (*h)[idx] = (*h)[idx], (*h)[right]\n            h.siftDown(right)\n        } else {\n            (*h)[left], (*h)[idx] = (*h)[idx], (*h)[left]\n            h.siftDown(left)\n        }\n    } else if isRChildLarger {\n        (*h)[right], (*h)[idx] = (*h)[idx], (*h)[right]\n        h.siftDown(right)\n    } else if isLChildLarger {\n        (*h)[left], (*h)[idx] = (*h)[idx], (*h)[left]\n        h.siftDown(left)\n    }\n}\n"})}),"\n  "]}),"\n  ",(0,a.jsxs)(n.tabitem,{value:"js",label:"JavaScript",children:["\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"  siftDown(idx) {\n    let isLeftLarger = false\n    let isRightLarger = false\n\n    let left = idx<<1\n    if ((left < this.data.length) &&\n        (this.data[left] > this.data[idx]))\n      isLeftLarger = true\n\n    let right = left + 1\n    if ((right < this.data.length) &&\n        (this.data[right] > this.data[idx]))\n      isRightLarger = true\n\n    if (isLeftLarger && isRightLarger) {\n      if (this.data[right] > this.data[left]) {\n        this.swap(right, idx)\n        this.siftDown(right)\n      } else {\n        this.swap(left, idx)\n        this.siftDown(left)\n      }\n    } else if (isLeftLarger) {\n      this.swap(left, idx)\n      this.siftDown(left)\n    } else if (isRightLarger) {\n      this.swap(right, idx)\n      this.siftDown(right)\n    }\n  }\n"})}),"\n  "]}),"\n  ",(0,a.jsxs)(n.tabitem,{value:"ts",label:"TypeScript",children:["\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"  siftDown(idx: number) {\n    let isLeftLarger = false\n    let isRightLarger = false\n\n    let left = idx << 1\n    if ((left < this._data.length) &&\n        (this._data[left] > this._data[idx]))\n      isLeftLarger = true\n\n    let right = left + 1\n    if ((right < this._data.length) &&\n        (this._data[right] > this._data[idx]))\n      isRightLarger = true\n\n    if (isLeftLarger && isRightLarger) {\n      if (this._data[left] > this._data[right]) {\n        this.swap(left, idx)\n        this.siftDown(left)\n      } else {\n        this.swap(right, idx)\n        this.siftDown(right)\n      }\n    } else if (isLeftLarger) {\n      this.swap(left, idx)\n      this.siftDown(left)\n    } else if (isRightLarger) {\n      this.swap(right, idx)\n      this.siftDown(right)\n    }\n  }\n"})}),"\n  "]}),"\n  ",(0,a.jsxs)(n.tabitem,{value:"python",label:"Python",children:["\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"  def __siftDown(self, idx):\n    leftLarger = False\n    rightLarger = False\n\n    left = idx << 1\n    if left < len(self.__data) and self.__data[left] > self.__data[idx]:\n      leftLarger = True\n\n    right = left + 1\n    if right < len(self.__data) and self.__data[right] > self.__data[idx]:\n      rightLarger = True\n\n    if leftLarger and rightLarger:\n      if self.__data[left] > self.__data[right]:\n        self.__swap(left, idx)\n        self.__siftDown(left)\n      else:\n        self.__swap(right, idx)\n        self.__siftDown(right)\n    elif leftLarger:\n      self.__swap(left, idx)\n      self.__siftDown(left)\n    elif rightLarger:\n      self.__swap(right, idx)\n      self.__siftDown(right)\n"})}),"\n  "]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"method",children:"Method"}),"\n",(0,a.jsx)(n.p,{children:"All Binary Max Heap method could be finish by combination of basic operation."}),"\n",(0,a.jsx)(n.h3,{id:"create",children:"Create"}),"\n",(0,a.jsx)(n.h4,{id:"on-log-n",children:"O(N log N)"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Start from an empty Binary Max Heap"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"for (i = 0; i < A.length; ++i)\n  Insert(A[i])\n"})}),"\n",(0,a.jsx)(n.h4,{id:"on",children:"O(N)"}),"\n",(0,a.jsx)(n.p,{children:"The input array A as it is"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"for (i = A.length/2; i >= 1; --i)\n  siftDown(i)\n"})}),"\n",(0,a.jsx)(n.h3,{id:"insert",children:"Insert"}),"\n",(0,a.jsxs)(n.tabs,{children:["\n  ",(0,a.jsxs)(n.tabitem,{value:"go",label:"Go",default:!0,children:["\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func (h *Heap) Insert(num int) {\n    *h = append(*h, num)\n    h.siftUp(len(*h) - 1)\n}\n"})}),"\n  "]}),"\n  ",(0,a.jsxs)(n.tabitem,{value:"js",label:"JavaScript",children:["\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"  insert(num) {\n    this.data.push(num)\n    this.siftUp(this.data.length - 1)\n  }\n"})}),"\n  "]}),"\n  ",(0,a.jsxs)(n.tabitem,{value:"ts",label:"TypeScript",children:["\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"  insert(num: number) {\n    this._data.push(num)\n    this.siftUp(this._data.length - 1)\n  }\n"})}),"\n  "]}),"\n  ",(0,a.jsxs)(n.tabitem,{value:"python",label:"Python",children:["\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"  def insert(self, num):\n    self.__data.append(num)\n    self.__siftUp(len(self.__data) - 1)\n"})}),"\n  "]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"extractmax",children:"ExtractMax"}),"\n",(0,a.jsxs)(n.p,{children:["Because we promote a leaf vertex to the root vertex of a Binary Max Heap,\nit will very likely violates the Max Heap property.\n",(0,a.jsx)(n.code,{children:"ExtractMax()"})," operation then fixes Binary Max Heap property from\nthe root ",(0,a.jsx)(n.strong,{children:"downwards"})," by comparing the current value with\nthe its child/the larger of its two children (if necessary)."]}),"\n",(0,a.jsxs)(n.tabs,{children:["\n  ",(0,a.jsxs)(n.tabitem,{value:"go",label:"Go",default:!0,children:["\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'func (h *Heap) ExtractMax() (int, error) {\n    if len(*h) < 1 {\n        return 0, fmt.Errorf("Empty Heap")\n    }\n\n    result := (*h)[1]\n    (*h)[1] = (*h)[len(*h)-1]\n    *h = (*h)[:len(*h)-1]\n    h.siftDown(1)\n    return result, nil\n}\n'})}),"\n  "]}),"\n  ",(0,a.jsxs)(n.tabitem,{value:"js",label:"JavaScript",children:["\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"  extractMax() {\n    if (this.data.length < 1)\n      return null\n\n    let result = this.data[1]\n    this.data[1] = this.data[this.data.length - 1]\n    this.data.pop()\n    this.siftDown(1)\n    return result\n  }\n"})}),"\n  "]}),"\n  ",(0,a.jsxs)(n.tabitem,{value:"ts",label:"TypeScript",children:["\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"  extractMax(): number {\n    if (this._data.length < 1)\n      return Number.NEGATIVE_INFINITY\n\n    let result = this._data[1]\n    this._data[1] = this._data[this._data.length - 1]\n    this._data.pop()\n    this.siftDown(1)\n    return result\n  }\n"})}),"\n  "]}),"\n  ",(0,a.jsxs)(n.tabitem,{value:"python",label:"Python",children:["\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'  def extractMax(self):\n    if len(self.__data) < 1:\n       raise Exception("Sorry, no numbers")\n\n    result = self.__data[1]\n    self.__data[1] = self.__data[len(self.__data) - 1]\n    self.__data.pop()\n    self.__siftDown(1)\n    return result\n'})}),"\n  "]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"updatekeyi-newv",children:"UpdateKey(i, newv)"}),"\n",(0,a.jsx)(n.p,{children:"If the index i of the value is known, we can do the following simple strategy:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Simply update A[i] = newv"}),"\n",(0,a.jsx)(n.li,{children:"call both shiftUp(i) and shiftDown(i)\nonly at most one operation will be triggered."}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"A[i] = newv; // let oldv = A[i]\nshiftup(i); // if newv > oldv\nshiftdown(i); // if newv < oldv\n"})}),"\n",(0,a.jsx)(n.h3,{id:"deletei",children:"Delete(i)"}),"\n",(0,a.jsx)(n.p,{children:"Let A[i] become the new max one and fix the Heap, then ExtractMax()."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"A[i] = A[1]+1;\nsiftUp(i); // new max/root\nExtractMax(); // now easy to delete\n"})}),"\n",(0,a.jsx)(n.h2,{id:"heap-sort",children:"Heap Sort"}),"\n",(0,a.jsx)(n.p,{children:"HeapSort() operation (assuming the Binary Max Heap has been created in O(N)) is very easy.\nSimply call the O(log N) ExtractMax() operation N times."}),"\n",(0,a.jsxs)(n.p,{children:["Simple Analysis: HeapSort() clearly runs in ",(0,a.jsx)(n.strong,{children:"O(N log N)"}),"\n\u2014 an optimal comparison-based sorting algorithm."]}),"\n",(0,a.jsxs)(n.tabs,{children:["\n  ",(0,a.jsxs)(n.tabitem,{value:"go",label:"Go",default:!0,children:["\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"func Sort(nums []int) []int {\n  h := NewHeap()\n  h.Create(nums)\n  result := make([]int, len(nums))\n  for i := len(nums) - 1; i >= 0; i-- {\n    result[i], _ = h.ExtractMax()\n  }\n  return result\n}\n"})}),"\n  "]}),"\n  ",(0,a.jsxs)(n.tabitem,{value:"js",label:"JavaScript",children:["\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"  static sort(nums) {\n    let h = new Heap(nums)\n    let result = new Array(nums.length)\n    for (let i = nums.length - 1; i >= 0; i--)\n      result[i] = h.extractMax()\n    return result\n  }\n"})}),"\n  "]}),"\n  ",(0,a.jsxs)(n.tabitem,{value:"ts",label:"TypeScript",children:["\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"  static sort(nums: Array<number>): Array<number> {\n    let h = new Heap(nums)\n    let result = new Array(nums.length)\n    for (let i = nums.length - 1; i >= 0; i--)\n      result[i] = h.extractMax()\n    return result\n  }\n"})}),"\n  "]}),"\n  ",(0,a.jsxs)(n.tabitem,{value:"python",label:"Python",children:["\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"  @classmethod\n  def sort(cls, nums):\n    h = Heap(nums)\n    result = [None] * len(nums)\n    for i in range(len(nums) - 1, -1, -1):\n      result[i] = h.extractMax()\n    return result\n"})}),"\n  "]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"\u5C0F\u7D50",children:"\u5C0F\u7D50"}),"\n",(0,a.jsx)(n.p,{children:"\u9019\u6B21\u7279\u5225\u4F7F\u7528\u985E\u5225\u4F86\u5BE6\u4F5C Binary Heap.\nHeap \u4E2D siftUp / siftDown \u7684\u64CD\u4F5C\u6027\u8CEA\u8F03\u504F\u5411 class \u5167 private method.\nInsert / ExtractMax / UpdateKey / Delete \u662F\u504F\u5411 public method \u7684\u64CD\u4F5C.\n\u800C HeapSort \u5247\u975E\u5E38\u9069\u5408\u7528 class methos \u4F86\u5BE6\u4F5C."}),"\n",(0,a.jsx)(n.p,{children:"\u8D81\u9019\u6A5F\u6703\u7DF4\u7FD2 Go / JS / Python \u5E7E\u7A2E\u8A9E\u8A00\u4E2D\u7684\u985E\u5225\u5BEB\u6CD5\u3121.\nOOP \u7684\u89C0\u5FF5\u548C\u80FD\u529B\u5728\u5C08\u6848\u958B\u767C\u5F88\u5BE6\u7528, \u719F\u6089\u5982\u4F55\u5BE6\u4F5C\u6216\u6A21\u64EC OOP \u7684\u64CD\u4F5C\u4EE5\u53CA\u76F8\u95DC\u9650\u5236,\n\u662F\u91CD\u8981\u7684\u57FA\u790E."}),"\n",(0,a.jsx)(n.h2,{id:"see-also",children:"See Also"}),"\n",(0,a.jsx)(n.h3,{id:"heap",children:"Heap"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://visualgo.net/en/heap",children:"Binary Heap (Priority Queue) - VisuAlgo"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://stackoverflow.com/questions/34329942",children:"algorithm - siftUp and siftDown operation in heap for heapifying an array - Stack Overflow"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://stackoverflow.com/questions/9755721/",children:"algorithm - How can building a heap be O(n) time complexity? - Stack Overflow"})}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"class-\u985E\u5225",children:"Class \u985E\u5225"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://pjchender.dev/javascript/js-class/",children:"[JS] JavaScript \u985E\u5225\uFF08Class\uFF09 | PJCHENder \u672A\u6574\u7406\u7B46\u8A18"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://willh.gitbook.io/typescript-tutorial/advanced/class",children:"\u985E\u5225 - TypeScript \u65B0\u624B\u6307\u5357"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"http://yltang.net/tutorial/python/15/",children:"\u7B2C 15 \u7AE0 \u7269\u4EF6\u8207\u985E\u5225 - Python"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://www.learncodewithmike.com/2020/01/python-class.html",children:"[Python\u7269\u4EF6\u5C0E\u5411]\u6DFA\u8AC7Python\u985E\u5225(Class)"})}),"\n"]})]})}function c(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(o,{...e})}):o(e)}},50065:function(e,n,t){t.d(n,{Z:()=>r,a:()=>l});var i=t(67294);let a={},s=i.createContext(a);function l(e){let n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);