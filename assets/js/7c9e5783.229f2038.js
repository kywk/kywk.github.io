"use strict";(self.webpackChunkkywk_github_io=self.webpackChunkkywk_github_io||[]).push([["64948"],{97893:function(e,n,i){i.r(n),i.d(n,{metadata:()=>r,contentTitle:()=>l,default:()=>d,assets:()=>o,toc:()=>p,frontMatter:()=>a});var r=JSON.parse('{"id":"java/springboot/spring/spring_value-annotation","title":"Value Annotation","description":"Spring Core Basics: Value Annotation","source":"@site/moco/java/springboot/spring/spring_value-annotation.md","sourceDirName":"java/springboot/spring","slug":"/java/springboot/spring/spring_value-annotation","permalink":"/moco/java/springboot/spring/spring_value-annotation","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"SpringBoot","permalink":"/moco/tags/spring-boot"},{"inline":true,"label":"Tutorial","permalink":"/moco/tags/tutorial"},{"inline":true,"label":"SpringBoot/CoreBasics","permalink":"/moco/tags/spring-boot-core-basics"},{"inline":true,"label":"SpringBoot/Annotation","permalink":"/moco/tags/spring-boot-annotation"},{"inline":true,"label":"SpringBoot/Properties","permalink":"/moco/tags/spring-boot-properties"}],"version":"current","frontMatter":{"title":"Value Annotation","description":"Spring Core Basics: Value Annotation","tags":["SpringBoot","Tutorial","SpringBoot/CoreBasics","SpringBoot/Annotation","SpringBoot/Properties"],"date_created":"2023-08-20T00:00:00.000Z","date_updated":"2023-08-20T00:00:00.000Z","image":"https://lh3.googleusercontent.com/pw/AL9nZEUA9Ifvd5Z8SXDWkeVB6AC4MPGwnXaL6kBXNPoXwOQQ2jOcZ1Jw_0p8TKK8C3ZX0e67_FOY15eDrm7aaXSQJcKtoUzC80SAQEHsaBy6qS2AqNNs5VUFNXBKm439y_1wkvmDl-PnL8ReojnIumNlEvOXBg=w800-no?authuser=0"},"sidebar":"tutorialSidebar","previous":{"title":"SpEL expressions","permalink":"/moco/java/springboot/spring/spring_spel-expressions"},"next":{"title":"Value Defaults","permalink":"/moco/java/springboot/spring/spring_value-defaults"}}'),t=i("85893"),s=i("50065");let a={title:"Value Annotation",description:"Spring Core Basics: Value Annotation",tags:["SpringBoot","Tutorial","SpringBoot/CoreBasics","SpringBoot/Annotation","SpringBoot/Properties"],date_created:new Date("2023-08-20T00:00:00.000Z"),date_updated:new Date("2023-08-20T00:00:00.000Z"),image:"https://lh3.googleusercontent.com/pw/AL9nZEUA9Ifvd5Z8SXDWkeVB6AC4MPGwnXaL6kBXNPoXwOQQ2jOcZ1Jw_0p8TKK8C3ZX0e67_FOY15eDrm7aaXSQJcKtoUzC80SAQEHsaBy6qS2AqNNs5VUFNXBKm439y_1wkvmDl-PnL8ReojnIumNlEvOXBg=w800-no?authuser=0"},l="[Spring] @Value Annotation",o={},p=[{value:"Overview",id:"overview",level:2},{value:"Setting Up the Application",id:"setting-up-the-application",level:2},{value:"Usage Examples",id:"usage-examples",level:2},{value:"Valued",id:"valued",level:3},{value:"PropertySource",id:"propertysource",level:3},{value:"System properties",id:"system-properties",level:3},{value:"Default value",id:"default-value",level:3},{value:"Properties priority",id:"properties-priority",level:3},{value:"List / Array",id:"list--array",level:3},{value:"Advanced Examples With SpEL",id:"advanced-examples-with-spel",level:2},{value:"default value",id:"default-value-1",level:3},{value:"from other beans",id:"from-other-beans",level:3},{value:"List",id:"list",level:3},{value:"Using @Value With Maps",id:"using-value-with-maps",level:2},{value:"Using @Value With Constructor Injection",id:"using-value-with-constructor-injection",level:2},{value:"Using @Value With Setter Injection",id:"using-value-with-setter-injection",level:2},{value:"Using @Value With Records",id:"using-value-with-records",level:2},{value:"Conclusion",id:"conclusion",level:2},{value:"See Also",id:"see-also",level:2}];function c(e){let n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"spring-value-annotation",children:"[Spring] @Value Annotation"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["Src: ",(0,t.jsx)(n.a,{href:"https://www.baeldung.com/spring-value-annotation",children:"A Quick Guide to Spring @Value | Baeldung"}),"\nNoted: 2023-08-23"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.strong,{children:"@Value Spring annotation"})," can be used for injecting values into fields in Spring-managed beans,\nand it can be applied at the field or constructor/method parameter level."]}),"\n",(0,t.jsx)(n.h2,{id:"setting-up-the-application",children:"Setting Up the Application"}),"\n",(0,t.jsxs)(n.p,{children:["To configure a simple Spring application configuration class for describe this annotation.\nWe needs ",(0,t.jsx)(n.strong,{children:"a properties file"})," to define the values we want to inject with the ",(0,t.jsx)(n.em,{children:"@Value"})," annotation.\nAnd so, we'll first need to define a ",(0,t.jsx)(n.em,{children:"@PropertySource"})," in our configuration class \u2014 with the properties file name."]}),"\n",(0,t.jsx)(n.p,{children:"Let's define the properties file:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ini",children:"value.from.file=Value got from the file\npriority=high\nlistOfValues=A,B,C\n"})}),"\n",(0,t.jsx)(n.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,t.jsx)(n.h3,{id:"valued",children:"Valued"}),"\n",(0,t.jsx)(n.p,{children:"As a basic and mostly useless example, we can only inject \u201Cstring value\u201D from the annotation to the field:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Value("string value")\nprivate String stringValue;\n'})}),"\n",(0,t.jsxs)(n.p,{children:['\u4E0A\u9762\u8A9E\u6CD5\u5728 annotation \u76F4\u63A5\u7D66\u503C, \u5C07 stringValue \u8A2D\u70BA "string value",\n\u6548\u679C\u548C ',(0,t.jsx)(n.code,{children:'private String stringValue = "string value"'})," \u662F\u4E00\u6A23\u7684.\n\u5BE6\u52D9\u4E0A\u4E26\u7121\u4F7F\u7528 annotation \u7684\u610F\u7FA9."]}),"\n",(0,t.jsx)(n.h3,{id:"propertysource",children:"PropertySource"}),"\n",(0,t.jsxs)(n.p,{children:["Using the ",(0,t.jsx)(n.em,{children:"@PropertySource"})," annotation allows us to work with values from properties files with the ",(0,t.jsx)(n.em,{children:"@Value"})," annotation."]}),"\n",(0,t.jsxs)(n.p,{children:["In the following example, we get ",(0,t.jsx)(n.em,{children:"Value got from the file"})," assigned to the field:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Value("${value.from.file}")\nprivate String valueFromFile;\n'})}),"\n",(0,t.jsxs)(n.p,{children:["\u985E\u4F3C BASH \u7684\u5B57\u4E32\u8655\u7406, \u5B57\u4E32\u4E2D\u7684 ",(0,t.jsx)(n.code,{children:"${VARIABLE}"})," \u6703\u5148\u884C\u89E3\u6790\u70BA\u5C0D\u61C9\u7684\u503C.\n\u800C Spring Framework \u4E2D\u6703\u627E\u5C0B application properties \u662F\u5426\u5B58\u5728\u5C0D\u61C9\u7684 Key."]}),"\n",(0,t.jsx)(n.h3,{id:"system-properties",children:"System properties"}),"\n",(0,t.jsx)(n.p,{children:"We can also set the value from system properties with the same syntax."}),"\n",(0,t.jsxs)(n.p,{children:["Let's assume that we have defined a system property named ",(0,t.jsx)(n.em,{children:"systemValue"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Value("${systemValue}")\nprivate String systemValue;\n'})}),"\n",(0,t.jsx)(n.h3,{id:"default-value",children:"Default value"}),"\n",(0,t.jsxs)(n.p,{children:["Default values can be provided for properties that might not be defined.\nHere, the value ",(0,t.jsx)(n.em,{children:"some default"})," will be injected:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Value("${unknown.param:some default}")\nprivate String someDefault;\n'})}),"\n",(0,t.jsxs)(n.p,{children:["@Value annotation \u5404\u7A2E\u7269\u4EF6 default value \u7684\u9032\u4E00\u6B65\u4ECB\u7D39\u53EF\u53C3\u8003 ",(0,t.jsx)(n.a,{href:"/moco/java/springboot/spring/spring_value-defaults",children:"@Value Defaults"})]}),"\n",(0,t.jsx)(n.h3,{id:"properties-priority",children:"Properties priority"}),"\n",(0,t.jsx)(n.p,{children:"If the same property is defined as a system property and in the properties file, then the system property would be applied."}),"\n",(0,t.jsxs)(n.p,{children:["Suppose we had a property ",(0,t.jsx)(n.em,{children:"priority"})," defined as a system property with the value ",(0,t.jsx)(n.em,{children:"System property"})," and\ndefined as something else in the properties file. The value would be ",(0,t.jsx)(n.em,{children:"System property"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Value("${priority}")\nprivate String prioritySystemProperty;\n'})}),"\n",(0,t.jsx)(n.p,{children:"\u5728 Sprint Framework \u4E2D, System property \u7684\u512A\u5148\u5EA6\u9AD8\u65BC\u5176\u4ED6\u8A2D\u5B9A, \u82E5\u6709\u591A\u500B property \u4E2D\u6709\u76F8\u540C\u540D\u5B57, \u6703\u4EE5 System property \u70BA\u5F15\u7528\u7684\u503C."}),"\n",(0,t.jsx)(n.h3,{id:"list--array",children:"List / Array"}),"\n",(0,t.jsx)(n.p,{children:"To inject a bunch of values, it would be convenient to define them as comma-separated values for the single property\nin the properties file or as a system property and to inject into an array."}),"\n",(0,t.jsxs)(n.p,{children:["In the first section, we defined comma-separated values in the ",(0,t.jsx)(n.em,{children:"listOfValues"})," of the properties file,\nso the array values would be [\u201CA\u201D, \u201CB\u201D, \u201CC\u201D]:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Value("${listOfValues}")\nprivate String[] valuesArray;\n'})}),"\n",(0,t.jsx)(n.h2,{id:"advanced-examples-with-spel",children:"Advanced Examples With SpEL"}),"\n",(0,t.jsxs)(n.p,{children:["We can also use ",(0,t.jsx)(n.a,{href:"/moco/java/springboot/spring/spring_spel-expressions",children:"SpEL expressions"})," to get the value."]}),"\n",(0,t.jsxs)(n.p,{children:["If we have a system property named ",(0,t.jsx)(n.em,{children:"priority"}),", then its value will be applied to the field:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"@Value(\"#{systemProperties['priority']}\")\nprivate String spelValue;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["If we have not defined the system property, then the ",(0,t.jsx)(n.em,{children:"null value"})," will be assigned."]}),"\n",(0,t.jsx)(n.p,{children:"\u4E0A\u9762\u8A9E\u6CD5\u8B80\u53D6 systemProperties \u4E2D\u7684 priority \u4F86\u6CE8\u5165\u4F7F\u7528.\n\u900F\u904E SpEL \u4F86\u8B80\u53D6 property \u53EF\u907F\u514D\u591A\u500B property \u6709\u76F8\u540C key \u5C0E\u81F4\u57F7\u884C\u6642\u932F\u8AA4."}),"\n",(0,t.jsxs)(n.p,{children:["\u82E5 ",(0,t.jsx)(n.em,{children:"PropertySource"})," \u4E2D\u6709 ",(0,t.jsx)(n.em,{children:"priority"}),' \u7684\u503C\u70BA "propertySource priority",\n\u800C ',(0,t.jsx)(n.em,{children:"systemProperty"})," \u4E2D\u627E\u4E0D\u5230 ",(0,t.jsx)(n.em,{children:"priority"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Value("${priority}")\nprivate String priorityProperty;\n\n@Value("#{systemProperties[\'priority\']}")\nprivate String spelValue;\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"priorityProperty"}),' \u7684\u503C\u70BA "propertySource priority",\n\u800C ',(0,t.jsx)(n.em,{children:"spelValue"})," \u70BA null."]}),"\n",(0,t.jsx)(n.h3,{id:"default-value-1",children:"default value"}),"\n",(0,t.jsxs)(n.p,{children:["The default value in the SpEL expression a bit complex then behind,\n",(0,t.jsx)(n.em,{children:"some default"})," value for the field if the system property is not defined:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"@Value(\"#{systemProperties['unknown'] ?: 'some default'}\")\nprivate String spelSomeDefault;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"from-other-beans",children:"from other beans"}),"\n",(0,t.jsxs)(n.p,{children:["Suppose we have a bean named ",(0,t.jsx)(n.em,{children:"someBean"})," with a field ",(0,t.jsx)(n.em,{children:"someValue"})," equal to ",(0,t.jsx)(n.em,{children:"10"}),".\nThen, ",(0,t.jsx)(n.em,{children:"10"})," will be assigned to the field:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Value("#{someBean.someValue}")\nprivate Integer someBeanValue;\n'})}),"\n",(0,t.jsx)(n.h3,{id:"list",children:"List"}),"\n",(0,t.jsxs)(n.p,{children:["We can manipulate properties to get a ",(0,t.jsx)(n.em,{children:"List"})," of values, here, a list of string values A, B, and C:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"@Value(\"#{'${listOfValues}'.split(',')}\")\nprivate List<String> valuesList;\n"})}),"\n",(0,t.jsx)(n.h2,{id:"using-value-with-maps",children:"Using @Value With Maps"}),"\n",(0,t.jsxs)(n.p,{children:["We can also use the ",(0,t.jsx)(n.em,{children:"@Value"})," annotation to inject a ",(0,t.jsx)(n.em,{children:"Map"})," property."]}),"\n",(0,t.jsxs)(n.p,{children:["First, we'll need to define the property in the ",(0,t.jsx)(n.code,{children:"{key: \u2018value' }"})," form in our properties file:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ini",children:"valuesMap={key1: '1', key2: '2', key3: '3'}\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Note that the values in the Map must be in single quotes."})}),"\n",(0,t.jsxs)(n.p,{children:["Now we can inject this value from the property file as a ",(0,t.jsx)(n.em,{children:"Map"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Value("#{${valuesMap}}")\nprivate Map<String, Integer> valuesMap;\n'})}),"\n",(0,t.jsxs)(n.p,{children:["If we need ",(0,t.jsx)(n.strong,{children:"to get the value of a specific key"})," in the Map,\nall we have to do is ",(0,t.jsx)(n.strong,{children:"add the key's name in the expression"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Value("#{${valuesMap}.key1}")\nprivate Integer valuesMapKey1;\n'})}),"\n",(0,t.jsxs)(n.p,{children:["If we're not sure whether the ",(0,t.jsx)(n.em,{children:"Map"})," contains a certain key, we should choose\n",(0,t.jsx)(n.em,{children:"a safer expression that will not throw an exception but set the value to null"}),"\nwhen the key is not found:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"@Value(\"#{${valuesMap}['unknownKey']}\")\nprivate Integer unknownMapKey;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["We can also ",(0,t.jsx)(n.strong,{children:"set default values for the properties or keys that might not exist"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"@Value(\"#{${unknownMap : {key1: '1', key2: '2'}}}\")\nprivate Map<String, Integer> unknownMap;\n\n@Value(\"#{${valuesMap}['unknownKey'] ?: 5}\")\nprivate Integer unknownMapKeyWithDefaultValue;\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Map entries can also be filtered"})," before injection."]}),"\n",(0,t.jsx)(n.p,{children:"Let's assume we need to get only those entries whose values are greater than one:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"@Value(\"#{${valuesMap}.?[value>'1']}\")\nprivate Map<String, Integer> valuesMapFiltered;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["We can also use the ",(0,t.jsx)(n.em,{children:"@Value annotation"})," to ",(0,t.jsx)(n.strong,{children:"inject all current system properties"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Value("#{systemProperties}")\nprivate Map<String, String> systemPropertiesMap;\n'})}),"\n",(0,t.jsx)(n.h2,{id:"using-value-with-constructor-injection",children:"Using @Value With Constructor Injection"}),"\n",(0,t.jsxs)(n.p,{children:["When we use the ",(0,t.jsx)(n.em,{children:"@Value"})," annotation, we're not limited to a field injection.\n",(0,t.jsx)(n.strong,{children:"We can also use it together with constructor injection"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Let's see this in practice:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Component\n@PropertySource("classpath:values.properties")\npublic class PriorityProvider {\n\n    private String priority;\n\n    @Autowired\n    public PriorityProvider(@Value("${priority:normal}") String priority) {\n        this.priority = priority;\n    }\n\n    // standard getter\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["In the above example, we inject a ",(0,t.jsx)(n.em,{children:"priority"})," directly into our ",(0,t.jsx)(n.em,{children:"PriorityProvider"}),"\u2018s constructor."]}),"\n",(0,t.jsx)(n.p,{children:"Note that we also provide a default value in case the property isn't found."}),"\n",(0,t.jsx)(n.h2,{id:"using-value-with-setter-injection",children:"Using @Value With Setter Injection"}),"\n",(0,t.jsxs)(n.p,{children:["Analogous to the constructor injection, ",(0,t.jsxs)(n.strong,{children:["we can also use ",(0,t.jsx)(n.em,{children:"@Value"})," with setter injection"]}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Let's take a look:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"@Component\n@PropertySource(\"classpath:values.properties\")\npublic class CollectionProvider {\n\n    private List<String> values = new ArrayList<>();\n\n    @Autowired\n    public void setValues(@Value(\"#{'${listOfValues}'.split(',')}\") List<String> values) {\n        this.values.addAll(values);\n    }\n\n    // standard getter\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["We use the SpEL expression to inject a list of values into the ",(0,t.jsx)(n.em,{children:"setValues"})," method."]}),"\n",(0,t.jsx)(n.h2,{id:"using-value-with-records",children:"Using @Value With Records"}),"\n",(0,t.jsxs)(n.p,{children:["Java 14 introduced ",(0,t.jsx)(n.a,{href:"https://www.baeldung.com/java-record-keyword",children:"records"})," to facilitate the creation of an immutable class.\n",(0,t.jsxs)(n.strong,{children:["The Spring framework supports ",(0,t.jsx)(n.em,{children:"@Value"})," for record injection since version 6.0.6"]}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Component\n@PropertySource("classpath:values.properties")\npublic record PriorityRecord(@Value("${priority:normal}") String priority) {}\n'})}),"\n",(0,t.jsx)(n.p,{children:"Here, we inject the value directly into the record's constructor."}),"\n",(0,t.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,t.jsxs)(n.p,{children:["This article examined the various possibilities of using the ",(0,t.jsx)(n.em,{children:"@Value annotation"})," with simple properties defined in the file,\nwith system properties, and with properties calculated with SpEL expressions."]}),"\n",(0,t.jsxs)(n.p,{children:["As always, the example application is available on the ",(0,t.jsx)(n.a,{href:"https://github.com/eugenp/tutorials/tree/master/spring-boot-modules/spring-boot-properties-2",children:"GitHub project"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"see-also",children:"See Also"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/eugenp/tutorials/tree/master/spring-boot-modules/spring-boot-properties-2",children:"GitHub project"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/moco/java/springboot/spring/spring_value-defaults",children:"Value Defaults"})}),"\n"]})]})}function d(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},50065:function(e,n,i){i.d(n,{Z:function(){return l},a:function(){return a}});var r=i(67294);let t={},s=r.createContext(t);function a(e){let n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);