"use strict";(self.webpackChunkblog_kywk=self.webpackChunkblog_kywk||[]).push([[66169],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>g});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=r.createContext({}),l=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},m=function(e){var n=l(e.components);return r.createElement(i.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),d=l(t),g=a,u=d["".concat(i,".").concat(g)]||d[g]||p[g]||o;return t?r.createElement(u,c(c({ref:n},m),{},{components:t})):r.createElement(u,c({ref:n},m))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,c=new Array(o);c[0]=d;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s.mdxType="string"==typeof e?e:a,c[1]=s;for(var l=2;l<o;l++)c[l]=t[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},66084:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=t(87462),a=(t(67294),t(3905));const o={title:"Case: Merge & Tag",description:"CICD Case: Merge & Tag",tags:["cicd","gitlab"],hide_table_of_contents:!0,created:new Date("2023-08-10T00:00:00.000Z"),updated:new Date("2023-08-10T00:00:00.000Z"),image:"https://lh3.googleusercontent.com/pw/AL9nZEUA9Ifvd5Z8SXDWkeVB6AC4MPGwnXaL6kBXNPoXwOQQ2jOcZ1Jw_0p8TKK8C3ZX0e67_FOY15eDrm7aaXSQJcKtoUzC80SAQEHsaBy6qS2AqNNs5VUFNXBKm439y_1wkvmDl-PnL8ReojnIumNlEvOXBg=w800-no?authuser=0"},c="[CICD] Merge & tag when released",s={unversionedId:"devsecops/cicd/cicd-case_merge-and-tag",id:"devsecops/cicd/cicd-case_merge-and-tag",title:"Case: Merge & Tag",description:"CICD Case: Merge & Tag",source:"@site/blogging/moco/devsecops/cicd/cicd-case_merge-and-tag.md",sourceDirName:"devsecops/cicd",slug:"/devsecops/cicd/cicd-case_merge-and-tag",permalink:"/moco/devsecops/cicd/cicd-case_merge-and-tag",draft:!1,tags:[{label:"cicd",permalink:"/moco/tags/cicd"},{label:"gitlab",permalink:"/moco/tags/gitlab"}],version:"current",frontMatter:{title:"Case: Merge & Tag",description:"CICD Case: Merge & Tag",tags:["cicd","gitlab"],hide_table_of_contents:!0,created:"2023-08-10T00:00:00.000Z",updated:"2023-08-10T00:00:00.000Z",image:"https://lh3.googleusercontent.com/pw/AL9nZEUA9Ifvd5Z8SXDWkeVB6AC4MPGwnXaL6kBXNPoXwOQQ2jOcZ1Jw_0p8TKK8C3ZX0e67_FOY15eDrm7aaXSQJcKtoUzC80SAQEHsaBy6qS2AqNNs5VUFNXBKm439y_1wkvmDl-PnL8ReojnIumNlEvOXBg=w800-no?authuser=0"},sidebar:"tutorialSidebar",previous:{title:"Awesome CI/CD",permalink:"/moco/devsecops/cicd/awesome"},next:{title:"s3_s3cmd",permalink:"/moco/devsecops/cloud/s3_s3cmd"}},i={},l=[],m={toc:l};function p(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"cicd-merge--tag-when-released"},"[CICD]"," Merge & tag when released"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/bash\n\nwhich jq\nif [ $? -ne 0 ] \nthen\n    echo "jq not found" >&2 \n    exit $?\nfi\n\n\n## create MR to master\n\nNEW_MR_DATA=\'{\n    "source_branch": "release/\'$RELEASE_VERSION\'",\n    "target_branch": "main",\n    "title": "PROD Released"\n}\'\n\ncurl -k --request POST \\\n    --header "PRIVATE-TOKEN: ${CI_TOKEN}" \\\n    --header "Content-Type: application/json" \\\n    --data "$NEW_MR_DATA" \\\n    "${CI_GITLAB}/api/v4/projects/${CI_PROJECT_ID}/merge_requests" \\\n    -o mr.json\n\nmr_iid=`jq \'.["iid"]\' mr.json`\nif [[ "$mr_iid" = "null" ]]\nthen\n    echo "create Merge Request fail: `jq \'.["message"]\' mr.json`" \n    exit -1\nfi\n\n\n## checking merge status\n\necho "sleep 60sec for GitLab checking merge request..."\nsleep 60\n\ncurl -k --request GET \\\n    --header "PRIVATE-TOKEN: ${CI_TOKEN}" \\\n    "${CI_GITLAB}/api/v4/projects/${CI_PROJECT_ID}/merge_requests/${mr_iid}" \\\n    -o mr.json\n\nmr_status=`jq \'.["merge_status"]\' mr.json`\necho $mr_status\nif [[ "$mr_status" != \'"can_be_merged"\' ]]\nthen\n    echo "check merge_status fail: ${mr_status}"\n    exit -1\nfi\n\n\n## approval MR for master\n\nMERGE_DATA=\'{\n    "merge_when_pipeline_succeeds": false,\n    "should_remove_source_branch": true\n}\'\n\ncurl -k --request PUT \\\n    --header "PRIVATE-TOKEN: ${CI_TOKEN}" \\\n    "${CI_GITLAB}/api/v4/projects/${CI_PROJECT_ID}/merge_requests/${mr_iid}/merge" \\\n    -o mr_iid.json\n\nmerge_commit_sha=`jq \'.["merge_commit_sha"]\' mr_iid.json`\nif [[ "$merge_commit_sha" = "null" ]]\nthen\n    echo "merge to main/master fail: `jq \'.["message"]\' mr_iid.json`" \n\n    CLOSE_MR_DATA=\'{\n        "state_event": "close"\n    }\'\n    curl -k --request PUT \\\n        --header "PRIVATE-TOKEN: ${CI_TOKEN}" \\\n        --header "Content-Type: application/json" \\\n        --data "$CLOSE_MR_DATA" \\\n        "${CI_GITLAB}/api/v4/projects/${CI_PROJECT_ID}/merge_requests/${mr_iid}" \n\n    exit -1\nfi\n\n\n## tag version\n\ncurl -k --request POST \\\n    --header "PRIVATE-TOKEN: ${CI_TOKEN}" \\\n    "${CI_GITLAB}/api/v4/projects/${CI_PROJECT_ID}/repository/tags?tag_name=${RELEASE_VERSION}&ref=main" \\\n    -o tag.json\n\ntag_name=`jq \'.["name"]\' tag.json`\nif [[ "$merge_commit_sha" = "null" ]]\nthen\n    echo "tag ${RELEASE_VERSION} fail: `jq \'.["message"]\' tag.json`" \n    exit -1\nfi\n\n\n## create MR from master to develop\n\nDEV_MR_DATA=\'{\n    "source_branch": "main",\n    "target_branch": "develop",\n    "title": "PROD Released"\n}\'\n\ncurl -k --request POST \\\n    --header "PRIVATE-TOKEN: ${CI_TOKEN}" \\\n    --header "Content-Type: application/json" \\\n    --data "$DEV_MR_DATA" \\\n    "${CI_GITLAB}/api/v4/projects/${CI_PROJECT_ID}/merge_requests"\n\n')))}p.isMDXComponent=!0}}]);