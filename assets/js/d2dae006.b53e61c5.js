"use strict";(self.webpackChunkkywk_github_io=self.webpackChunkkywk_github_io||[]).push([[32957],{30330:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>_});const a=JSON.parse('{"id":"devsecops/cicd/cicd-case_merge-and-tag","title":"Case: Merge & Tag","description":"CI/CD Case: Merge & Tag","source":"@site/moco/devsecops/cicd/cicd-case_merge-and-tag.md","sourceDirName":"devsecops/cicd","slug":"/devsecops/cicd/cicd-case_merge-and-tag","permalink":"/moco/devsecops/cicd/cicd-case_merge-and-tag","draft":false,"unlisted":false,"tags":[{"inline":true,"label":"GitLab","permalink":"/moco/tags/git-lab"},{"inline":true,"label":"#CI/CD","permalink":"/moco/tags/ci-cd"}],"version":"current","frontMatter":{"title":"Case: Merge & Tag","description":"CI/CD Case: Merge & Tag","tags":["GitLab","#CI/CD"],"hide_table_of_contents":true,"date_created":"2023-08-10T00:00:00.000Z","date_updated":"2023-08-10T00:00:00.000Z","image":"https://lh3.googleusercontent.com/pw/AL9nZEUA9Ifvd5Z8SXDWkeVB6AC4MPGwnXaL6kBXNPoXwOQQ2jOcZ1Jw_0p8TKK8C3ZX0e67_FOY15eDrm7aaXSQJcKtoUzC80SAQEHsaBy6qS2AqNNs5VUFNXBKm439y_1wkvmDl-PnL8ReojnIumNlEvOXBg=w800-no?authuser=0"},"sidebar":"tutorialSidebar","previous":{"title":"Awesome CI/CD","permalink":"/moco/devsecops/cicd/awesome"},"next":{"title":"Docker","permalink":"/moco/category/docker"}}');var r=t(74848),s=t(28453);const o={title:"Case: Merge & Tag",description:"CI/CD Case: Merge & Tag",tags:["GitLab","#CI/CD"],hide_table_of_contents:!0,date_created:new Date("2023-08-10T00:00:00.000Z"),date_updated:new Date("2023-08-10T00:00:00.000Z"),image:"https://lh3.googleusercontent.com/pw/AL9nZEUA9Ifvd5Z8SXDWkeVB6AC4MPGwnXaL6kBXNPoXwOQQ2jOcZ1Jw_0p8TKK8C3ZX0e67_FOY15eDrm7aaXSQJcKtoUzC80SAQEHsaBy6qS2AqNNs5VUFNXBKm439y_1wkvmDl-PnL8ReojnIumNlEvOXBg=w800-no?authuser=0"},c="[CI/CD] Merge & tag when released",i={},_=[];function m(e){const n={code:"code",h1:"h1",header:"header",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"cicd-merge--tag-when-released",children:"[CI/CD] Merge & tag when released"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\n\nwhich jq\nif [ $? -ne 0 ] \nthen\n    echo "jq not found" >&2 \n    exit $?\nfi\n\n\n## create MR to master\n\nNEW_MR_DATA=\'{\n    "source_branch": "release/\'$RELEASE_VERSION\'",\n    "target_branch": "main",\n    "title": "PROD Released"\n}\'\n\ncurl -k --request POST \\\n    --header "PRIVATE-TOKEN: ${CI_TOKEN}" \\\n    --header "Content-Type: application/json" \\\n    --data "$NEW_MR_DATA" \\\n    "${CI_GITLAB}/api/v4/projects/${CI_PROJECT_ID}/merge_requests" \\\n    -o mr.json\n\nmr_iid=`jq \'.["iid"]\' mr.json`\nif [[ "$mr_iid" = "null" ]]\nthen\n    echo "create Merge Request fail: `jq \'.["message"]\' mr.json`" \n    exit -1\nfi\n\n\n## checking merge status\n\necho "sleep 60sec for GitLab checking merge request..."\nsleep 60\n\ncurl -k --request GET \\\n    --header "PRIVATE-TOKEN: ${CI_TOKEN}" \\\n    "${CI_GITLAB}/api/v4/projects/${CI_PROJECT_ID}/merge_requests/${mr_iid}" \\\n    -o mr.json\n\nmr_status=`jq \'.["merge_status"]\' mr.json`\necho $mr_status\nif [[ "$mr_status" != \'"can_be_merged"\' ]]\nthen\n    echo "check merge_status fail: ${mr_status}"\n    exit -1\nfi\n\n\n## approval MR for master\n\nMERGE_DATA=\'{\n    "merge_when_pipeline_succeeds": false,\n    "should_remove_source_branch": true\n}\'\n\ncurl -k --request PUT \\\n    --header "PRIVATE-TOKEN: ${CI_TOKEN}" \\\n    "${CI_GITLAB}/api/v4/projects/${CI_PROJECT_ID}/merge_requests/${mr_iid}/merge" \\\n    -o mr_iid.json\n\nmerge_commit_sha=`jq \'.["merge_commit_sha"]\' mr_iid.json`\nif [[ "$merge_commit_sha" = "null" ]]\nthen\n    echo "merge to main/master fail: `jq \'.["message"]\' mr_iid.json`" \n\n    CLOSE_MR_DATA=\'{\n        "state_event": "close"\n    }\'\n    curl -k --request PUT \\\n        --header "PRIVATE-TOKEN: ${CI_TOKEN}" \\\n        --header "Content-Type: application/json" \\\n        --data "$CLOSE_MR_DATA" \\\n        "${CI_GITLAB}/api/v4/projects/${CI_PROJECT_ID}/merge_requests/${mr_iid}" \n\n    exit -1\nfi\n\n\n## tag version\n\ncurl -k --request POST \\\n    --header "PRIVATE-TOKEN: ${CI_TOKEN}" \\\n    "${CI_GITLAB}/api/v4/projects/${CI_PROJECT_ID}/repository/tags?tag_name=${RELEASE_VERSION}&ref=main" \\\n    -o tag.json\n\ntag_name=`jq \'.["name"]\' tag.json`\nif [[ "$merge_commit_sha" = "null" ]]\nthen\n    echo "tag ${RELEASE_VERSION} fail: `jq \'.["message"]\' tag.json`" \n    exit -1\nfi\n\n\n## create MR from master to develop\n\nDEV_MR_DATA=\'{\n    "source_branch": "main",\n    "target_branch": "develop",\n    "title": "PROD Released"\n}\'\n\ncurl -k --request POST \\\n    --header "PRIVATE-TOKEN: ${CI_TOKEN}" \\\n    --header "Content-Type: application/json" \\\n    --data "$DEV_MR_DATA" \\\n    "${CI_GITLAB}/api/v4/projects/${CI_PROJECT_ID}/merge_requests"\n\n'})})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>c});var a=t(96540);const r={},s=a.createContext(r);function o(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);