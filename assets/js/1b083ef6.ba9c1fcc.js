"use strict";(self.webpackChunkblog_kywk=self.webpackChunkblog_kywk||[]).push([[45676],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>g});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),s=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=s(e.components);return n.createElement(o.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),c=s(a),g=r,d=c["".concat(o,".").concat(g)]||c[g]||m[g]||i;return a?n.createElement(d,l(l({ref:t},u),{},{components:a})):n.createElement(d,l({ref:t},u))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=c;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p.mdxType="string"==typeof e?e:r,l[1]=p;for(var s=2;s<i;s++)l[s]=a[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},13077:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>p,toc:()=>s});var n=a(87462),r=(a(67294),a(3905));const i={title:"Value Annotation",description:"Spring Core Basics: Value Annotation",tags:["Spring","tutorial","Spring/CoreBasics","Spring/Annotation","Spring/Properties"],created:new Date("2023-08-20T00:00:00.000Z"),updated:new Date("2023-08-20T00:00:00.000Z"),image:"https://lh3.googleusercontent.com/pw/AL9nZEUA9Ifvd5Z8SXDWkeVB6AC4MPGwnXaL6kBXNPoXwOQQ2jOcZ1Jw_0p8TKK8C3ZX0e67_FOY15eDrm7aaXSQJcKtoUzC80SAQEHsaBy6qS2AqNNs5VUFNXBKm439y_1wkvmDl-PnL8ReojnIumNlEvOXBg=w800-no?authuser=0"},l="[Spring] @Value Annotation",p={unversionedId:"java/springboot/spring/spring_value-annotation",id:"java/springboot/spring/spring_value-annotation",title:"Value Annotation",description:"Spring Core Basics: Value Annotation",source:"@site/blogging/moco/java/springboot/spring/spring_value-annotation.md",sourceDirName:"java/springboot/spring",slug:"/java/springboot/spring/spring_value-annotation",permalink:"/moco/java/springboot/spring/spring_value-annotation",draft:!1,tags:[{label:"Spring",permalink:"/moco/tags/spring"},{label:"tutorial",permalink:"/moco/tags/tutorial"},{label:"Spring/CoreBasics",permalink:"/moco/tags/spring-core-basics"},{label:"Spring/Annotation",permalink:"/moco/tags/spring-annotation"},{label:"Spring/Properties",permalink:"/moco/tags/spring-properties"}],version:"current",frontMatter:{title:"Value Annotation",description:"Spring Core Basics: Value Annotation",tags:["Spring","tutorial","Spring/CoreBasics","Spring/Annotation","Spring/Properties"],created:"2023-08-20T00:00:00.000Z",updated:"2023-08-20T00:00:00.000Z",image:"https://lh3.googleusercontent.com/pw/AL9nZEUA9Ifvd5Z8SXDWkeVB6AC4MPGwnXaL6kBXNPoXwOQQ2jOcZ1Jw_0p8TKK8C3ZX0e67_FOY15eDrm7aaXSQJcKtoUzC80SAQEHsaBy6qS2AqNNs5VUFNXBKm439y_1wkvmDl-PnL8ReojnIumNlEvOXBg=w800-no?authuser=0"},sidebar:"tutorialSidebar",previous:{title:"SpEL expressions",permalink:"/moco/java/springboot/spring/spring_spel-expressions"},next:{title:"Value Defaults",permalink:"/moco/java/springboot/spring/spring_value-defaults"}},o={},s=[{value:"Overview",id:"overview",level:2},{value:"Setting Up the Application",id:"setting-up-the-application",level:2},{value:"Usage Examples",id:"usage-examples",level:2},{value:"Valued",id:"valued",level:3},{value:"PropertySource",id:"propertysource",level:3},{value:"System properties",id:"system-properties",level:3},{value:"Default value",id:"default-value",level:3},{value:"Properties priority",id:"properties-priority",level:3},{value:"List / Array",id:"list--array",level:3},{value:"Advanced Examples With SpEL",id:"advanced-examples-with-spel",level:2},{value:"default value",id:"default-value-1",level:3},{value:"from other beans",id:"from-other-beans",level:3},{value:"List",id:"list",level:3},{value:"Using @Value With Maps",id:"using-value-with-maps",level:2},{value:"Using @Value With Constructor Injection",id:"using-value-with-constructor-injection",level:2},{value:"Using @Value With Setter Injection",id:"using-value-with-setter-injection",level:2},{value:"Using @Value With Records",id:"using-value-with-records",level:2},{value:"Conclusion",id:"conclusion",level:2},{value:"See Also",id:"see-also",level:2}],u={toc:s};function m(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"spring-value-annotation"},"[Spring]"," @Value Annotation"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Src: ",(0,r.kt)("a",{parentName:"p",href:"https://www.baeldung.com/spring-value-annotation"},"A Quick Guide to Spring @Value | Baeldung"),(0,r.kt)("br",{parentName:"p"}),"\n","Noted: 2023-08-23")),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"The ",(0,r.kt)("strong",{parentName:"p"},"@Value Spring annotation")," can be used for injecting values into fields in Spring-managed beans,\nand it can be applied at the field or constructor/method parameter level."),(0,r.kt)("h2",{id:"setting-up-the-application"},"Setting Up the Application"),(0,r.kt)("p",null,"To configure a simple Spring application configuration class for describe this annotation.\nWe needs ",(0,r.kt)("strong",{parentName:"p"},"a properties file")," to define the values we want to inject with the ",(0,r.kt)("em",{parentName:"p"},"@Value")," annotation.\nAnd so, we'll first need to define a ",(0,r.kt)("em",{parentName:"p"},"@PropertySource")," in our configuration class \u2014 with the properties file name."),(0,r.kt)("p",null,"Let's define the properties file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ini"},"value.from.file=Value got from the file\npriority=high\nlistOfValues=A,B,C\n")),(0,r.kt)("h2",{id:"usage-examples"},"Usage Examples"),(0,r.kt)("h3",{id:"valued"},"Valued"),(0,r.kt)("p",null,"As a basic and mostly useless example, we can only inject \u201cstring value\u201d from the annotation to the field:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'@Value("string value")\nprivate String stringValue;\n')),(0,r.kt)("p",null,'\u4e0a\u9762\u8a9e\u6cd5\u5728 annotation \u76f4\u63a5\u7d66\u503c, \u5c07 stringValue \u8a2d\u70ba "string value",\n\u6548\u679c\u548c ',(0,r.kt)("inlineCode",{parentName:"p"},'private String stringValue = "string value"')," \u662f\u4e00\u6a23\u7684.\n\u5be6\u52d9\u4e0a\u4e26\u7121\u4f7f\u7528 annotation \u7684\u610f\u7fa9. "),(0,r.kt)("h3",{id:"propertysource"},"PropertySource"),(0,r.kt)("p",null,"Using the ",(0,r.kt)("em",{parentName:"p"},"@PropertySource")," annotation allows us to work with values from properties files with the ",(0,r.kt)("em",{parentName:"p"},"@Value")," annotation."),(0,r.kt)("p",null,"In the following example, we get ",(0,r.kt)("em",{parentName:"p"},"Value got from the file")," assigned to the field:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'@Value("${value.from.file}")\nprivate String valueFromFile;\n')),(0,r.kt)("p",null,"\u985e\u4f3c BASH \u7684\u5b57\u4e32\u8655\u7406, \u5b57\u4e32\u4e2d\u7684 ",(0,r.kt)("inlineCode",{parentName:"p"},"${VARIABLE}")," \u6703\u5148\u884c\u89e3\u6790\u70ba\u5c0d\u61c9\u7684\u503c.\n\u800c Spring Framework \u4e2d\u6703\u627e\u5c0b application properties \u662f\u5426\u5b58\u5728\u5c0d\u61c9\u7684 Key."),(0,r.kt)("h3",{id:"system-properties"},"System properties"),(0,r.kt)("p",null,"We can also set the value from system properties with the same syntax."),(0,r.kt)("p",null,"Let's assume that we have defined a system property named ",(0,r.kt)("em",{parentName:"p"},"systemValue"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'@Value("${systemValue}")\nprivate String systemValue;\n')),(0,r.kt)("h3",{id:"default-value"},"Default value"),(0,r.kt)("p",null,"Default values can be provided for properties that might not be defined.\nHere, the value ",(0,r.kt)("em",{parentName:"p"},"some default")," will be injected:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'@Value("${unknown.param:some default}")\nprivate String someDefault;\n')),(0,r.kt)("p",null,"@Value annotation \u5404\u7a2e\u7269\u4ef6 default value \u7684\u9032\u4e00\u6b65\u4ecb\u7d39\u53ef\u53c3\u8003 ",(0,r.kt)("a",{parentName:"p",href:"/moco/java/springboot/spring/spring_value-defaults"},"@Value Defaults")),(0,r.kt)("h3",{id:"properties-priority"},"Properties priority"),(0,r.kt)("p",null,"If the same property is defined as a system property and in the properties file, then the system property would be applied."),(0,r.kt)("p",null,"Suppose we had a property ",(0,r.kt)("em",{parentName:"p"},"priority")," defined as a system property with the value ",(0,r.kt)("em",{parentName:"p"},"System property")," and\ndefined as something else in the properties file. The value would be ",(0,r.kt)("em",{parentName:"p"},"System property"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'@Value("${priority}")\nprivate String prioritySystemProperty;\n')),(0,r.kt)("p",null,"\u5728 Sprint Framework \u4e2d, System property \u7684\u512a\u5148\u5ea6\u9ad8\u65bc\u5176\u4ed6\u8a2d\u5b9a, \u82e5\u6709\u591a\u500b property \u4e2d\u6709\u76f8\u540c\u540d\u5b57, \u6703\u4ee5 System property \u70ba\u5f15\u7528\u7684\u503c."),(0,r.kt)("h3",{id:"list--array"},"List / Array"),(0,r.kt)("p",null,"To inject a bunch of values, it would be convenient to define them as comma-separated values for the single property\nin the properties file or as a system property and to inject into an array."),(0,r.kt)("p",null,"In the first section, we defined comma-separated values in the ",(0,r.kt)("em",{parentName:"p"},"listOfValues")," of the properties file,\nso the array values would be ","[\u201cA\u201d, \u201cB\u201d, \u201cC\u201d]",":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'@Value("${listOfValues}")\nprivate String[] valuesArray;\n')),(0,r.kt)("h2",{id:"advanced-examples-with-spel"},"Advanced Examples With SpEL"),(0,r.kt)("p",null,"We can also use ",(0,r.kt)("a",{parentName:"p",href:"/moco/java/springboot/spring/spring_spel-expressions"},"SpEL expressions")," to get the value."),(0,r.kt)("p",null,"If we have a system property named ",(0,r.kt)("em",{parentName:"p"},"priority"),", then its value will be applied to the field:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"@Value(\"#{systemProperties['priority']}\")\nprivate String spelValue;\n")),(0,r.kt)("p",null,"If we have not defined the system property, then the ",(0,r.kt)("em",{parentName:"p"},"null value")," will be assigned."),(0,r.kt)("p",null,"\u4e0a\u9762\u8a9e\u6cd5\u8b80\u53d6 systemProperties \u4e2d\u7684 priority \u4f86\u6ce8\u5165\u4f7f\u7528.\n\u900f\u904e SpEL \u4f86\u8b80\u53d6 property \u53ef\u907f\u514d\u591a\u500b property \u6709\u76f8\u540c key \u5c0e\u81f4\u57f7\u884c\u6642\u932f\u8aa4."),(0,r.kt)("p",null,"\u82e5 ",(0,r.kt)("em",{parentName:"p"},"PropertySource")," \u4e2d\u6709 ",(0,r.kt)("em",{parentName:"p"},"priority"),' \u7684\u503c\u70ba "propertySource priority",\n\u800c ',(0,r.kt)("em",{parentName:"p"},"systemProperty")," \u4e2d\u627e\u4e0d\u5230 ",(0,r.kt)("em",{parentName:"p"},"priority"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'@Value("${priority}")\nprivate String priorityProperty;\n\n@Value("#{systemProperties[\'priority\']}")\nprivate String spelValue;\n')),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"priorityProperty"),' \u7684\u503c\u70ba "propertySource priority",\n\u800c ',(0,r.kt)("em",{parentName:"p"},"spelValue")," \u70ba null."),(0,r.kt)("h3",{id:"default-value-1"},"default value"),(0,r.kt)("p",null,"The default value in the SpEL expression a bit complex then behind,\n",(0,r.kt)("em",{parentName:"p"},"some default")," value for the field if the system property is not defined:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"@Value(\"#{systemProperties['unknown'] ?: 'some default'}\")\nprivate String spelSomeDefault;\n")),(0,r.kt)("h3",{id:"from-other-beans"},"from other beans"),(0,r.kt)("p",null,"Suppose we have a bean named ",(0,r.kt)("em",{parentName:"p"},"someBean")," with a field ",(0,r.kt)("em",{parentName:"p"},"someValue")," equal to ",(0,r.kt)("em",{parentName:"p"},"10"),".\nThen, ",(0,r.kt)("em",{parentName:"p"},"10")," will be assigned to the field:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'@Value("#{someBean.someValue}")\nprivate Integer someBeanValue;\n')),(0,r.kt)("h3",{id:"list"},"List"),(0,r.kt)("p",null,"We can manipulate properties to get a ",(0,r.kt)("em",{parentName:"p"},"List")," of values, here, a list of string values A, B, and C:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"@Value(\"#{'${listOfValues}'.split(',')}\")\nprivate List<String> valuesList;\n")),(0,r.kt)("h2",{id:"using-value-with-maps"},"Using @Value With Maps"),(0,r.kt)("p",null,"We can also use the ",(0,r.kt)("em",{parentName:"p"},"@Value")," annotation to inject a ",(0,r.kt)("em",{parentName:"p"},"Map")," property."),(0,r.kt)("p",null,"First, we'll need to define the property in the ",(0,r.kt)("em",{parentName:"p"},"{key: \u2018value' }")," form in our properties file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ini"},"valuesMap={key1: '1', key2: '2', key3: '3'}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note that the values in the Map must be in single quotes.")),(0,r.kt)("p",null,"Now we can inject this value from the property file as a ",(0,r.kt)("em",{parentName:"p"},"Map"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'@Value("#{${valuesMap}}")\nprivate Map<String, Integer> valuesMap;\n')),(0,r.kt)("p",null,"If we need ",(0,r.kt)("strong",{parentName:"p"},"to get the value of a specific key")," in the Map,\nall we have to do is ",(0,r.kt)("strong",{parentName:"p"},"add the key's name in the expression"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'@Value("#{${valuesMap}.key1}")\nprivate Integer valuesMapKey1;\n')),(0,r.kt)("p",null,"If we're not sure whether the ",(0,r.kt)("em",{parentName:"p"},"Map")," contains a certain key, we should choose\n",(0,r.kt)("em",{parentName:"p"},"a safer expression that will not throw an exception but set the value to null"),"\nwhen the key is not found:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"@Value(\"#{${valuesMap}['unknownKey']}\")\nprivate Integer unknownMapKey;\n")),(0,r.kt)("p",null,"We can also ",(0,r.kt)("strong",{parentName:"p"},"set default values for the properties or keys that might not exist"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"@Value(\"#{${unknownMap : {key1: '1', key2: '2'}}}\")\nprivate Map<String, Integer> unknownMap;\n\n@Value(\"#{${valuesMap}['unknownKey'] ?: 5}\")\nprivate Integer unknownMapKeyWithDefaultValue;\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Map entries can also be filtered")," before injection."),(0,r.kt)("p",null,"Let's assume we need to get only those entries whose values are greater than one:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"@Value(\"#{${valuesMap}.?[value>'1']}\")\nprivate Map<String, Integer> valuesMapFiltered;\n")),(0,r.kt)("p",null,"We can also use the ",(0,r.kt)("em",{parentName:"p"},"@Value annotation")," to ",(0,r.kt)("strong",{parentName:"p"},"inject all current system properties"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'@Value("#{systemProperties}")\nprivate Map<String, String> systemPropertiesMap;\n')),(0,r.kt)("h2",{id:"using-value-with-constructor-injection"},"Using @Value With Constructor Injection"),(0,r.kt)("p",null,"When we use the ",(0,r.kt)("em",{parentName:"p"},"@Value")," annotation, we're not limited to a field injection.\n",(0,r.kt)("strong",{parentName:"p"},"We can also use it together with constructor injection"),"."),(0,r.kt)("p",null,"Let's see this in practice:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'@Component\n@PropertySource("classpath:values.properties")\npublic class PriorityProvider {\n\n    private String priority;\n\n    @Autowired\n    public PriorityProvider(@Value("${priority:normal}") String priority) {\n        this.priority = priority;\n    }\n\n    // standard getter\n}\n')),(0,r.kt)("p",null,"In the above example, we inject a ",(0,r.kt)("em",{parentName:"p"},"priority")," directly into our ",(0,r.kt)("em",{parentName:"p"},"PriorityProvider"),"\u2018s constructor."),(0,r.kt)("p",null,"Note that we also provide a default value in case the property isn't found."),(0,r.kt)("h2",{id:"using-value-with-setter-injection"},"Using @Value With Setter Injection"),(0,r.kt)("p",null,"Analogous to the constructor injection, ",(0,r.kt)("strong",{parentName:"p"},"we can also use ",(0,r.kt)("em",{parentName:"strong"},"@Value")," with setter injection"),"."),(0,r.kt)("p",null,"Let's take a look:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"@Component\n@PropertySource(\"classpath:values.properties\")\npublic class CollectionProvider {\n\n    private List<String> values = new ArrayList<>();\n\n    @Autowired\n    public void setValues(@Value(\"#{'${listOfValues}'.split(',')}\") List<String> values) {\n        this.values.addAll(values);\n    }\n\n    // standard getter\n}\n")),(0,r.kt)("p",null,"We use the SpEL expression to inject a list of values into the ",(0,r.kt)("em",{parentName:"p"},"setValues")," method."),(0,r.kt)("h2",{id:"using-value-with-records"},"Using @Value With Records"),(0,r.kt)("p",null,"Java 14 introduced ",(0,r.kt)("a",{parentName:"p",href:"https://www.baeldung.com/java-record-keyword"},"records")," to facilitate the creation of an immutable class.\n",(0,r.kt)("strong",{parentName:"p"},"The Spring framework supports ",(0,r.kt)("em",{parentName:"strong"},"@Value")," for record injection since version 6.0.6"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'@Component\n@PropertySource("classpath:values.properties")\npublic record PriorityRecord(@Value("${priority:normal}") String priority) {}\n')),(0,r.kt)("p",null,"Here, we inject the value directly into the record's constructor."),(0,r.kt)("h2",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,"This article examined the various possibilities of using the ",(0,r.kt)("em",{parentName:"p"},"@Value annotation")," with simple properties defined in the file,\nwith system properties, and with properties calculated with SpEL expressions."),(0,r.kt)("p",null,"As always, the example application is available on the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/eugenp/tutorials/tree/master/spring-boot-modules/spring-boot-properties-2"},"GitHub project"),"."),(0,r.kt)("h2",{id:"see-also"},"See Also"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/eugenp/tutorials/tree/master/spring-boot-modules/spring-boot-properties-2"},"GitHub project")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/moco/java/springboot/spring/spring_value-defaults"},"Value Defaults"))))}m.isMDXComponent=!0}}]);