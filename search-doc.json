{"searchDocs":[{"title":"來趟東海道自然步道吧, 2018","type":0,"sectionRef":"#","url":"/life/2018/01/01/way-2-tokaido/","content":"","keywords":"","version":null},{"title":"Daily​","type":1,"pageTitle":"來趟東海道自然步道吧, 2018","url":"/life/2018/01/01/way-2-tokaido/#daily","content":" Finish today's todo on-schedule, or re-schedule itRegular training: 3~5k easy run every morning Monday: Core, Strength and ConditioningTuesday: 10kWednesday: Core, Strength and ConditioningThursday: 20kFriday: Trail, Bike to home, Stone  ","version":null,"tagName":"h3"},{"title":"Weekly​","type":1,"pageTitle":"來趟東海道自然步道吧, 2018","url":"/life/2018/01/01/way-2-tokaido/#weekly","content":" An algorithm implementation / ACM / UVa Online JudgeA Tokaido/Patagonia a week: A introduction to one trail path of Tokaido/Patagonia一本書、一篇心得  ","version":null,"tagName":"h3"},{"title":"Monthly​","type":1,"pageTitle":"來趟東海道自然步道吧, 2018","url":"/life/2018/01/01/way-2-tokaido/#monthly","content":" (two weeks) Cook a meal. Include salad, starter, main-dish, dessert... etc(two weeks) Photography: finish one set of previous worksAnnounce a minion prjectFinish a 42k marathon or more than 42k self trainning  ","version":null,"tagName":"h3"},{"title":"Yearly​","type":1,"pageTitle":"來趟東海道自然步道吧, 2018","url":"/life/2018/01/01/way-2-tokaido/#yearly","content":" Trip 01.21 ~ 03.11 歐洲旅遊: 摩洛哥、冰島、...05.24 ~ 06.02 Family Trip, Hokkaido07.20 ~ 08.10 南非、納米比亞10.20 ~ 12.10 東海道自然步道 Mointaineering 找路，沙韻古道再探敬山、淨山新康橫斷八通關古道北一段 LifeHaker 學飛行傘  仍貪心。公開目標，騎虎難下。 ","version":null,"tagName":"h3"},{"title":"Now or Never 2021","type":0,"sectionRef":"#","url":"/life/2021/01/01/now-or-never/","content":"","keywords":"","version":null},{"title":"Daily​","type":1,"pageTitle":"Now or Never 2021","url":"/life/2021/01/01/now-or-never/#daily","content":" Finish today's todo on-schedule, or re-schedule itRegular training: 7k easy run every morning Monday: Core, Strength and ConditioningTuesday: 10kWednesday: Core, Strength and ConditioningThursday: 15k or CoreFriday: Trail, Bike to home, Stone  ","version":null,"tagName":"h3"},{"title":"Weekly​","type":1,"pageTitle":"Now or Never 2021","url":"/life/2021/01/01/now-or-never/#weekly","content":" LeetCode Weekly ContestA Tokaido/Patagonia a week: A introduction to one trail path of Tokaido/Patagonia兩本書、兩篇心得  ","version":null,"tagName":"h3"},{"title":"Monthly​","type":1,"pageTitle":"Now or Never 2021","url":"/life/2021/01/01/now-or-never/#monthly","content":" (Biweekly) Cook a meal. Include salad, starter, main-dish, dessert... etc(Biweekly) Photography: finish one set of previous worksAnnounce a minion prjectFinish a 42k marathon or more than 42k self trainning  ","version":null,"tagName":"h3"},{"title":"Yearly​","type":1,"pageTitle":"Now or Never 2021","url":"/life/2021/01/01/now-or-never/#yearly","content":" Mointaineering 找路 沙韻古道再探八通關古道北一段南二段能高安東軍 LifeHaker 學飛行傘學潛水攀岩  仍貪心。公開目標，騎虎難下。 ","version":null,"tagName":"h3"},{"title":"系統安裝紀錄","type":0,"sectionRef":"#","url":"/life/2021/02/28/mac_apps/","content":"","keywords":"","version":null},{"title":"前置軟體​","type":1,"pageTitle":"系統安裝紀錄","url":"/life/2021/02/28/mac_apps/#前置軟體","content":" ","version":null,"tagName":"h2"},{"title":"Homebrew​","type":1,"pageTitle":"系統安裝紀錄","url":"/life/2021/02/28/mac_apps/#homebrew","content":" Homebrew  homebrew cask 的支援越來越多, 越來越方便, 個人多數軟體都透過 homebrew 安裝. 在開始安裝各類軟體前, Homebrew 是必要的.  $ /bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;   ","version":null,"tagName":"h3"},{"title":"Dropbox​","type":1,"pageTitle":"系統安裝紀錄","url":"/life/2021/02/28/mac_apps/#dropbox","content":" 我的專案和軟體配置檔案 (.files) 都放在 Dropbox 上, .files 裡也存了為了新環境設定的簡單 setup.sh. 故新電腦的第二件事就是安裝 Dropbox Desktop, 把工作專案和環境配置同步到新電腦.  ","version":null,"tagName":"h3"},{"title":"Google Chrome​","type":1,"pageTitle":"系統安裝紀錄","url":"/life/2021/02/28/mac_apps/#google-chrome","content":" 雖已漸漸棄用 Chrome, 改用 Safari 和 Edge. 但在 Chrome 長期使用習慣, 仍無法馬上改變. 導致先安裝 Chrome 也是安裝系統的必備之一.  ","version":null,"tagName":"h3"},{"title":"Sublime Text​","type":1,"pageTitle":"系統安裝紀錄","url":"/life/2021/02/28/mac_apps/#sublime-text","content":" 其實開發程式的主力已經轉為 VSCode, GoLand, WebStorm... 等. 但 Sublime Text 啟動速度快, 基本作業順暢, 仍是我必然安裝的工具.  因安裝時 setup.sh 可能需要修改, 所以會先以 Sublime Text 開啟 setup.sh, 編改檢查後再行安裝各項軟體或依安裝情況修改配置.  Sublime Text 已可以用 brew 安裝.  $ brew install sublime-text   ","version":null,"tagName":"h3"},{"title":"開發工具​","type":1,"pageTitle":"系統安裝紀錄","url":"/life/2021/02/28/mac_apps/#開發工具","content":" 參考 macOS 開發環境建構  ","version":null,"tagName":"h2"},{"title":"生產力工具​","type":1,"pageTitle":"系統安裝紀錄","url":"/life/2021/02/28/mac_apps/#生產力工具","content":" ","version":null,"tagName":"h2"},{"title":"Obsidian​","type":1,"pageTitle":"系統安裝紀錄","url":"/life/2021/02/28/mac_apps/#obsidian","content":" ZettelkastenZettlr, Joplin, Trilium Notes  $ brew install --cask obsidian   ","version":null,"tagName":"h3"},{"title":"Alfred​","type":1,"pageTitle":"系統安裝紀錄","url":"/life/2021/02/28/mac_apps/#alfred","content":" __Alfred__類似 Spotlight 的軟體, 但功能遠遠不止這樣. 能大大減少離開來回鍵盤和觸控板的時間, 可以參考這篇教學  $ brew install --cask alfred   ","version":null,"tagName":"h3"},{"title":"Itsycal​","type":1,"pageTitle":"系統安裝紀錄","url":"/life/2021/02/28/mac_apps/#itsycal","content":" Itsycal 在功能表列上便捷地查看日曆, 可以查看月曆和事件列表, 還能快速創建新事件.  $ brew install --cask itsycal   ","version":null,"tagName":"h3"},{"title":"XMind Zen​","type":1,"pageTitle":"系統安裝紀錄","url":"/life/2021/02/28/mac_apps/#xmind-zen","content":" 不得不說, 重新開發的 XMind Zen 不但跟原本的 XMind 一樣好用, 而且更美觀, 快速. 值得更換.  $ brew install --cask xmind-zen   ","version":null,"tagName":"h3"},{"title":"網路通訊​","type":1,"pageTitle":"系統安裝紀錄","url":"/life/2021/02/28/mac_apps/#網路通訊","content":" ","version":null,"tagName":"h2"},{"title":"Welly​","type":1,"pageTitle":"系統安裝紀錄","url":"/life/2021/02/28/mac_apps/#welly","content":" Welly 是一套運行在 Mac 上功能豐富的BBS軟體  $ brew install welly   ","version":null,"tagName":"h3"},{"title":"CloudMounter​","type":1,"pageTitle":"系統安裝紀錄","url":"/life/2021/02/28/mac_apps/#cloudmounter","content":" CloudMounter 把网络云盘放进你的Finder里  Get From App Store  ","version":null,"tagName":"h3"},{"title":"rclone​","type":1,"pageTitle":"系統安裝紀錄","url":"/life/2021/02/28/mac_apps/#rclone","content":" rclone  $ brew install rclone   ","version":null,"tagName":"h3"},{"title":"其他​","type":1,"pageTitle":"系統安裝紀錄","url":"/life/2021/02/28/mac_apps/#其他","content":" ","version":null,"tagName":"h2"},{"title":"IINA​","type":1,"pageTitle":"系統安裝紀錄","url":"/life/2021/02/28/mac_apps/#iina","content":" IINA 是 Mac 上最強大的播放器, 幾乎支援所有影音格式. 開源, UI 美觀.  $ brew install iina   ","version":null,"tagName":"h3"},{"title":"ExifRenamer​","type":1,"pageTitle":"系統安裝紀錄","url":"/life/2021/02/28/mac_apps/#exifrenamer","content":" ExifRenamer  $ brew install exifrenamer   ","version":null,"tagName":"h3"},{"title":"McBopomofo 小麥注音輸入法​","type":1,"pageTitle":"系統安裝紀錄","url":"/life/2021/02/28/mac_apps/#mcbopomofo-小麥注音輸入法","content":" McBopomofo 小麥注音輸入法 反應快速，輕巧簡單, 為 Mac User 量身打造. 支援標準、倚天、許氏、倚天26 鍵、IBM 以及漢語拼音鍵盤配置  小麥注音的隱藏設定  ","version":null,"tagName":"h3"},{"title":"See Also​","type":1,"pageTitle":"系統安裝紀錄","url":"/life/2021/02/28/mac_apps/#see-also","content":" ","version":null,"tagName":"h2"},{"title":"遺珠​","type":1,"pageTitle":"系統安裝紀錄","url":"/life/2021/02/28/mac_apps/#遺珠","content":" 以下是曾為個人熱愛, 但因故越來越少用的軟體. 暫列於此...  Magnet 分割視窗軟體, 支援「拖曳視窗到螢幕邊界後會自動分割」的功能Typora 基於 Markdown 開源的 IDE截圖 截圖除了豐富的標註工具, 支援 QR Code 跨螢幕傳圖, 倒數計時截圖, 標籤與貼紙等功能Franz 集大成的 IM 通訊軟體, 在同一個視窗內使用 Slack, Messenger, Telegram, ...Headset 極為好用的 Youtube 免費線上音樂播放工具! 豐富歌單, 電台以及個人收藏功能BarTender3,Dozer 有效管理 status bar 出現的 icon, 軟體一多很好用  ","version":null,"tagName":"h3"},{"title":"Reference​","type":1,"pageTitle":"系統安裝紀錄","url":"/life/2021/02/28/mac_apps/#reference","content":" 實用 Mac Apps 推薦 – 魏志軒 – Medium2018 最新 MacBook 必裝程式與設定 – Ryan Hsu – MediumCask 讓 OSX 安裝軟體更有效率 | VISIONCAN | list ","version":null,"tagName":"h3"},{"title":"個人工具箱 2021.Apr","type":0,"sectionRef":"#","url":"/life/2021/04/01/utilities/","content":"","keywords":"","version":null},{"title":"裝備使用​","type":1,"pageTitle":"個人工具箱 2021.Apr","url":"/life/2021/04/01/utilities/#裝備使用","content":" ","version":null,"tagName":"h2"},{"title":"主要裝備​","type":1,"pageTitle":"個人工具箱 2021.Apr","url":"/life/2021/04/01/utilities/#主要裝備","content":" 💻 小米筆電 Pro：安裝黑蘋果 / Windows 雙系統，作為開發主力機 💻 MacBook Pro 13&quot;：工作派發，處理遠端工作事務💻 MacBook Air 13&quot;：退役筆電，常態放置公司，次螢幕或臨時需求使用💻 MacBook 12&quot;：外出、旅遊與日常居家使用 📱 Google Pixel 4：主要門號 📱 小米 9 透明尊享版：次要門號📱 小米 Max 2：工作聯絡、客服帳號、行動影音、漫畫 📓 kindle Oasis：電子書 📓 小米平板 4：外出影音📓 Nokia N1：影音備機  ","version":null,"tagName":"h3"},{"title":"💼 上班攜帶​","type":1,"pageTitle":"個人工具箱 2021.Apr","url":"/life/2021/04/01/utilities/#-上班攜帶","content":" 🎒 HP Golla Laptop Backpack Bag💻 小米筆電 Pro🔌 Lenovo 65W PD  ","version":null,"tagName":"h3"},{"title":"🌃 會議 / 出差​","type":1,"pageTitle":"個人工具箱 2021.Apr","url":"/life/2021/04/01/utilities/#-會議--出差","content":" 🎒 小米90分通勤雙肩包💻 MacBook Pro 13&quot;🔌 MagSafe 2  ","version":null,"tagName":"h3"},{"title":"🛫 外出 / 旅行 / ...​","type":1,"pageTitle":"個人工具箱 2021.Apr","url":"/life/2021/04/01/utilities/#-外出--旅行--","content":" 🎒 Sony Casual Bag 微單攝影包💻 MacBook 12&quot;🔌 紫米 2A1C 65W  ","version":null,"tagName":"h3"},{"title":"🐮","type":1,"pageTitle":"個人工具箱 2021.Apr","url":"/life/2021/04/01/utilities/##","content":" 因工作需求以及業務區分，同時有多台筆電手機。  筆電除常態放置公司以應臨時需求的退役機外，其餘分裝在不同背包中。 每個背包筆電與充電器外，亦配有行動電源、手機連接線等。 依使用情境不同，外出時直接帶著就走，無須移動背包內容物。  日後慢慢整理不必要的裝置，簡化個人處理流程。  預期待 M1 後續機種發布後，變成小米筆電和 M1 的組合。 日常工作以螢幕大的小米筆電處理，所有外出需求都用 M1 了。  手機目前除了主副兩隻外，還需有隻專門客服聯絡與測試用的手機。 目標依工作與休閒生活，往縮減成工作和私人兩隻手機努力。  ","version":null,"tagName":"h3"},{"title":"軟體工具 / 網站服務​","type":1,"pageTitle":"個人工具箱 2021.Apr","url":"/life/2021/04/01/utilities/#軟體工具--網站服務","content":" 🌎 瀏覽器：Safari (Mac) / Edge (Windows) / Chrome (Linux)👥 主要社交網站：Facebook, PTT💾 網路硬碟：Dropbox, Google Drive, pCloud📝 記事：Google keep, Obsidian, Hackmd, Joplin (試用評估中)✔️ 待辦清單：Trello, Joplin (試用評估中)💡 專案管理：Trello, XMind, Obsidian, Joplin (試用評估中)📰 新聞聚合：Feedly📖 稍候閱讀：Pocket🗂 個人網站：個人網站 Github🗂 個人履歷：Linkedin  ","version":null,"tagName":"h2"},{"title":"手機應用​","type":1,"pageTitle":"個人工具箱 2021.Apr","url":"/life/2021/04/01/utilities/#手機應用","content":" Launcher: Lawnchair 2Google Calendar, GMail, Google Keep Play Store, SettingGoogle Pay, 各式支付 Trello, AndroMoney Pro, Google Translate Facebook, MeetupMessenger, Line, Telegram, ... Feedly, JPTT, Mobile01 Bus+, ZeApp, 愛電影, ...蝦皮, 淘寶, 京東, ...FoodPanda, UberEat, ...OpenPoint, 全家, StarBucks, ... Google Camera, Youtube Music, Youtube Gallary, Google Photo, Inatagram Chrome, Maps, Files, Google Drive Phone, Messages, PushbulletCalculator, Clock, ...  因有多隻手機使用，手機桌面 App 排列組合是固定的，才能無痛在手機間遊走。 依手機初次設定當下的心情，挑選合適 IconPack，讓不同手機的使用有些趣味在。    ","version":null,"tagName":"h2"},{"title":"See Also​","type":1,"pageTitle":"個人工具箱 2021.Apr","url":"/life/2021/04/01/utilities/#see-also","content":" 看了 個人工具箱（2020 十一月） | 蓋索林 Gasolin 後， 覺得定期檢視自己使用的工具，至少是可以開個頭的。 日後是否回顧檢視，就看工具與自己生活型態的變化多少了。 ","version":null,"tagName":"h2"},{"title":"Reborn 2021","type":0,"sectionRef":"#","url":"/life/2021/08/13/reborn/","content":"","keywords":"","version":null},{"title":"Daily​","type":1,"pageTitle":"Reborn 2021","url":"/life/2021/08/13/reborn/#daily","content":" Finish today's todo on-schedule, or re-schedule itEnglish communication exerciseRegular training: 7k easy run every morning Monday: Core, Strength and ConditioningTuesday: 10kWednesday: Core, Strength and ConditioningThursday: 15k or CoreFriday: Trail, Bike to home, Stone  ","version":null,"tagName":"h3"},{"title":"Weekly​","type":1,"pageTitle":"Reborn 2021","url":"/life/2021/08/13/reborn/#weekly","content":" LeetCode Weekly ContestA Tokaido/Patagonia a week: A introduction to one trail path of Tokaido/Patagonia兩本書、兩篇心得  ","version":null,"tagName":"h3"},{"title":"Monthly​","type":1,"pageTitle":"Reborn 2021","url":"/life/2021/08/13/reborn/#monthly","content":" (Biweekly) Cook a meal. Include salad, starter, main-dish, dessert... etc(Biweekly) Photography: finish one set of previous worksAnnounce a minion prjectFinish a 42k marathon or more than 42k self trainning  ","version":null,"tagName":"h3"},{"title":"Yearly​","type":1,"pageTitle":"Reborn 2021","url":"/life/2021/08/13/reborn/#yearly","content":" Mointaineering 找路 沙韻古道再探八通關古道北一段南二段能高安東軍 LifeHaker 學飛行傘學潛水攀岩  仍貪心。公開目標，騎虎難下。 ","version":null,"tagName":"h3"},{"title":"Keep Running 2022","type":0,"sectionRef":"#","url":"/life/2022/01/01/keep-running/","content":"","keywords":"","version":null},{"title":"Daily​","type":1,"pageTitle":"Keep Running 2022","url":"/life/2022/01/01/keep-running/#daily","content":" Finish today's todo on-schedule, or re-schedule itEnglish communication exerciseRegular training: 7k easy run every morning Monday: Core, Strength and ConditioningTuesday: 10kWednesday: Core, Strength and ConditioningThursday: 15k or CoreFriday: Trail, Bike to home, Stone  ","version":null,"tagName":"h3"},{"title":"Weekly​","type":1,"pageTitle":"Keep Running 2022","url":"/life/2022/01/01/keep-running/#weekly","content":" LeetCode Weekly ContestA Tokaido/Patagonia a week: A introduction to one trail path of Tokaido/Patagonia兩本書、兩篇心得  ","version":null,"tagName":"h3"},{"title":"Monthly​","type":1,"pageTitle":"Keep Running 2022","url":"/life/2022/01/01/keep-running/#monthly","content":" (Biweekly) Cook a meal. Include salad, starter, main-dish, dessert... etc(Biweekly) Photography: finish one set of previous worksAnnounce a minion prjectFinish a 42k marathon or more than 42k self trainning  ","version":null,"tagName":"h3"},{"title":"Yearly​","type":1,"pageTitle":"Keep Running 2022","url":"/life/2022/01/01/keep-running/#yearly","content":" Mointaineering 找路 沙韻古道再探八通關古道北一段南二段能高安東軍 LifeHaker 攀岩學游泳、潛水學飛行傘  仍貪心。公開目標，騎虎難下。 ","version":null,"tagName":"h3"},{"title":"Hello Docusaurus","type":0,"sectionRef":"#","url":"/life/2022/05/20/move-to-docusaurus/","content":"在 PJCHENder 未整理筆記 看到 Docusaurus 這套 CMS. 查了一下才知道原來是 Facebook 推出, 適用於專案文件的靜態網站生成框架. 比起一篇篇獨立文章的部落格系統, 覺得 Docusaurus 更適合心得筆記整理用. 剛好原本使用的 Hugo Theme 不合適, 正在找新主題, 試用後, 決定轉往 Docusaurus 重新建構. 決定轉換系統主因有幾點 部落格系統偏向一篇篇獨立文章, 文章彼此連結性不強烈, 結構也不清楚. 而心得筆記該有的結構關係, 透過部落格系統加上 catelogy tag ... 等輔助, 雖勉強可用但不盡如人意.心得筆記會不時更新, 而部落格系統以日期為主的文章陳列方式, 對筆記整理意義不大.Docusaurus 原生專注於專案文件, 對於程式語言呈現相當友善. 側邊欄 / 文章主體 / TOC 基礎版面清楚明瞭. 心得 CMS 很合適.Docusaurus 有限客製化, 無須花費過多時間調整版面, 可專注於文件內容編寫.Docusaurus 有 Blog 支援, 筆記文件放 docs, 日常文章放 blog. 筆記文件和部落格文章可以清楚分割. 當時從 Hexo 換到 Hugo 主因是快! Hugo 生成速度遠快於 Hexo. 而現在卻從 Hugo 換到比 Hexo 更慢的 Docusaurus. 除了上述優點外, 透過 GitHub Action, 讓網站生成工作交由 GitHub 處理, 速度就不再是問題. 官方說明很清楚, 網路上文章也多, 基礎轉移沒遇到問題. 倒是個人一些特殊需求, 試了一下才解決. Obsidian 我的 Markdown 文件都放在 Obsidian Vault 下, 藉由 Obsidian 來建構筆記資料庫. Hugo 框架可以透過 symbolic link 連結到 Obsidian 下的目錄, 而 Docusaurus 則會報錯. 還好 Obsidian 有 Symbolic links 需求的人不少, 透過 symlinks-obsidian plugin 可以讓 Obsidian Vault 下的 symbolic link 正常工作. 如此, 反其向而行. 文件放於 Docusaurus 工作目錄下, 在 Obsidian Vault 下建立 symbolic link 連結過去. Docusaurus / Obsidian 都可以正常運行. node_modules 這也是一般情況不會發生, 個人習慣衍生的問題. 我的 Docusaurus 工作目錄放在 Dropbox 同步, 為了節省空間, 會把 node_modules 移到本機目錄後, 建立 symbolic link 連結. 發現有趣的是, 更改 node_modules 名稱後, 建立的 symbolic link 會出錯: [~/Dropbox/mySite] $ mv node_modules ~/node_modules/Docusaurus [~/Dropbox/mySite] $ ln -sfF ~/node_modules/Docusaurus node_modules [~/Dropbox/mySite] $ npm start node:internal/errors:465 ErrorCaptureStackTrace(err); ^ Error [ERR_MODULE_NOT_FOUND]: Cannot find package '@docusaurus/logger' imported from /home/kywk/project/node_modules/Docusaurus/doc/@docusaurus/core/bin/docusaurus.mjs ... code: 'ERR_MODULE_NOT_FOUND' } 而若維持 node_modules 資料夾名稱, 則不會報錯: [~/Dropbox/mySite] $ mv node_modules ~/Docusaurus/node_modules/ [~/Dropbox/mySite] $ ln -sfF ~/Docusaurus/node_modules [~/Dropbox/mySite] $ npm start [INFO] Starting the development server... [SUCCESS] Docusaurus website is running at http://localhost:3000/moco/. Docusaurus 慢慢探索搬中. 初步印象, 85 分!","keywords":"","version":null},{"title":"Warriors","type":0,"sectionRef":"#","url":"/life/2022/05/27/warriors/","content":"恭喜勇士! 奪下西區冠軍, 重回總冠軍賽. 身為一個五年老勇迷, 看到勇士再度打入總冠軍賽, 相當感動. 老班底在相個兩年後一一回歸, 新生代在這兩年快速成長, 適當的引援. 勇士這季已經打破所有人眼鏡. 走到這裡, 勇士已經證明了自己. 最後, 去把總冠軍拿下吧. 你們值得!","keywords":"","version":null},{"title":"Welcome Back KT","type":0,"sectionRef":"#","url":"/life/2022/06/14/welcome-back-kt/","content":"今天觀看賽事直播時, 主播提到三年前的今天, 勇士對上暴龍總冠軍 G6, KT 受傷後勇士戰敗. 再看到休息, 養傷, 復健, 復出, 整整花了三年後, 勇士再度打入總冠軍賽, KT 恢復昔日身手的表現, 滿滿感動. 再一場, 去拿下總冠軍吧.","keywords":"","version":null},{"title":"2022 Champions","type":0,"sectionRef":"#","url":"/life/2022/06/17/gold-blooded/","content":"恭喜勇士, 恭喜咖喱, 拿下 NBA 2021-2022 賽季總冠軍和 FMVP. 觀賞直播時, 最後一分鐘一哥 AI 替換上陣, 這一暮很令人感動. 2015 年開始的勇士浪潮元老一一回歸, 八年後還一起在場上奮鬥. 這種團隊文化著實令人喜愛. 而最後三秒咖喱喜極而泣坐在場上這幕, 讓人想起三年前, 勇士主場輸給暴龍, 咖喱也是這樣坐在球場上無語問天. 這三年自我證明與救贖很不容易, 勇士和咖喱都完成了. 恭喜勇士, 恭喜咖喱, 拿下 NBA 2021-2022 賽季總冠軍和 FMVP. 五年老勇迷能看到這場, 值了.","keywords":"","version":null},{"title":"life & moco merged","type":0,"sectionRef":"#","url":"/life/2022/10/15/merge-kywk-moco/","content":"一直以來都把部落格區分成 life 和 moco 兩個, 分別作為生活旅遊和工作筆記用. 因某篇文章的感想, 不知道該放 life 還是 moco 時, 想起原本區分成兩個不同部落格, 除了用途不同外, 套用的樣板主題也不同. 但如今統一使用 docusaurus 框架, 似乎也沒必要再區分不同站台. 在本來該糜爛的加班日下班後, 花了些時間合併兩個站. 整理了一下 Dropbox 上檔案結構. 然後就忘了本來想寫的文章是什麼了... 應該是跟新工作就職滿兩個月的突發感觸吧, 才會不知道該放生活還是工作筆記... 紀錄一下.","keywords":"","version":null},{"title":"Open Water Certificated","type":0,"sectionRef":"#","url":"/life/2022/07/08/openwater-certificated/","content":"雖然不是太難獲得, 雖然還有相當多要精進的地方. 不過還是紀錄一下這天, PADI Open Water Certificated! 接下來的功課是: 運動 / 減重 / 增進心肺功能: 近來日常活動上都有些容易喘息需要大口呼吸的情況, 陸地上頂多就流汗, 水面下則是會大量消耗氣瓶殘氣. 需要好好加強.動作的本能反應與恐慌的控制: 水面下遇到不如預期的時候太容易緊張恐慌, 進而導致呼吸過度等行為. 要多多練習水面下活動, 讓肌肉養成記憶.","keywords":"","version":null},{"title":"Old Fashing RD style","type":0,"sectionRef":"#","url":"/life/2022/11/02/old-fashion-rd/","content":"Chrome 推薦了這篇: 7 Shorthand Optimization Tricks every JavaScript Developer Should Know 😎 - DEV Community 👩‍💻👨‍💻. 如何利用 JS 語法特性, 精簡程式碼. 大多值得參考, 尤其是文章底下的回應討論, 有更多可以偷得技巧. 特別引起注意的是 For-of and For-in loops 這章節,for-of 確實能程式看起來精簡易讀, 但會不會有效能問題? 查了幾篇文章和討論, 雖然最終結論偏向於各有利弊. 不過多數情況下, for-of 效能是和 for (let i = 0; ....) 老派宣告方法不相上下的. 接手的專案前人的習慣對陣列元素的處理會大量利用 .map / .reduce / .filter / ... 等方式. 也許慢慢將這些程式碼改成 for-of 的宣告, 也可能改成最最傳統的 for (let i = 0; ....). 老派開發, 除了多數情況下都是效能指標外, 更無須擔心新語法平台支援度問題. 敬, 永遠年輕的老靈魂. Ref. Performance of JavaScript .forEach, .map and .reduce vs for and for..of Ref. Functional Programming vs. Vanilla Javascript - FBRS","keywords":"","version":null},{"title":"One Obsidian","type":0,"sectionRef":"#","url":"/life/2022/11/01/one-obsidian/","content":"決定落腳 Obsidian 後, 如何最大化 Obsidian 的點子一一浮現. 過去是利用 Symbolic Link 的方式串連 Docusaurus 和 Obsidian, 但這方法不適用同步檔案於手機使用, 花了些時間 整合 Docusaurus / Obsidiaan, 初步成果還可接受. 整合上癮, 隨後把個人常態保存的文件檔案, 也從 Documents 搬入 Obsidian. Dropbox 資料夾結構越來越精簡, 有種莫名成就感.","keywords":"","version":null},{"title":"Bye, manjaro","type":0,"sectionRef":"#","url":"/life/2022/11/07/bye-manjaro/","content":"使用 Manjaro 約半年, 使用上大致滿意. #Linux/Manjaro #Linux MANJARO has a BIG PROBLEM 而前不久 Youtube 自動跳出來的影片, 看了之後有些同感. Manjaro 官方態度是比較保險的, 套件測試穩定後才推出, 更新速度較慢. 所以開放使用者可以直接透過上游 AUR 更新軟體套件. 但也就是這個方式, 電腦理可能同時會安裝了從 Manjaro 官方安裝的套件及 AUR 來的軟體. 偶爾會發生 AUR 上的套件依賴的函式庫或核心版本較新, 而 Mnajaro 的版本較舊的衝突狀況. 某次更新時有些核心套件一直無法順利更新, AUR 資料庫更新也出錯, 然後突發的報錯頻率就越來越高. 偏偏 Manjaro 官方在維護又是出了名的天兵, SSL 憑證過期這種事都可以屢屢發生. 影片中所談確實中允. 原本 Manjaro 是安裝在閒置筆電上, 偶爾開機用用玩玩, 小問題不打緊. 後來因故需要常態使用該筆電, 小問題不斷, 擾民. 工作上還是需要穩定性和市佔都比較高的系統, 暫時回歸 ubuntu 懷抱, 改天再折騰了.","keywords":"","version":null},{"title":"Keep Running 2023","type":0,"sectionRef":"#","url":"/life/2023/01/01/keep-running/","content":"","keywords":"","version":null},{"title":"Daily​","type":1,"pageTitle":"Keep Running 2023","url":"/life/2023/01/01/keep-running/#daily","content":" Finish today's todo on-schedule, or re-schedule itEnglish communication exerciseRegular training: 7k easy run every morning Monday: Core, Strength and ConditioningTuesday: 10kWednesday: Core, Strength and ConditioningThursday: 15k or CoreFriday: Trail, Bike to home, Stone  ","version":null,"tagName":"h3"},{"title":"Weekly​","type":1,"pageTitle":"Keep Running 2023","url":"/life/2023/01/01/keep-running/#weekly","content":" LeetCode Weekly ContestA Tokaido/Patagonia a week: A introduction to one trail path of Tokaido/Patagonia兩本書、兩篇心得  ","version":null,"tagName":"h3"},{"title":"Monthly​","type":1,"pageTitle":"Keep Running 2023","url":"/life/2023/01/01/keep-running/#monthly","content":" (Biweekly) Cook a meal. Include salad, starter, main-dish, dessert... etc(Biweekly) Photography: finish one set of previous worksAnnounce a minion prjectFinish a 42k marathon or more than 42k self trainning  ","version":null,"tagName":"h3"},{"title":"Yearly​","type":1,"pageTitle":"Keep Running 2023","url":"/life/2023/01/01/keep-running/#yearly","content":" Mointaineering 找路 沙韻古道再探八通關古道北一段南二段能高安東軍 LifeHaker 攀岩學游泳、潛水學飛行傘  仍貪心。公開目標，騎虎難下。 ","version":null,"tagName":"h3"},{"title":"The Freedom Day","type":0,"sectionRef":"#","url":"/life/2023/01/23/freedom-day/","content":"和家人吵了一架後稍稍冷靜下來. 進而過了個平靜的一天. 晚上做了個夢, 夢中這個家人去樓空, 但彼此間卻更緊密. 或許不像傳統般彼此束縛, 而有各自的天空, 相互祝福, 才是更理想的家人型態吧. 記這場架, 記這個夢.","keywords":"","version":null},{"title":"may-the-4th-be-with-u","type":0,"sectionRef":"#","url":"/life/2023/05/04/may-the-4th-be-with-u/","content":"","keywords":"","version":null},{"title":"The Carry 50","type":0,"sectionRef":"#","url":"/life/2023/05/01/curry/","content":"看 NBA 這幾年來, 今年季後賽 (連同季末、附加賽) 大概是近年來最精彩的一年. 而八年老勇迷, 看著衛冕軍勇士一路掙扎, 直到季末才篤定進季後賽. 季後賽在評論普遍認為 4:2 勝出下, 開盤先落後兩場勝差. 所幸主場魔咒下, 即使犯了愚蠢錯誤, 仍是險勝追平勝差. 而在全員發揮出色下拿下關鍵 Game 5 天王山之戰. 本以為回到自家主場就穩了, 卻不斷打鐵失誤打入搶七. 人生如戲, 這樣劇本如此狗血俗套, 卻真實上演著... 然後, Curry 拿下 50 分, 不僅破了 NBA 紀錄的 Playoff Game 7 最高得分, 也把球風相近卻年輕一截的國王送回家放假, 把勇士帶到第二輪. 不可思議的一場比賽, 當壓力大到 KT 只能繳出 2/10 的命中率時, Curry 竟用如此石破天驚的表現, 撐起了勇士隊. 人生如戲, 這樣劇本如此狗血俗套, 卻真實上演著... 恭喜 Curry, 恭喜勇士!","keywords":"","version":null},{"title":"just-us","type":0,"sectionRef":"#","url":"/life/2023/05/13/just-us/","content":"","keywords":"","version":null},{"title":"loma-flmi-l1","type":0,"sectionRef":"#","url":"/life/2023/12/04/loma-flmi-l1/","content":"","keywords":"","version":null},{"title":"Now or Never 2024","type":0,"sectionRef":"#","url":"/life/2024/01/01/now-or-never/","content":"","keywords":"","version":null},{"title":"Daily​","type":1,"pageTitle":"Now or Never 2024","url":"/life/2024/01/01/now-or-never/#daily","content":" Finish today's todo on-schedule, or re-schedule itRegular training: 7k easy run every morning Monday: Core, Strength and ConditioningTuesday: 10kWednesday: Core, Strength and ConditioningThursday: 15k or CoreFriday: Trail, Bike to home, Stone  ","version":null,"tagName":"h3"},{"title":"Weekly​","type":1,"pageTitle":"Now or Never 2024","url":"/life/2024/01/01/now-or-never/#weekly","content":" LeetCode Weekly ContestA Tokaido/Patagonia a week: A introduction to one trail path of Tokaido/Patagonia兩本書、兩篇心得  ","version":null,"tagName":"h3"},{"title":"Monthly​","type":1,"pageTitle":"Now or Never 2024","url":"/life/2024/01/01/now-or-never/#monthly","content":" (Biweekly) Cook a meal. Include salad, starter, main-dish, dessert... etc(Biweekly) Photography: finish one set of previous worksAnnounce a minion prjectFinish a 42k marathon or more than 42k self trainning  ","version":null,"tagName":"h3"},{"title":"Yearly​","type":1,"pageTitle":"Now or Never 2024","url":"/life/2024/01/01/now-or-never/#yearly","content":" Mointaineering 找路 沙韻古道再探八通關古道能高安東軍 LifeHaker 攀岩複盤潛水學飛行傘  仍貪心。公開目標，騎虎難下。 ","version":null,"tagName":"h3"},{"title":"Archive: App 安裝紀錄","type":0,"sectionRef":"#","url":"/life/2023/03/31/mac-setup/","content":"","keywords":"","version":null},{"title":"前置軟體​","type":1,"pageTitle":"Archive: App 安裝紀錄","url":"/life/2023/03/31/mac-setup/#前置軟體","content":" ","version":null,"tagName":"h2"},{"title":"Homebrew​","type":1,"pageTitle":"Archive: App 安裝紀錄","url":"/life/2023/03/31/mac-setup/#homebrew","content":" Homebrew  homebrew cask 的支援越來越多, 越來越方便, 個人多數軟體都透過 homebrew 安裝. 在開始安裝各類軟體前, Homebrew 是必要的.  /bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;   ","version":null,"tagName":"h3"},{"title":"Dropbox​","type":1,"pageTitle":"Archive: App 安裝紀錄","url":"/life/2023/03/31/mac-setup/#dropbox","content":" 我的專案和軟體配置檔案 (.files) 都放在 Dropbox 上, .files 裡也存了為了新環境設定的簡單 setup.sh. 故新電腦的第二件事就是安裝 Dropbox Desktop, 把工作專案和環境配置同步到新電腦.  Open source Dropbox client, Maestral  brew install maestral   ","version":null,"tagName":"h3"},{"title":"Google Chrome​","type":1,"pageTitle":"Archive: App 安裝紀錄","url":"/life/2023/03/31/mac-setup/#google-chrome","content":" 雖已漸漸棄用 Chrome, 改用 Safari 和 Edge. 但在 Chrome 長期使用習慣, 仍無法馬上改變. 導致先安裝 Chrome 也是安裝系統的必備之一.  ","version":null,"tagName":"h3"},{"title":"Sublime Text​","type":1,"pageTitle":"Archive: App 安裝紀錄","url":"/life/2023/03/31/mac-setup/#sublime-text","content":" 其實開發程式的主力已經轉為 VSCode, GoLand, WebStorm... 等. 但 Sublime Text 啟動速度快, 基本作業順暢, 仍是我必然安裝的工具.  因安裝時 setup.sh 可能需要修改, 所以會先以 Sublime Text 開啟 setup.sh, 編改檢查後再行安裝各項軟體或依安裝情況修改配置.  Sublime Text 已可以用 brew 安裝.  brew install sublime-text   ","version":null,"tagName":"h3"},{"title":"開發工具​","type":1,"pageTitle":"Archive: App 安裝紀錄","url":"/life/2023/03/31/mac-setup/#開發工具","content":" 參考: macOS 開發環境建構  ","version":null,"tagName":"h2"},{"title":"生產力工具​","type":1,"pageTitle":"Archive: App 安裝紀錄","url":"/life/2023/03/31/mac-setup/#生產力工具","content":" ","version":null,"tagName":"h2"},{"title":"Obsidian​","type":1,"pageTitle":"Archive: App 安裝紀錄","url":"/life/2023/03/31/mac-setup/#obsidian","content":" ZettelkastenZettlr, Joplin, Trilium Notes  $ brew install obsidian   ","version":null,"tagName":"h3"},{"title":"Raycast​","type":1,"pageTitle":"Archive: App 安裝紀錄","url":"/life/2023/03/31/mac-setup/#raycast","content":"   brew install raycast   Alfred​  Alfred 類似 Spotlight 的軟體, 但功能遠遠不止這樣. 能大大減少離開來回鍵盤和觸控板的時間, 可以參考這篇教學  brew install alfred   ","version":null,"tagName":"h3"},{"title":"AltTab​","type":1,"pageTitle":"Archive: App 安裝紀錄","url":"/life/2023/03/31/mac-setup/#alttab","content":" AltTab 和 Windows 一樣使用 Alt + Tab 切換視窗, 可在同一程式多個視窗中切換, 比 macOS 內建僅能在應用程式間切換來得快速方邊.  ","version":null,"tagName":"h3"},{"title":"Pure Paste​","type":1,"pageTitle":"Archive: App 安裝紀錄","url":"/life/2023/03/31/mac-setup/#pure-paste","content":" Pure Paste讓預設貼上就是純文字，自動清除複製的文字樣式  ","version":null,"tagName":"h3"},{"title":"Rectangle​","type":1,"pageTitle":"Archive: App 安裝紀錄","url":"/life/2023/03/31/mac-setup/#rectangle","content":" Rectangl to snap windows to different positions. 快速整理安排視窗 Layout 的工具, 外接大螢幕時相當實用.  Mac 視窗管理工具《Rectangle》，一鍵完成視窗分割、縮放、排列 - 蘋果仁 - 果仁 iPhone/iOS/好物推薦科技媒體Mac 視窗分割，用 Rectangle 就對了 - Starbugs Weekly 星巴哥技術專欄 - MediumMoom vs Magnet vs Rectangle | MediumSee Also: Magnet 分割視窗軟體, 支援 「拖曳視窗到螢幕邊界後會自動分割」的功能  ","version":null,"tagName":"h3"},{"title":"XMind Zen​","type":1,"pageTitle":"Archive: App 安裝紀錄","url":"/life/2023/03/31/mac-setup/#xmind-zen","content":" 不得不說, 重新開發的 XMind Zen 不但跟原本的 XMind 一樣好用, 而且更美觀, 快速. 值得更換.  brew install xmind-zen   ","version":null,"tagName":"h3"},{"title":"Menu Bar​","type":1,"pageTitle":"Archive: App 安裝紀錄","url":"/life/2023/03/31/mac-setup/#menu-bar","content":" ","version":null,"tagName":"h2"},{"title":"Itsycal​","type":1,"pageTitle":"Archive: App 安裝紀錄","url":"/life/2023/03/31/mac-setup/#itsycal","content":" Itsycal在功能表列上便捷地查看日曆, 可以查看月曆和事件列表, 還能快速創建新事件.  brew install itsycal   ","version":null,"tagName":"h3"},{"title":"MenubarX​","type":1,"pageTitle":"Archive: App 安裝紀錄","url":"/life/2023/03/31/mac-setup/#menubarx","content":" MenubarX AppStore A powerful menu bar browser. 可在 MenuBar 上放置一個小瀏覽器, 方便查閱資料或當作開發 RWD 網頁時的檢視工具. 亦可將某些網站放置在 menu bar 上當作 App 來使用.  MenubarX 在 Mac 選單列加入瀏覽器，固定經常使用的網頁MenubarX 讓你在 Mac 選單列中瀏覽網頁的小工具（內購限免） - 電腦王阿達讓 Mac 多一個小螢幕的《MenubarX》，打報告、查資料很好用 - 蘋果仁 - 果仁 iPhone/iOS/好物推薦科技媒體  ","version":null,"tagName":"h3"},{"title":"Pomodorome​","type":1,"pageTitle":"Archive: App 安裝紀錄","url":"/life/2023/03/31/mac-setup/#pomodorome","content":" Pomodorome在 menu bar 上的番茄時鐘, 方便調用. 亦有基本統計資訊, 方便追蹤時間使用.  ","version":null,"tagName":"h3"},{"title":"Dozer​","type":1,"pageTitle":"Archive: App 安裝紀錄","url":"/life/2023/03/31/mac-setup/#dozer","content":" brew install dozer   Hidden Bar​  Hidden Bar管理隱藏多餘的 menu bar icon, 使桌面保持清爽, 軟體一多很好用.  Hidden Bar 讓 Mac 工具列更乾淨，自動隱藏用不到的應用程式圖示隱藏、整理 Mac 選單列圖示，《Hidden Bar》幫你輕鬆搞定 - 蘋果仁 - 果仁 iPhone/iOS/好物推薦科技媒體Hidden Bar - 解決 Mac 狀態列圖示太多的小工具 – 蘋果迷 APPLEFANSSee Also: BarTender3,  ","version":null,"tagName":"h3"},{"title":"網路通訊​","type":1,"pageTitle":"Archive: App 安裝紀錄","url":"/life/2023/03/31/mac-setup/#網路通訊","content":" ","version":null,"tagName":"h2"},{"title":"CloudMounter​","type":1,"pageTitle":"Archive: App 安裝紀錄","url":"/life/2023/03/31/mac-setup/#cloudmounter","content":" CloudMounter 把网络云盘放进你的 Finder 里  Get From App Store  ","version":null,"tagName":"h3"},{"title":"rclone​","type":1,"pageTitle":"Archive: App 安裝紀錄","url":"/life/2023/03/31/mac-setup/#rclone","content":" rclone  brew install rclone   ","version":null,"tagName":"h3"},{"title":"其他​","type":1,"pageTitle":"Archive: App 安裝紀錄","url":"/life/2023/03/31/mac-setup/#其他","content":" ","version":null,"tagName":"h2"},{"title":"IINA​","type":1,"pageTitle":"Archive: App 安裝紀錄","url":"/life/2023/03/31/mac-setup/#iina","content":" IINA 是 Mac 上最強大的播放器, 幾乎支援所有影音格式. 開源, UI 美觀.  brew install iina   ","version":null,"tagName":"h3"},{"title":"ExifRenamer​","type":1,"pageTitle":"Archive: App 安裝紀錄","url":"/life/2023/03/31/mac-setup/#exifrenamer","content":" ExifRenamer  brew install exifrenamer   ","version":null,"tagName":"h3"},{"title":"McBopomofo 小麥注音輸入法​","type":1,"pageTitle":"Archive: App 安裝紀錄","url":"/life/2023/03/31/mac-setup/#mcbopomofo-小麥注音輸入法","content":" McBopomofo 小麥注音輸入法反應快速, 輕巧簡單, 為 Mac User 量身打造. 支援標準, 倚天, 許氏, 倚天26 鍵, IBM 以及漢語拼音鍵盤配置.  小麥注音的隱藏設定  ","version":null,"tagName":"h3"},{"title":"See Also​","type":1,"pageTitle":"Archive: App 安裝紀錄","url":"/life/2023/03/31/mac-setup/#see-also","content":" ","version":null,"tagName":"h2"},{"title":"遺珠​","type":1,"pageTitle":"Archive: App 安裝紀錄","url":"/life/2023/03/31/mac-setup/#遺珠","content":" 以下是曾為個人熱愛, 但因故越來越少用的軟體. 暫列於此...  Typora 基於 Markdown 開源的 IDE截圖 截圖除了豐富的標註工具, 支援 QR Code 跨螢幕傳圖, 倒數計時截圖, 標籤與貼紙等功能Franz 集大成的 IM 通訊軟體, 在同一個視窗內使用 Slack, Messenger, Telegram, ...Headset 極為好用的 Youtube 免費線上音樂播放工具! 豐富歌單, 電台以及個人收藏功能Welly 一套運行在 Mac 上功能豐富的BBS軟體, 被 PTT 網頁版 term.ptt.cc 取代了.  ","version":null,"tagName":"h3"},{"title":"Reference​","type":1,"pageTitle":"Archive: App 安裝紀錄","url":"/life/2023/03/31/mac-setup/#reference","content":" 10 BEST Mac Apps for Productivity (in 2022)!5 款免费又好用的 Mac 菜单栏软件 - Mac云课堂22 FREE Mac Apps I use to BOOST MY PRODUCTIVITY - YouTube ","version":null,"tagName":"h3"},{"title":"Make it happen","type":0,"sectionRef":"#","url":"/life/2024/04/27/Make-it-happen/","content":"今天 通勤學英語 15 Mins Today 幕後教師室Teacher's Lounge Ep.35: 強化好習慣的原子架構 James Clear's framework for forming better habitspodcast 節目中聽到 [[Atomic habits]] 的幾個核心精神, 備註一下: 訂定適合自己的學習框架, 可以簡單地拆解成下面四個步驟： Make it obvious 讓它顯而易見Make it attractive 讓它有吸引力Make it easy 讓它簡單易行Make it satisfying 讓它令人滿意 節目中, 另一句更 impress me 的是一萬小時法則 一萬小時定律：任何人做一件事，只要經過一萬小時的錘煉，都能從普通人變為某一領域的頂級人才。 國外作家格拉德威爾在《異類》一書中，明確地指出：“人們眼中的天才之所以卓越非凡，並非天資超人一等，而是付出了持續不斷的努力。 1萬小時的錘煉是任何人從平凡變成超凡的必要條件”。 任何人做一件事，只要經過一萬小時的錘煉，都能從普通人變為某一領域的頂級人才。 暫不討論後續諸多關於一萬小時是否正確的不同觀點延伸討論, 出發立意 - 持之以恆是值得參考的. 紀錄一下, 慢慢讓這些事發生... 一萬小時定律 - MBA智库百科","keywords":"","version":null},{"title":"The Future of the GitLab Web IDE","type":0,"sectionRef":"#","url":"/news/2022/05/24/gitlab-web-ide/","content":"GitLab 發表新 WebIDE 的特色與整合說明, 是以 VS Code 核心引擎 Monaco開發整合而來的. The Web IDE is built on top of the fantastic open source project, Monaco. What made Monaco a great choice as the foundation of the Web IDE is also what makes it more difficult to address all these concerns holistically. Monaco is just that: a foundation. We have to implement all these workflows and features ourselves. Meanwhile, another open source project has been laser-focused on delivering a lovable IDE on top of Monaco. VS Code 確實是 Microsoft 近年來最受歡迎肯定的產品專案. 以 VS Code 為基礎整合開發其實合理. 但因微軟同時擁有 GitHub, 整件事變得有趣. It's interesting to me that GitLab is adopting a Microsoft product (VS Code) and Microsoft owns a significant competitor in GitHub. Nothing intelligent to say about that other than to wish I'd been a fly on the wall for the discussions about that. Hacker News上許多討論為何 GitHub 身為 GitLab 最大的對手, GitLab 卻選用了對手母公司的專案作為核心功能. 順便把曾經被 GitHub 號稱的 21 世紀 IDE - Atom 抓出來鞭屍一下.","keywords":"","version":null},{"title":"WWDC 2022","type":0,"sectionRef":"#","url":"/news/2022/06/07/wwdc/","content":"一如往常蘋果開發者年會, WWDC 主要著重在 OS 方面的更新, 比較少硬體相關發表. 而從 2020 一鳴驚人的 M1 處理器面世之後, 蘋果大型發表會幾乎都有更強大後續更新發表. 從 M1 Pro / M1 Max / M1 Ultra, 這次則發表了 M2 處理器. 有趣的是, 在官方發表的訊息看來, M2 處理器, 除了採用新一代的 5nm 製程外, 本質架構上似乎是和 M1 一樣, 由 A14 魔改而來的版本. 期待的以 A15 核心發展而來的 M2 似乎還在路上? 更新: 後續多家媒體的評測分析來看, 大多認為 M2 採用的應該是 A15 核心. 不過官方沒有正式消息, 先補充備記於此. 過去 Intel CPU, 以架構和製程各每兩年一次重大更新交錯發表聞名的 Tick-Tock 戰略, 而好些時間發表效能又不符合期待, 被戲稱為擠牙膏. M2 相對於 M1 已有兩年時間, 體質架構上沒有改變, 而是製程的成長帶來了效能提昇. 兩年之後的效能提昇了 18%, 似乎和擠牙膏時期的 Intel 差不多? 期許 Apple 別走向 Intel 後塵, 期待市場上有多樣各自特色的產品供應選擇. WWDC 2022 上另一個新硬體是和 2020 M1 一起發表的 Macbook Air / Macbook Pro 13&quot;. 其中 Macbook Pro 13&quot; 除了 CPU 升級外, 其餘都和 M1 版本一樣. 可以看得出來 MBP 13&quot; 準備走入歷史了, 由 MBP 14&quot; 取代. 而 M2 Macbook Air 各項設計語言也和 MBP 14&quot;/16&quot; 看齊. 看來我所不喜歡的外表, 會是未來好段時間 Macbook 系列的統一長相. 而我最期待的 Macbook 12&quot; 並沒有後續機種的消息, 看來是徹底走入歷史了. 而 WWDC 上主軸的軟體更新, 一方便覺得 3C 整合確實越來越方便了. 手機 / 平板 / 電腦的協同工作越來越無縫銜接. 不過蘋果自成體系的生態圈似乎也越來越排外, 近年來許多新功能, 對於非完全蘋果體系的用戶, 是很無感的.","keywords":"","version":null},{"title":"Give up GitHub ?","type":0,"sectionRef":"#","url":"/news/2022/07/01/give-up-github/","content":"Give Up GitHub: The Time Has Come! - Conservancy Blog - Software Freedom Conservancy是今天上 Hacker News 的熱門討論. 通篇來說, 支持反對或中立幾方的討論, 好像還是回到 Vim V.S Emacs 之類的信仰之爭. 前些日子, GitHub 毫不意外地公告了 Atom 退場, 近日 GitHub 又推出了可能有版權疑慮的收費服務 GitHub Copilot, 相信這些舉動會踩到 FOSS 基礎教義派支持者. 對許多開源開發者來說, MS 代表了原罪. 即使 GitHub 打從一開始就聲明 GitHub 是商業公司, 不是非營利組織. 當他獨立經營時, GitHub 對開發整合帶來的便利, 深受各方開發者喜好, 也包括 FOSS 專案與社群. 而當 MS 買下 GitHub 後 GitHub 一舉一動都會被放大檢視與批評. 個人暫時是中立偏向支持 GitHub 的立場. 自由軟體若能適當結合商業行為, 才能走得更遠. ref: Give Up GitHub - Software Freedom Conservancy 22.07.05 update 相關後續報導: 開源社群發起抵制！工程師 AI 助手 Github Copilot 為何被 NGO 點名？ | TechOrange 科技報橘放棄 GitHub：時機已到？Copilot收費，惹怒軟體自由保護協會SFC | T客邦","keywords":"","version":null},{"title":"Next Figma?","type":0,"sectionRef":"#","url":"/news/2022/09/16/prototype-platform/","content":"今天各大資訊 RSS 很熱門的新聞是 Adobe 宣佈要收購 Figma:Adobe to acquire Figma for $20B | Hacker News. Adobe宣布以200億美元收購Figma！直接吃下最大競爭對手｜數位時代 BusinessNextAdobe 200 億美元收購同業新秀 Figma - Engadget 中文版【快訊】Adobe 要用 200 億美元買下 Figma 設計協作平台！ - INSIDE 有趣的是 Hacker News 上另一則資訊 Penpot: Open-source design and prototyping platform | Hacker News同時也上了 Daily Top 10, 看來大家對 Figma 之後的商業行為有許多疑慮. Penpot is the first Open Source design and prototyping platform meant for cross-domain teams. Non dependent on operating systems, Penpot is web based and works with open web standards (SVG). For all and empowered by the community. 簡單試用了一下 Penpot, 功能其實相當完善了, 是個被埋沒已久的專案. 不知道對這樣開源免費的專案, 最大競爭對手被產業巨頭收購是福是禍. 簡單紀錄. Penpot - Design Freedom for Teams","keywords":"","version":null},{"title":"GitHub Copilot GA","type":0,"sectionRef":"#","url":"/news/2022/06/24/github-copilot/","content":"","keywords":"","version":null},{"title":"GitHub Copilot​","type":1,"pageTitle":"GitHub Copilot GA","url":"/news/2022/06/24/github-copilot/#github-copilot","content":" 這幾天開發者社群最大的新聞應該是 GitHub 公告正式開放GitHub Copilot. Hacker News 上也討論的沸沸洋洋: GitHub Copilot is generally available  價錢也出來了，US$10/mo 或是 US$100/year：  We’re making GitHub Copilot, an AI pair programmer that suggests code in your editor, generally available to all developers for $10 USD/month or $100 USD/year. It will also be free to use for verified students and maintainers of popular open source projects.  書寫程式時, GitHub Copilot AI 會即時跑出建議的修改或是下一行的編寫, 建議的資訊, 不單是幾個字或一行程式, GitHub Copilot 會以最完整的解決方法來協助開發者解決問題. 無論是提供樣板程式碼, 整個單元測試, 甚至是更複雜的演算法等。  ","version":null,"tagName":"h2"},{"title":"Tabnine​","type":1,"pageTitle":"GitHub Copilot GA","url":"/news/2022/06/24/github-copilot/#tabnine","content":" 早些年前, Tabnine 就提供了利用 AI 分析程式碼的自動完成工具. 傳統 IDE 的自動補完, 大多是分析程式碼中的變數, 物件屬性, 函式等, 提供對應的自動完成建議.  而 Tabnine 除了程式庫中的既有程式碼等分析資料外, 也會利用 AI 訓練分析的結果, 提供開發者可能會需要的自動補完推薦. 長期使用下來, 覺得 Tabnine 確實對開發上是有幫助的.  但 Tabnine 主要僅提供自動完成的推薦, 開發上還是一行行自己輸入. 而 GitHub Copilot 提供更多程式片段, 可能是一整個功能區塊程式樣板等.  可以理解 GitHub Copilot 帶來的便利. 畢竟過往經驗中, 有相當程度功能區塊其實都非常雷同, 尤其是像 CRUD / Error Handling / unit test / ... 等程式片段. 很多時候開發上確實是複製貼上到不同專案而已.  ","version":null,"tagName":"h2"},{"title":"Amazon CodeWhisperer​","type":1,"pageTitle":"GitHub Copilot GA","url":"/news/2022/06/24/github-copilot/#amazon-codewhisperer","content":" 無獨有偶地, 近日亞馬遜在 re:Mars 公布了一款名為 CodeWhisperer 的自動寫程式輔助工具的預覽版本.  亞馬遜的 CodeWhisperer 是一種能協助軟體工程師擁有更高寫程式效率的 AI 工具, 根據亞馬遜的說法，CodeWhisperer 將不斷檢查工程師所寫的程式碼, 並且提供正確的建議.  ","version":null,"tagName":"h2"},{"title":"Issues​","type":1,"pageTitle":"GitHub Copilot GA","url":"/news/2022/06/24/github-copilot/#issues","content":" ","version":null,"tagName":"h2"},{"title":"license​","type":1,"pageTitle":"GitHub Copilot GA","url":"/news/2022/06/24/github-copilot/#license","content":" 目前這個服務被著重討論的問題, 第一個是 license 問題， Hacker News 上有人提到有些程式碼的授權是有感染性的 GPL 類的, 若 GitHub Copilot 自動完成的程式片段引用了這些程式碼, 是否違反 GPL 規範, 這是個全新的問題, 在法院上還沒有被戰過.  ","version":null,"tagName":"h3"},{"title":"code quality​","type":1,"pageTitle":"GitHub Copilot GA","url":"/news/2022/06/24/github-copilot/#code-quality","content":" 另一個疑慮是, 學術界針對 Copilot 的研究論文指出, 在 1,689 個使用 Copilot 建議的程式中, 有 40% 的程式生成的程式碼具有已知的弱點. 而另一篇論文則指出 Github Copilot 事實上加速了劣質程式碼的產生.  所以類似工具的使用, 仍然很依靠工程師對程式碼掌握的程度. 否則程式產出快速, 但後續除錯的功夫, 可能事倍功半. (也許之後會有 AI debug 服務吧, 笑)  ","version":null,"tagName":"h3"},{"title":"References​","type":1,"pageTitle":"GitHub Copilot GA","url":"/news/2022/06/24/github-copilot/#references","content":" 工程師歡呼吧！寫程式 AI 神器 GitHub Copilot 月租費只要 120 | TechOrange 科技報橘| 亞馬遜也推出了 AI 寫程式助手 CodeWhisperer，和 Github Copilot 有何不同？| 工程師殺手級工具！一秒自動補齊後續程式碼，還支援 23 種程式語言工程師可以偷懶了？Github可幫你寫程式的AI輔助工具Copilot上線，月費只要10美元 | T客邦GitHub Copilot 宣佈 GA – Gea-Suan Lin's BLOG| AWS 也推出了 GitHub Copilot 的競爭對手 Amazon CodeWhisperer| 測試 Neovim + GitHub CopilotGitLab與Tabnine合作向開發者提供AI程式碼完成功能 | iThome ","version":null,"tagName":"h2"},{"title":"Obsidian 1.0","type":0,"sectionRef":"#","url":"/news/2022/10/13/obsidian-1-0/","content":"日常執行 brew upgrade 時順便滑 Hacker News 時看到 Obsidian 1.0 – Personal knowledge base app. 然後就注意到 恭喜 Obsidian, 1.0 正式 Release! 初步試了一下, 介面上更加洗煉外, 一般需求並沒有太多不同感受. 也可能是我尚未深入使用 Obsidian 吧, 目前多數文章還是在部落格下, 只是順便利用 Obsidian 來幫忙進行本地端關聯管理而已. 需要再撥時間好好理順如何把 Obsidian 加入生活或工作流程中. BTW, 編寫文章時同時注意到另一個可能值得關注的新筆記管理軟體 Logseq: A privacy-first, open-source knowledge base, 許多特性和 Obsidian 挺像, 哪天好好試用再決定最終去處.","keywords":"","version":null},{"title":"A Calculated Move","type":0,"sectionRef":"#","url":"/news/2023/01/29/calculators/","content":"互聯網檔案館在 Multi-purpose Emulation Framework (MAME)支持之下所推出的 The Calculator Drawer一下子就炸裂了 HN. 討論串裡滿滿的懷舊, 即使不會用, 國小時的工程計算機, 國中的翻譯機, 都是當年熱門, 現在的懷念. Refs: A Calculated Move: Calculators Now Emulated at Internet Archive - Internet Archive Blogs互聯網檔案館推出「計算機抽屜」，帶你回到高中數學班 - Engadget 中文版","keywords":"","version":null},{"title":"Surf 06.05 ~ 06.11","type":0,"sectionRef":"#","url":"/news/2023/06/11/_Surfing/","content":"解決規劃任務還是停滯不前的防彈筆記新策略：記錄驅動目標法則How to make fancy road trip maps with R and OpenStreetMap | Andrew HeissHow to make fancy road trip maps with R and OpenStreetMap | Hacker NewsGoogle / Apple / Here (MS) 以外的最大地圖服務Virtualization | Apple Developer DocumentationApple Virtualization Framework | Hacker News在 WWDC 2023 上 HN Daily, 期待在 WWDC 會有更進一步的資訊ggml.aiGGML – AI at the Edge | Hacker News地端的 AI, 用 CPU 運算是主要亮點How to Split Screens in Edge (and Other Browsers) for Multitasking - Make Tech Easier edge://flags/#edge-split-screen ","keywords":"","version":null},{"title":"WWDC 2023","type":0,"sectionRef":"#","url":"/news/2023/06/06/wwdc/","content":"一如往常蘋果開發者年會, 今年除了還很遙遠, 以及個人並不太看好的 MR 裝置外, 幾乎沒亮點了. 過往 Apple 總能在軟體 / 設計 / 生態圈上讓人驚艷! 原來還能這樣玩! 今年除了不斷打臉自己, 把過去鄙視他廠的功能抄過來, 把過各種嫌棄移掉的功能拿回來, 最最重要的一件事, 大概就全產品線採用 Apple Silicon, 正式預告黑蘋果的落日吧. 至於 MR 裝置, 買前生產力, 買後 JAV....","keywords":"","version":null},{"title":"Surf 07.01 ~ 07.16","type":0,"sectionRef":"#","url":"/news/2023/07/16/_Surfing/","content":"","keywords":"","version":null},{"title":"IT News​","type":1,"pageTitle":"Surf 07.01 ~ 07.16","url":"/news/2023/07/16/_Surfing/#it-news","content":" 【資安週報】2023年7月3日到7月7日 | iThomeEvernote 裁退美國接近所有員工，專注佈局歐洲市場SUSE 參戰：SUSE 宣佈投入 RHEL clone – Gea-Suan Lin's BLOGNeuroDB图数据库引擎 发布，一款全自主研发的国产图数据库引擎 - CNode技术社区  ","version":null,"tagName":"h3"},{"title":"Tech​","type":1,"pageTitle":"Surf 07.01 ~ 07.16","url":"/news/2023/07/16/_Surfing/#tech","content":" 5 Easy Ways to Check for Open Ports on Linux使用 MySQL status 查看是否還有 Query 進來 – Tsung's Blog[LangChain] LangChain Embedding 中可能發生的問題為什麼有些人都不刪除用不到的程式碼？ | Complete Think  ","version":null,"tagName":"h3"},{"title":"Life​","type":1,"pageTitle":"Surf 07.01 ~ 07.16","url":"/news/2023/07/16/_Surfing/#life","content":" 2023年7月3日、4日破人類史上最熱溫度紀錄 – Tsung's Blog ","version":null,"tagName":"h3"},{"title":"Surf 05.28 ~ 06.03","type":0,"sectionRef":"#","url":"/news/2023/06/04/_Surfing/","content":"Rust has been forked to the Crab Language | Hacker News 日前才傳出 Rust 核心成員離開的消息, Why I Left Rust | Hacker News 原本以為又是另一個分家的專案, 仔細看原來是不同取向的分支. 還沒有時間學 Rust, 先 note...","keywords":"","version":null},{"title":"Surf 07.17 ~ 07.30","type":0,"sectionRef":"#","url":"/news/2023/07/30/_Surfing/","content":"","keywords":"","version":null},{"title":"IT News​","type":1,"pageTitle":"Surf 07.17 ~ 07.30","url":"/news/2023/07/30/_Surfing/#it-news","content":" C# 與 TypeScript 之父推出開放原始碼專案 TypeChat，用於大型語言模型與自然語言接口 | T客邦How to Choose the Right Project Management Tool  ","version":null,"tagName":"h3"},{"title":"Tech​","type":1,"pageTitle":"Surf 07.17 ~ 07.30","url":"/news/2023/07/30/_Surfing/#tech","content":" saml 2.0 - Authenticate against WSO2 Identity Server with no browser and get SAML2 assertion message - Stack Overflow  ","version":null,"tagName":"h3"},{"title":"Life​","type":1,"pageTitle":"Surf 07.17 ~ 07.30","url":"/news/2023/07/30/_Surfing/#life","content":" 6 Free 4-Week Training Plans for Short-Term Fitness Goals豆漿詐騙！號稱「 國產」豆漿竟摻進口豆，業者憂衝擊台灣大豆產業，食藥署：無法可管 | 上下游News&amp;Market 無法可管... ","version":null,"tagName":"h3"},{"title":"Surf 09.16 ~ 09.30","type":0,"sectionRef":"#","url":"/news/2023/09/30/_Surfing/","content":"","keywords":"","version":null},{"title":"IT News​","type":1,"pageTitle":"Surf 09.16 ~ 09.30","url":"/news/2023/09/30/_Surfing/#it-news","content":" 四款雲端儲存服務價格比一比，pCloud／Google Drive／OneDrive／Dropbox | 就是教不落 - 給你最豐富的 3C 資訊、教學網站搞笑談軟工: 練好基本功# Java 21: The Nice, The Meh, and the ... MomentousGolang 將改變常見的 closure 地雷 – Gea-Suan Lin's BLOG  ","version":null,"tagName":"h3"},{"title":"Tech​","type":1,"pageTitle":"Surf 09.16 ~ 09.30","url":"/news/2023/09/30/_Surfing/#tech","content":" scp -3：直接對兩個 remote host 複製檔案 – Gea-Suan Lin's BLOGcURL 放入 ipfs:// 支援 – Gea-Suan Lin's BLOG使用 acme.sh 來產生 HTTPS CA 憑證 – Tsung's Blog大家有没有学习用ts开发node.js的诉求？ - CNode技术社区學習 ECMAScript/JavaScript 6 - Async Function 問答指引 - 石頭閒語  ","version":null,"tagName":"h3"},{"title":"Life​","type":1,"pageTitle":"Surf 09.16 ~ 09.30","url":"/news/2023/09/30/_Surfing/#life","content":" 金三益健康茶飲、溪仔香腸熟肉、神農街 — 被飲料耽誤的海鮮店 與 「老臺南味」，老街美麗夜景相隨 - Mobile01Planet VPN 評測：無限流量免費 VPN 推薦，無需註冊即可使用無私奉獻最最快樂，觀音山揹水新嘗試 - Mobile01你都記得你有哪些保單嗎？透過壽險公會保險存褶就能查看各種保險記錄 | 就是教不落 - 給你最豐富的 3C 資訊、教學網站 ","version":null,"tagName":"h3"},{"title":"Surf 08.16 ~ 08.31","type":0,"sectionRef":"#","url":"/news/2023/08/31/_Surfing/","content":"","keywords":"","version":null},{"title":"IT News​","type":1,"pageTitle":"Surf 08.16 ~ 08.31","url":"/news/2023/08/31/_Surfing/#it-news","content":" Show HN: Open-source obsidian.md sync server | Hacker News GitHub - acheong08/rev-obsidian-sync: Reverse engineering of Obsidian sync server  ","version":null,"tagName":"h3"},{"title":"Tech​","type":1,"pageTitle":"Surf 08.16 ~ 08.31","url":"/news/2023/08/31/_Surfing/#tech","content":" HashiCorp 內 scale 的方法 – Gea-Suan Lin's BLOG.NET Walker: 禁止RDP(遠端桌面)用戶連上VM時複製、貼上或掛載本機硬碟.NET Walker: 使用CLI發送免費的LINE Notify通知awk introduction - CLI text processing with GNU awk  ","version":null,"tagName":"h3"},{"title":"Life​","type":1,"pageTitle":"Surf 08.16 ~ 08.31","url":"/news/2023/08/31/_Surfing/#life","content":" 赤峰街，文青、網紅新聖地，鄰近捷運中山、雙連站 by Tony的遊記 - 旅聯網最新美國國家公園介紹（63座國家公園旅遊資訊）有點廢但其實還蠻有趣的 macOS 軟體「DockX」，Pro 版限時免費中 | 就是教不落 - 給你最豐富的 3C 資訊、教學網站利用 Vision Board，我成功達成了今年年初設下的目標 - A Day Magazine學會「不帶情緒工作」後，每天都開心下班 - A Day Magazine阿爾卑斯山美景「太貴了」，我們要改變規則！──專訪第一屆瑞士數位遊牧節｜俞錦梅 Yu, Chin Mei／May 在瑞士擱淺｜換日線深度走訪三大宗教聖地，以色列如何展現文化、歷史與人情味？｜凱倫｜換日線發現最佳 AI 網站，來看看大家都在用哪些 AI 工具 | 就是教不落 - 給你最豐富的 3C 資訊、教學網站 ","version":null,"tagName":"h3"},{"title":"Surf 09.01 ~ 09.15","type":0,"sectionRef":"#","url":"/news/2023/09/15/_Surfing/","content":"","keywords":"","version":null},{"title":"IT News​","type":1,"pageTitle":"Surf 09.01 ~ 09.15","url":"/news/2023/09/15/_Surfing/#it-news","content":" Usenet 的回春？ – Gea-Suan Lin's BLOGNode.js 20.6支援.env配置檔，加入C++垃圾回收函式庫Oilpan | iThome  ","version":null,"tagName":"h3"},{"title":"Tech​","type":1,"pageTitle":"Surf 09.01 ~ 09.15","url":"/news/2023/09/15/_Surfing/#tech","content":" Linux NetworkManager 用命令列工具或組態檔設定網路連線 - 石頭閒語  ","version":null,"tagName":"h3"},{"title":"Life​","type":1,"pageTitle":"Surf 09.01 ~ 09.15","url":"/news/2023/09/15/_Surfing/#life","content":" 蕭文杰／遊蕩在地方的威權幽靈──台灣不義遺址保存困境 - 報導者 The ReporterBright VPN 全免費跨區下載最佳夥伴，解鎖全球 40+ 國家連線節點Site Unreachable ","version":null,"tagName":"h3"},{"title":"Surf 08.01 ~ 08.15","type":0,"sectionRef":"#","url":"/news/2023/08/15/_Surfing/","content":"","keywords":"","version":null},{"title":"IT News​","type":1,"pageTitle":"Surf 08.01 ~ 08.15","url":"/news/2023/08/15/_Surfing/#it-news","content":" Vim 作者 Bram Moolenaar 過世 – Gea-Suan Lin's BLOG  ","version":null,"tagName":"h3"},{"title":"Tech​","type":1,"pageTitle":"Surf 08.01 ~ 08.15","url":"/news/2023/08/15/_Surfing/#tech","content":" 凝聚團隊共識與人才養成 | Complete Think1 on 1 聊什麼 - PERMA | Complete ThinkAPI 設計 - API 整合矩陣 | Complete ThinkAPI 設計 - 摘要 API 通訊模式與協議 | Complete Think  ","version":null,"tagName":"h3"},{"title":"Life​","type":1,"pageTitle":"Surf 08.01 ~ 08.15","url":"/news/2023/08/15/_Surfing/#life","content":" 什麼？微軟 Edge 瀏覽器裡面居然偷藏免費VPN ！？ ","version":null,"tagName":"h3"},{"title":"以巴戰爭","type":0,"sectionRef":"#","url":"/news/2023/10/07/Israel-Palestine/","content":"","keywords":"","version":null},{"title":"Surf​","type":1,"pageTitle":"以巴戰爭","url":"/news/2023/10/07/Israel-Palestine/#surf","content":" 【Daily Podcast】以軍轟炸加薩難民營，另擊落葉門胡塞軍飛彈／孟加拉成衣工人罷工與反政府示威 | 過去24小時 | 轉角國際 udn Global【時事英文】五分鐘讀懂以巴戰爭懶人包：為什麼發生衝突？加薩走廊在哪裡？哈瑪斯又是誰？ | Engoo線上英文以巴衝突與哈瑪斯，主流媒體沒說的事（上）悲劇並非新聞，75 年來從未間斷｜換日線關鍵字 Podcast｜換日線百聞不如一見？我在「加」解鎖各種限定體驗｜Ｗinnie／在加的故事｜換日線 ","version":null,"tagName":"h3"},{"title":"Surf 10.16 ~ 10.31","type":0,"sectionRef":"#","url":"/news/2023/10/31/_Surfing/","content":"","keywords":"","version":null},{"title":"IT News​","type":1,"pageTitle":"Surf 10.16 ~ 10.31","url":"/news/2023/10/31/_Surfing/#it-news","content":" 你也忽略資安問題了嗎？每個人都應該看完（feat. Bitdefender 必特 Total Security 全方位資安軟體） | 就是教不落 - 給你最豐富的 3C 資訊、教學網站15 年前發明煩死人的密碼規則，Bill Burr：抱歉浪費大家時間 - INSIDE.NET Walker: 什麼是Claim-Based IdentityISP 偽造出合法的 SSL certificate，對放在德國的 xmpp.ru 進行 MITM 監聽 – Gea-Suan Lin's BLOGClaude 2 開放台灣註冊：Claude 2是什麼？與ChatGPT有何不同？中文上手實用懶人包 | T客邦  金融上雲​  金管會正式發布金融業運用AI原則，放寬業者使用AI皆須人為判斷的一致性規範 | iThomeFintech周報第219期：新光金保代將建置新核心系統；金管會正式發布金融業運用AI原則 | iThome【金融上雲實例：富邦金控】以O365先強化全體員工上雲意識，富邦金要靠多雲加速實踐金融百貨願景 | iThome金融上雲大鬆綁 | iThome新金融上雲潮 | iThome【金融上雲實例：國泰金控】以雲原生發展多雲混合雲，國泰金自建轉型平臺加速大規模上雲 | iThome快速了解金融上雲鬆綁重點QA | iThome金融上雲再次大鬆綁，將掀起金融業新一波加速上雲潮 | iThome  ","version":null,"tagName":"h3"},{"title":"Tech​","type":1,"pageTitle":"Surf 10.16 ~ 10.31","url":"/news/2023/10/31/_Surfing/#tech","content":" 寫出 乾淨程式碼 的 六條規則 – Tsung's Blog.NET Walker: 使用 DevTunnel 做 WebAPI 的測試偵錯架構面試題 #5: Re-Order Messages — 安德魯的部落格Go 語言專案開發 Hot Reload 工具 - air - 小惡魔 - AppleBOYMSSQL 使用 sqlcmd 列出所有資料庫名稱 – Tsung's BlogSite Unreachable  ","version":null,"tagName":"h3"},{"title":"Life​","type":1,"pageTitle":"Surf 10.16 ~ 10.31","url":"/news/2023/10/31/_Surfing/#life","content":" Obs143｜分頁式介面的應用：HTML Tabs外掛；增加Obsidian呈現的便利性 – 簡睿隨筆如何轉移 Spotify 播放清單？Tune My Music 音樂平台移轉工具教學大稻埕教會、延平教會、大稻埕慈聖宮、涼州街街屋與原永樂公學校校舍 — 臺北橋下之大稻埕散策 第一部 - Mobile01(映像旅行) 燒土化瓷金in新北市鶯歌區 - Mobile01蘋果自製 Lofi 音樂影片在 YouTube 上架了，時長 92 分鐘 - INSIDE【開箱】微醺之夜，讓家變成品味承載所，桃園室內27坪現代風住宅 - Mobile01竹山半日遊 ~ 紫南宮、車籠埔斷層保存園區、竹青庭、丸二米粉、大崙山觀霧亭、竹山水路 - Mobile01巨蟹泡鹽水浴、金牛赤腳行走：最適合 12 星座的「氣場淨化」儀式，自己就能在家改運 - A Day Magazine經歷朝九晚五的洗禮，我發現自己不只是社畜，還是一個沒意義的社畜 - A Day Magazine新完工！五星級！老少咸宜，湖口茶香步道, 裝甲兵部隊的故鄉 by Tony的遊記 - 旅聯網 ","version":null,"tagName":"h3"},{"title":"Surf 11.01 ~ 11.15","type":0,"sectionRef":"#","url":"/news/2023/11/15/_Surfing/","content":"","keywords":"","version":null},{"title":"IT News​","type":1,"pageTitle":"Surf 11.01 ~ 11.15","url":"/news/2023/11/15/_Surfing/#it-news","content":" Sentry 的替代品：GlitchTip – Gea-Suan Lin's BLOGCloudflare 前幾天 API 與 Dashboard 出事的 Post Mortem 記錄 – Gea-Suan Lin's BLOG  ","version":null,"tagName":"h3"},{"title":"Tech​","type":1,"pageTitle":"Surf 11.01 ~ 11.15","url":"/news/2023/11/15/_Surfing/#tech","content":" .NET Walker: 在APIM中自動使用Jwt Token統一進行驗證Slim Docker Images for Java - Piotr's TechBlogGo, Containers, and the Linux SchedulerSign-in with OOO ID : O3noBLOGPython List 移除 del 和 remove() 的差異 – Tsung's Blog.NET Walker: 在自己的系統中實現手機二階段驗證讓 git diff 可以直接顯示 SQLite3 裡面的差異 – Gea-Suan Lin's BLOG  ","version":null,"tagName":"h3"},{"title":"Life​","type":1,"pageTitle":"Surf 11.01 ~ 11.15","url":"/news/2023/11/15/_Surfing/#life","content":" 捷克人是「和台灣人很像的歐洲人」？駐捷大使第一手的異國生活觀察｜劉郁葶／台灣女孩的捷克觀察日記｜換日線週末台北不知要去哪？我找到一個超稀有的活動工坊，有道地異國美食、還能和新朋友玩遊戲 - A Day Magazine美味珍稀的「千年之牛」─日本見島牛是台灣和牛的起點？一段台日海路的歷史航程 | 上下游『關於Buck調酒，飲酒冷知識57』 @ 癮型人的調酒世界 :: 痞客邦 ::很多人都在推薦「正念購物」，試過之後，我的衝動消費欲變淡了 - A Day Magazine168斷食減肥的正確吃法 – Tsung's Blog【TMB制霸】：2023年〡一個女生的「環白朗峰170公里」健行（行前） - Mobile01.NET Walker: (無須程式碼)三分鐘建立出自己的GPT請假助手 ","version":null,"tagName":"h3"},{"title":"Surf 11.16 ~ 11.30","type":0,"sectionRef":"#","url":"/news/2023/11/30/_Surfing/","content":"","keywords":"","version":null},{"title":"IT News​","type":1,"pageTitle":"Surf 11.16 ~ 11.30","url":"/news/2023/11/30/_Surfing/#it-news","content":"   ","version":null,"tagName":"h3"},{"title":"Tech​","type":1,"pageTitle":"Surf 11.16 ~ 11.30","url":"/news/2023/11/30/_Surfing/#tech","content":" Wasm By Example用C# 做了个将所有 Word、Excel、PPT 文件逐个转换为 PDF的软件 欢迎大家免费用 - CNode技术社区BestGPTs：分享最好用的 GPTs - CNode技术社区  ","version":null,"tagName":"h3"},{"title":"Life​","type":1,"pageTitle":"Surf 11.16 ~ 11.30","url":"/news/2023/11/30/_Surfing/#life","content":" 台南慢遊 ~ 蝸牛巷、神農街、水交社文化園區、牛稠子車站公園、小啡巷咖啡 - Mobile01FadBlock：全新 YouTube 廣告阻擋技術，讓廣告在瞬間播放完畢義大利柳橙大戰、泰國猴子派對：今年底到 2024 年，6 個刷新旅遊高度的奇葩慶典 - A Day Magazine【立霧山】小百岳之終極大魔王 | 太魯閣國家公園內值得一探的好山 - Mobile01 ","version":null,"tagName":"h3"},{"title":"Surf 10.01 ~ 10.15","type":0,"sectionRef":"#","url":"/news/2023/10/15/_Surfing/","content":"","keywords":"","version":null},{"title":"IT News​","type":1,"pageTitle":"Surf 10.01 ~ 10.15","url":"/news/2023/10/15/_Surfing/#it-news","content":" WordPress.com 支援 ActivityPub – Gea-Suan Lin's BLOGClickHouse 弄了一個 C++ 寫的 ZooKeeper drop-in replacement：ClickHouse Keeper – Gea-Suan Lin's BLOGPercona XtraDB Cluster (PXC) 的感想 – Gea-Suan Lin's BLOG  ","version":null,"tagName":"h3"},{"title":"Tech​","type":1,"pageTitle":"Surf 10.01 ~ 10.15","url":"/news/2023/10/15/_Surfing/#tech","content":" gzip 的 –rsyncable (zstd 也有) – Gea-Suan Lin's BLOG快速設定 Git Commit Signature Verification - 小惡魔 - AppleBOY加密檔案的好工具 - age - 小惡魔 - AppleBOYSite Unreachable  ","version":null,"tagName":"h3"},{"title":"Life​","type":1,"pageTitle":"Surf 10.01 ~ 10.15","url":"/news/2023/10/15/_Surfing/#life","content":" Obs142｜輕鬆烘烤(彙編)出需要的筆記：Easy Bake – 簡睿隨筆Obs138｜以標籤為基底，用Dataview形成索引筆記的嘗試 – 簡睿隨筆太少用到 VPN？偶而用可以試試 FlyVPN 推出的 24 小時使用方案 | 就是教不落 - 給你最豐富的 3C 資訊、教學網站 ","version":null,"tagName":"h3"},{"title":"Surf 01.16~ 01.31","type":0,"sectionRef":"#","url":"/news/2024/01/31/_Surfing/","content":"","keywords":"","version":null},{"title":"IT News​","type":1,"pageTitle":"Surf 01.16~ 01.31","url":"/news/2024/01/31/_Surfing/#it-news","content":" Azure量子開發套件工具包1.0發布，在瀏覽器就可進行量子程式開發 | iThome.NET Walker: DevOps導入前後，該如何評估成效?  ","version":null,"tagName":"h3"},{"title":"Tech​","type":1,"pageTitle":"Surf 01.16~ 01.31","url":"/news/2024/01/31/_Surfing/#tech","content":"   ","version":null,"tagName":"h3"},{"title":"Life​","type":1,"pageTitle":"Surf 01.16~ 01.31","url":"/news/2024/01/31/_Surfing/#life","content":" 2024 高效工作法：如何用防彈筆記打造提升生產力的支持系統（實戰案例總集） ","version":null,"tagName":"h3"},{"title":"Surf 12.16~ 12.31","type":0,"sectionRef":"#","url":"/news/2023/12/31/_Surfing/","content":"","keywords":"","version":null},{"title":"IT News​","type":1,"pageTitle":"Surf 12.16~ 12.31","url":"/news/2023/12/31/_Surfing/#it-news","content":" Jepsen 回過頭來測試 MySQL 8.0 – Gea-Suan Lin's BLOGFlipboard後端將全面改用ActivityPub | iThome ActivityPub  ","version":null,"tagName":"h3"},{"title":"Tech​","type":1,"pageTitle":"Surf 12.16~ 12.31","url":"/news/2023/12/31/_Surfing/#tech","content":" SSH over HTTPS 穿越 Firewall 的作法 – Gea-Suan Lin's BLOG 讓 git blame 可以忽略掉某些 restyle/reformat 的 commit – Gea-Suan Lin's BLOG  ","version":null,"tagName":"h3"},{"title":"Life​","type":1,"pageTitle":"Surf 12.16~ 12.31","url":"/news/2023/12/31/_Surfing/#life","content":" 寫筆記就是做好心智運動，分享防彈筆記法的四種日常思考力鍛鍊全台首間沈浸式湯屋酒吧「崎白湯屋」於台北東區正式開幕！得以品飲響、山崎、白州等珍稀酒款 - Mobile01Site Unreachable越南除了咖啡、河粉還有什麼？──從 3 位越南女性的故事，一窺「生機勃勃」的越南印象｜春嘻／讀者投書｜換日線 ","version":null,"tagName":"h3"},{"title":"Surf 01.01~ 01.15","type":0,"sectionRef":"#","url":"/news/2024/01/15/_Surfing/","content":"","keywords":"","version":null},{"title":"IT News​","type":1,"pageTitle":"Surf 01.01~ 01.15","url":"/news/2024/01/15/_Surfing/#it-news","content":" Kinsta 免費網站空間，每月有100GB流量，並支援CI/CD自動化部署 | 梅問題．教學網Rust 1.75改進特徵語言功能，簡化非同步程式設計 | iThomeLenovo ThinkBook Plus Gen 5 把 Windows 筆電底盤和 14 吋 Android 平板結合到了一起 出社會後第一個專案, 十多年後真實被產品化了.  ","version":null,"tagName":"h3"},{"title":"Tech​","type":1,"pageTitle":"Surf 01.01~ 01.15","url":"/news/2024/01/15/_Surfing/#tech","content":" 用 x86 組語寫的 web forum – Gea-Suan Lin's BLOG用 shebang 掛起 Docker instance – Gea-Suan Lin's BLOG[Golang][Notion] 如何透過 Golang 來操控 Notion DB 當成線上資料庫[Golang][Gemini Pro] 使用 Chat Session 與 LINEBot 快速整合出有記憶的智慧小幫手觀察 Docker image 每一層變化的 dive，以及操作的 crane – Gea-Suan Lin's BLOG  ","version":null,"tagName":"h3"},{"title":"Life​","type":1,"pageTitle":"Surf 01.01~ 01.15","url":"/news/2024/01/15/_Surfing/#life","content":" 【開箱】客廳我們不要了！！！被書櫃包圍的現代溫馨宅 - Mobile01【開箱】打破傳統格局吧！自由曲線的藝廊風格訂製宅 - Mobile01因爲台灣太美，恰比兔子落腳台東，煙燻旗魚披薩，向海洋致敬 | 上下游新路線！台版「小吳哥窟祕境」～隆隆山腰古厝群 (新北市貢寮區) by Tony的遊記 - 旅聯網 ","version":null,"tagName":"h3"},{"title":"Surf 03.16~ 03.31","type":0,"sectionRef":"#","url":"/news/2024/03/31/_Surfing/","content":"","keywords":"","version":null},{"title":"IT News​","type":1,"pageTitle":"Surf 03.16~ 03.31","url":"/news/2024/03/31/_Surfing/#it-news","content":" 微軟開源多雲容器網路觀測平臺Retina | iThomeJetBrains發布CI/CD新工具TeamCity Pipelines，具多項智慧功能簡化工作管線配置 | iThome查詢 GitHub 上面 repository 的公開記錄 – Gea-Suan Lin's BLOGRedis 改變授權，變成非開源軟體 – Gea-Suan Lin's BLOG Redis Adopts Dual Source-Available Licensing | Redis Confluent Tableflow可將Kafka串流資料轉為Iceberg表格最佳化分析流程 | iThome  ","version":null,"tagName":"h3"},{"title":"Tech​","type":1,"pageTitle":"Surf 03.16~ 03.31","url":"/news/2024/03/31/_Surfing/#tech","content":" GitHub - ynqa/jnv: interactive JSON filter using jq Show HN: jnv: interactive JSON filter using jq | Hacker News Google 的 HyperLogLog++ – Gea-Suan Lin's BLOGDuckDB as the New jq - Paul Gross’s BlogScrewtape / sqlite-schema-diagram · GitLab  ","version":null,"tagName":"h3"},{"title":"Life​","type":1,"pageTitle":"Surf 03.16~ 03.31","url":"/news/2024/03/31/_Surfing/#life","content":" 25，回歸原點的 Weekly Review - Code and Me德奧捷聖誕旅行8日遊-Day 3 &amp; 4 - 布拉格聖誕市集&amp;飯店@Hotel NH Prague City - Mobile01免考照也能在中國自駕｜台灣人換取臨時駕照＆上路心得分享！ - Mobile01「只有 Anne Hathaway 能演活角色！」：愛情電影《The Idea of You》首波影評出爐，爛番茄獲 100% 好評 - A Day Magazine ","version":null,"tagName":"h3"},{"title":"Surf 04.01~ 04.30","type":0,"sectionRef":"#","url":"/news/2024/04/30/_Surfing/","content":"","keywords":"","version":null},{"title":"IT News​","type":1,"pageTitle":"Surf 04.01~ 04.30","url":"/news/2024/04/30/_Surfing/#it-news","content":" 更激進的考慮使用者會混淆的問題 – Gea-Suan Lin's BLOG  ","version":null,"tagName":"h3"},{"title":"Tech​","type":1,"pageTitle":"Surf 04.01~ 04.30","url":"/news/2024/04/30/_Surfing/#tech","content":" Docker Desktop 殺手 - OrbStack 教學 - Jimmy 的架站筆記 OrbStack - 0 配置，在 Mac 上快速运行 Docker 容器和 Linux 虚拟机 - 小众软件用了Orbstack你就再也不想用Docker Desktop了 | Mac用户的福音 - YouTube同事轉貼的連結, 初步感覺不賴, 已替代 Docker Desktop 了. 但仍限制非商業使用, 公司電腦似乎還是只能走 Podman... JSON Type Definition : O3noBLOG淺談 Prompt 自動最佳化工具 – ihower  ","version":null,"tagName":"h3"},{"title":"Life​","type":1,"pageTitle":"Surf 04.01~ 04.30","url":"/news/2024/04/30/_Surfing/#life","content":" 下雨天才會通的網路 – Gea-Suan Lin's BLOG上班時想稍微偷閒一下嗎？試試這以假亂真的「系統更新畫面」Fake Update | 就是教不落 - 給你最豐富的 3C 資訊、教學網站Simon Tatham 的遊戲庫 – Gea-Suan Lin's BLOG28，去了 2 個月圖書館之後 - Code and Me執行優先於整理，不要憑空設計系統：以我的防彈筆記法實踐為例 ","version":null,"tagName":"h3"},{"title":"Surf 03.01~ 03.15","type":0,"sectionRef":"#","url":"/news/2024/03/15/_Surfing/","content":"","keywords":"","version":null},{"title":"IT News​","type":1,"pageTitle":"Surf 03.01~ 03.15","url":"/news/2024/03/15/_Surfing/#it-news","content":" Over 100,000 Infected Repos Found on GitHub 目前這份工作以後, 對相關事件會多投入一點關心. 算是種成長? 實踐FinOps必須先讓工程師有感 | iThome整合OT與IT打造數據平臺，北捷用數據管理提升乘車體驗 | iThome開啟 Google One 暗網報告，快速掃描你的個資有沒有在暗網中流出過 | 就是教不落 - 給你最豐富的 3C 資訊、教學網站  ","version":null,"tagName":"h3"},{"title":"Tech​","type":1,"pageTitle":"Surf 03.01~ 03.15","url":"/news/2024/03/15/_Surfing/#tech","content":" 用 Brave 的 brave://flags 設定 – Gea-Suan Lin's BLOG使用Semantic Kernel 建立自然語言請假系統Obs154｜Obsidian交互式表格！超強表格控制：視覺美化、分頁、排序、過濾、搜尋 – 簡睿隨筆透過VS Code將已壓縮的陣列格式還原成樹狀結構 | 梅問題．教學網  ","version":null,"tagName":"h3"},{"title":"Life​","type":1,"pageTitle":"Surf 03.01~ 03.15","url":"/news/2024/03/15/_Surfing/#life","content":" 歡迎來到布達佩斯：掀開華麗的面紗，跟著匈牙利人面對自己的「黑歷史」｜劉政暉／Nuevaidee．新點子｜換日線如何為筆記命名，建立搜尋規則？我的標題、分類、標籤命名法「什麼都很酷」的 90 年代回來了？倫敦 vs. 曼徹斯特，誰更能詮釋懷舊風華？｜冼翰宇／地下倫敦呼喚｜換日線金柑美食地圖35家》顛覆你對金柑想像！金柑可麗露清新甜美，金柑蜂蜜咖啡香氣十足 | 上下游２０２４.０２ ▲七彩湖▲六順山 ▲百里長征 ～～ - Mobile01Arc 瀏覽器 windows 版測試心得，用四大介面改造升級專注工作流Obs155｜程設師的編程好友：CodeBlock Customizer／Code Styler、Codeblock Tabs、Keyshots – 簡睿隨筆【工作音樂推薦】DevTunes FM：讓你在工作時更專注的線上收音機 - 免費資源網路社群台北内湖的「茗穀屋」烘培屋：離市區20 分鐘車程，藏在山林裡，超適合來半日遊 - A Day Magazine最近挑戰了網友熱推的「幸福清單」，感覺離理想生活又近了一步 - A Day Magazine杜拜奇幻沙漠和阿布達比文化之旅 7日自駕遊-Day 2。杜拜豪華沙漠渡假村Al Maha, a Luxury Collection Desert Resort &amp; Spa - Mobile01 ","version":null,"tagName":"h3"},{"title":"Surf 02.15~ 02.29","type":0,"sectionRef":"#","url":"/news/2024/02/29/_Surfing/","content":"","keywords":"","version":null},{"title":"IT News​","type":1,"pageTitle":"Surf 02.15~ 02.29","url":"/news/2024/02/29/_Surfing/#it-news","content":" Google開源內部所使用的檔案辨識系統Magika | iThome Magika: AI powered fast and efficient file type identification | Google Open Source Blog uv：用 Rust 寫的 Python Packaging 替代方案 – Gea-Suan Lin's BLOGGo 的 net/http 在 1.22 的 routing 新功能 – Gea-Suan Lin's BLOG一鍵自動將手繪流程圖轉為動畫影片，免費工具製作生動解說影片一份君子協議的robots.txt維持了網際網路30年來的秩序，但AI的出現破壞了這種信任和平衡 | T客邦Rust開發者擔心語言越變越難，甚至有20%受訪者希望放慢新功能開發速度 | iThome 資訊圈少見的消息, 另一種反璞歸真? 打造雲原生應用開發軍火庫，紅帽推出企業級內部開發平臺 | iThomePages CMS: The No-Hassle CMS for GitHub  ","version":null,"tagName":"h3"},{"title":"Tech​","type":1,"pageTitle":"Surf 02.15~ 02.29","url":"/news/2024/02/29/_Surfing/#tech","content":" Popular git config options關於 GitLab 的 SQL 設計 – Gea-Suan Lin's BLOG My Notes on GitLab Postgres Schema Design – Shekhar Gulati Translating OpenStreetMap data to HTML5 Canvas with Rust and WebAssembly | Programming | mary.codesARCHITECTURE.md rust-analyzer/docs/dev/architecture.md at d7c99931d05e3723d878bea5dc26766791fa4e69 · rust-lang/rust-analyzer · GitHub  ","version":null,"tagName":"h3"},{"title":"Life​","type":1,"pageTitle":"Surf 02.15~ 02.29","url":"/news/2024/02/29/_Surfing/#life","content":" 阿富汗文件讀書心得 - richliu's blogUP學：所有經理人相見恨晚的一本書筆記 - richliu's blog後悔沒有早點開始！去年我實行了這 6 個習慣，生活品質完全大改善 - A Day Magazine威注音輸入法：Mac 上最值得使用的免費第三方輸入法 - 免費資源網路社群 ","version":null,"tagName":"h3"},{"title":"Surf 05.01~ 05.31","type":0,"sectionRef":"#","url":"/news/2024/05/31/_Surfing/","content":"","keywords":"","version":null},{"title":"IT News​","type":1,"pageTitle":"Surf 05.01~ 05.31","url":"/news/2024/05/31/_Surfing/#it-news","content":"   ","version":null,"tagName":"h3"},{"title":"Tech​","type":1,"pageTitle":"Surf 05.01~ 05.31","url":"/news/2024/05/31/_Surfing/#tech","content":"   ","version":null,"tagName":"h3"},{"title":"Life​","type":1,"pageTitle":"Surf 05.01~ 05.31","url":"/news/2024/05/31/_Surfing/#life","content":" 5 月綜所稅申報開跑！信用卡、行動支付和超商繳稅回饋全攻略 | T客邦 ","version":null,"tagName":"h3"},{"title":"Awesome Resources","type":0,"sectionRef":"#","url":"/news/awesome/","content":"","keywords":"","version":null},{"title":"news & discus​","type":1,"pageTitle":"Awesome Resources","url":"/news/awesome/#news--discus","content":" Hacker NewsDEV Community 👩‍💻👨‍💻IT人MdEditor ","version":null,"tagName":"h2"},{"title":"Cleopatra’s Spring 克利奧帕特拉泉水","type":0,"sectionRef":"#","url":"/backpacker/2401 Egypt/Egypt/Cleopatra’s Spring 克利奧帕特拉泉水/","content":"","keywords":"","version":"Next"},{"title":"See Also​","type":1,"pageTitle":"Cleopatra’s Spring 克利奧帕特拉泉水","url":"/backpacker/2401 Egypt/Egypt/Cleopatra’s Spring 克利奧帕特拉泉水/#see-also","content":"","version":"Next","tagName":"h2"},{"title":"Abdu Resturant","type":0,"sectionRef":"#","url":"/backpacker/2401 Egypt/Egypt/Abdu Resturant/","content":"","keywords":"","version":"Next"},{"title":"See Also​","type":1,"pageTitle":"Abdu Resturant","url":"/backpacker/2401 Egypt/Egypt/Abdu Resturant/#see-also","content":"","version":"Next","tagName":"h2"},{"title":"Ageeba Beach","type":0,"sectionRef":"#","url":"/backpacker/2401 Egypt/Egypt/Ageeba Beach/","content":"","keywords":"","version":"Next"},{"title":"See Also​","type":1,"pageTitle":"Ageeba Beach","url":"/backpacker/2401 Egypt/Egypt/Ageeba Beach/#see-also","content":"","version":"Next","tagName":"h2"},{"title":"Muhra","type":0,"sectionRef":"#","url":"/backpacker/2401 Egypt/Egypt/Muhra/","content":"","keywords":"","version":"Next"},{"title":"See Also​","type":1,"pageTitle":"Muhra","url":"/backpacker/2401 Egypt/Egypt/Muhra/#see-also","content":"","version":"Next","tagName":"h2"},{"title":"Shali Fortress 堡壘遺跡","type":0,"sectionRef":"#","url":"/backpacker/2401 Egypt/Egypt/Shali Fortress 堡壘遺跡/","content":"","keywords":"","version":"Next"},{"title":"See Also​","type":1,"pageTitle":"Shali Fortress 堡壘遺跡","url":"/backpacker/2401 Egypt/Egypt/Shali Fortress 堡壘遺跡/#see-also","content":"","version":"Next","tagName":"h2"},{"title":"丹德拉神殿 Dendera Temple of Hathor","type":0,"sectionRef":"#","url":"/backpacker/2401 Egypt/Egypt/丹德拉神殿 Dendera Temple of Hathor/","content":"","keywords":"","version":"Next"},{"title":"See Also​","type":1,"pageTitle":"丹德拉神殿 Dendera Temple of Hathor","url":"/backpacker/2401 Egypt/Egypt/丹德拉神殿 Dendera Temple of Hathor/#see-also","content":" 埃及-丹德拉的哈索尔神庙：色彩鲜艳壁画：满天星相神奇旅程+“电灯泡”浮雕【400幅图】 - 知乎 ","version":"Next","tagName":"h2"},{"title":"加拉洞穴 Djara Cave","type":0,"sectionRef":"#","url":"/backpacker/2401 Egypt/Egypt/加拉洞穴 Djara Cave/","content":"","keywords":"","version":"Next"},{"title":"See Also​","type":1,"pageTitle":"加拉洞穴 Djara Cave","url":"/backpacker/2401 Egypt/Egypt/加拉洞穴 Djara Cave/#see-also","content":"","version":"Next","tagName":"h2"},{"title":"卡納克神廟 Karnak Temple Complex","type":0,"sectionRef":"#","url":"/backpacker/2401 Egypt/Egypt/卡納克神廟 Karnak Temple Complex/","content":"","keywords":"","version":"Next"},{"title":"See Also​","type":1,"pageTitle":"卡納克神廟 Karnak Temple Complex","url":"/backpacker/2401 Egypt/Egypt/卡納克神廟 Karnak Temple Complex/#see-also","content":"","version":"Next","tagName":"h2"},{"title":"努比亞村","type":0,"sectionRef":"#","url":"/backpacker/2401 Egypt/Egypt/努比亞村/","content":"","keywords":"","version":"Next"},{"title":"See Also​","type":1,"pageTitle":"努比亞村","url":"/backpacker/2401 Egypt/Egypt/努比亞村/#see-also","content":"","version":"Next","tagName":"h2"},{"title":"吉薩金字塔群 Giza Necropolis","type":0,"sectionRef":"#","url":"/backpacker/2401 Egypt/Egypt/吉薩金字塔群 Giza Necropolis/","content":"吉薩金字塔群 Giza Necropolis 吉薩金字塔群（阿拉伯語：أهرام الجيزة）是指一片埃及吉薩的陵墓群，於1979年登入聯合國教科文組織世界遺產，於2007年7月7日獲選為世界新七大奇蹟中的榮譽奇蹟。陵墓群建於埃及第四王朝，主要由三個金字塔組成，而當中最大的是古夫金字塔（又稱「大金字塔」），同時也是古代世界七大奇蹟中最古老及唯一尚存的建築物，現在旁邊還設立了太陽船博物館；次大的是卡夫拉金字塔；最小的是孟卡拉金字塔。此外，在這三個主要金字塔旁有著名的獅身人面像和3座屬於皇后的小型金字塔。吉薩金字塔群是聯合國教科文組織世界遺產孟菲斯及其墓地金字塔的一部分","keywords":"","version":"Next"},{"title":"哈利利市场 Khan el-Khalili","type":0,"sectionRef":"#","url":"/backpacker/2401 Egypt/Egypt/哈利利市场 Khan el-Khalili/","content":"","keywords":"","version":"Next"},{"title":"See Also​","type":1,"pageTitle":"哈利利市场 Khan el-Khalili","url":"/backpacker/2401 Egypt/Egypt/哈利利市场 Khan el-Khalili/#see-also","content":" 「比人還愜意的是貓」──走訪埃及哈利利市集｜Peggie／讀者投書｜換日線在中东最大集市，吸一口千年古国的烟火气~ ","version":"Next","tagName":"h2"},{"title":"哈布城 Medinet Habu","type":0,"sectionRef":"#","url":"/backpacker/2401 Egypt/Egypt/哈布城 Medinet Habu/","content":"","keywords":"","version":"Next"},{"title":"See Also​","type":1,"pageTitle":"哈布城 Medinet Habu","url":"/backpacker/2401 Egypt/Egypt/哈布城 Medinet Habu/#see-also","content":"","version":"Next","tagName":"h2"},{"title":"哈特謝普蘇特神廟 Mortuary temple of Hatshepsut","type":0,"sectionRef":"#","url":"/backpacker/2401 Egypt/Egypt/哈特謝普蘇特神廟 Mortuary temple of Hatshepsut/","content":"","keywords":"","version":"Next"},{"title":"See Also​","type":1,"pageTitle":"哈特謝普蘇特神廟 Mortuary temple of Hatshepsut","url":"/backpacker/2401 Egypt/Egypt/哈特謝普蘇特神廟 Mortuary temple of Hatshepsut/#see-also","content":"","version":"Next","tagName":"h2"},{"title":"埃及博物館 The Egyptian Museum","type":0,"sectionRef":"#","url":"/backpacker/2401 Egypt/Egypt/埃及博物館 The Egyptian Museum/","content":"埃及博物館 The Egyptian Museum 埃及博物館（Egyptian Museum）又稱埃及國家博物館，是一座位於埃及首都開羅的古埃及歷史博物館。收藏了120,000件古埃及古物，其中最具代表性的展品於館舍展出，其餘的則在儲藏室中。這座建築物由意大利建築公司Garozzo-Zaffarani於1901年建造，由法國建築師馬塞爾·多爾格隆設計，成為埃及最大的博物館之一。截至2019年3月，博物館對公眾開放。2022年，該博物館將被位於被吉薩的新大埃及博物館取代。","keywords":"","version":"Next"},{"title":"死人城","type":0,"sectionRef":"#","url":"/backpacker/2401 Egypt/Egypt/死人城/","content":"死人城","keywords":"","version":"Next"},{"title":"帝王谷 Valley of the Kings","type":0,"sectionRef":"#","url":"/backpacker/2401 Egypt/Egypt/帝王谷 Valley of the Kings/","content":"","keywords":"","version":"Next"},{"title":"See Also​","type":1,"pageTitle":"帝王谷 Valley of the Kings","url":"/backpacker/2401 Egypt/Egypt/帝王谷 Valley of the Kings/#see-also","content":"","version":"Next","tagName":"h2"},{"title":"尼羅河","type":0,"sectionRef":"#","url":"/backpacker/2401 Egypt/Egypt/尼羅河/","content":"尼羅河","keywords":"","version":"Next"},{"title":"人面獅身像 Great Sphinx of Giza","type":0,"sectionRef":"#","url":"/backpacker/2401 Egypt/Egypt/狮身人面像 Great Sphinx of Giza/","content":"人面獅身像 Great Sphinx of Giza 獅身人面像 （阿拉伯語：أبو الهول，英語：Great Sphinx of Giza）或稱人面獅身像，是一座位於在卡夫拉金字塔旁的雕像，外型是一個獅子的身軀和人的頭。獅身人面像長約73.5公尺（241英尺），寬約19.3公尺（63英尺），高約20.22公尺（66.34英尺）。獅身人面像是現今已知最古老的紀念雕像，一般相信是在法老卡夫拉統治期內（約公元前2558年至2532年）建成。","keywords":"","version":"Next"},{"title":"盧客索神廟 Luxor Temple","type":0,"sectionRef":"#","url":"/backpacker/2401 Egypt/Egypt/盧客索神廟 Luxor Temple/","content":"","keywords":"","version":"Next"},{"title":"See Also​","type":1,"pageTitle":"盧客索神廟 Luxor Temple","url":"/backpacker/2401 Egypt/Egypt/盧客索神廟 Luxor Temple/#see-also","content":"","version":"Next","tagName":"h2"},{"title":"卡納克神廟 Karnak Temple Complex","type":0,"sectionRef":"#","url":"/backpacker/2401 Egypt/Egypt/荷魯斯神廟/","content":"","keywords":"","version":"Next"},{"title":"See Also​","type":1,"pageTitle":"卡納克神廟 Karnak Temple Complex","url":"/backpacker/2401 Egypt/Egypt/荷魯斯神廟/#see-also","content":"","version":"Next","tagName":"h2"},{"title":"菲萊神廟 Philae Temple","type":0,"sectionRef":"#","url":"/backpacker/2401 Egypt/Egypt/菲萊神廟 Philae Temple/","content":"","keywords":"","version":"Next"},{"title":"See Also​","type":1,"pageTitle":"菲萊神廟 Philae Temple","url":"/backpacker/2401 Egypt/Egypt/菲萊神廟 Philae Temple/#see-also","content":"","version":"Next","tagName":"h2"},{"title":"洞穴教堂 Mokattam Cave Church","type":0,"sectionRef":"#","url":"/backpacker/2401 Egypt/Egypt/洞穴教堂 Mokattam Cave Church/","content":"","keywords":"","version":"Next"},{"title":"See Also​","type":1,"pageTitle":"洞穴教堂 Mokattam Cave Church","url":"/backpacker/2401 Egypt/Egypt/洞穴教堂 Mokattam Cave Church/#see-also","content":" 垃圾山變洞穴教會：埃及開羅基督徒萬人教會 – 🇮🇱以色列美角Zabbaleen - Wikipedia ","version":"Next","tagName":"h2"},{"title":"白沙灘 White Desert","type":0,"sectionRef":"#","url":"/backpacker/2401 Egypt/Egypt/白沙灘 White Desert/","content":"","keywords":"","version":"Next"},{"title":"See Also​","type":1,"pageTitle":"白沙灘 White Desert","url":"/backpacker/2401 Egypt/Egypt/白沙灘 White Desert/#see-also","content":"","version":"Next","tagName":"h2"},{"title":"薩拉丁城堡 Mohamed Ali mosque","type":0,"sectionRef":"#","url":"/backpacker/2401 Egypt/Egypt/薩拉丁城堡 Mohamed Ali mosque/","content":"","keywords":"","version":"Next"},{"title":"See Also​","type":1,"pageTitle":"薩拉丁城堡 Mohamed Ali mosque","url":"/backpacker/2401 Egypt/Egypt/薩拉丁城堡 Mohamed Ali mosque/#see-also","content":"","version":"Next","tagName":"h2"},{"title":"錫瓦 Siwa","type":0,"sectionRef":"#","url":"/backpacker/2401 Egypt/Egypt/錫瓦 Siwa/","content":"","keywords":"","version":"Next"},{"title":"See Also​","type":1,"pageTitle":"錫瓦 Siwa","url":"/backpacker/2401 Egypt/Egypt/錫瓦 Siwa/#see-also","content":" 【埃及 Egypt】錫瓦綠洲 Siwa Oasia旅遊：與世隔絕的沙漠古城 – 把世界當教室埃及旅遊｜錫瓦綠洲 Siwa Oasis，撒哈拉沙漠與大沙海一日遊 - 俏鬍子旅行團 / Traveling Moustache埃及沙漠里的錫瓦綠洲 人人可以浮起來的的網紅鹽池 | 埃及 | 錫瓦綠洲 | 沙漠 | 鹽池 | 觀光景點 | 希望之聲 ","version":"Next","tagName":"h2"},{"title":"馬特魯 Matrouh","type":0,"sectionRef":"#","url":"/backpacker/2401 Egypt/Egypt/馬特魯 Matrouh/","content":"","keywords":"","version":"Next"},{"title":"See Also​","type":1,"pageTitle":"馬特魯 Matrouh","url":"/backpacker/2401 Egypt/Egypt/馬特魯 Matrouh/#see-also","content":" 埃及海灘聖地丨碧海、藍天、白雲—馬特魯 - 每日頭條 ","version":"Next","tagName":"h2"},{"title":"階梯金字塔","type":0,"sectionRef":"#","url":"/backpacker/2401 Egypt/Egypt/階梯金字塔/","content":"階梯金字塔","keywords":"","version":"Next"},{"title":"鹽湖","type":0,"sectionRef":"#","url":"/backpacker/2401 Egypt/Egypt/鹽湖/","content":"","keywords":"","version":"Next"},{"title":"See Also​","type":1,"pageTitle":"鹽湖","url":"/backpacker/2401 Egypt/Egypt/鹽湖/#see-also","content":"","version":"Next","tagName":"h2"},{"title":"黑沙漠 Black Desert","type":0,"sectionRef":"#","url":"/backpacker/2401 Egypt/Egypt/黑沙漠 Black Desert/","content":"","keywords":"","version":"Next"},{"title":"See Also​","type":1,"pageTitle":"黑沙漠 Black Desert","url":"/backpacker/2401 Egypt/Egypt/黑沙漠 Black Desert/#see-also","content":"","version":"Next","tagName":"h2"},{"title":"新峰肉骨茶","type":0,"sectionRef":"#","url":"/backpacker/2401 Egypt/Kuala Lumpur/新峰肉骨茶/","content":"","keywords":"","version":"Next"},{"title":"See Also​","type":1,"pageTitle":"新峰肉骨茶","url":"/backpacker/2401 Egypt/Kuala Lumpur/新峰肉骨茶/#see-also","content":"","version":"Next","tagName":"h2"},{"title":"2024.01.23 ~ 02.03 法 老 埃及","type":0,"sectionRef":"#","url":"/backpacker/2401 Egypt/Index Pharaoh Egypt/","content":"","keywords":"","version":"Next"},{"title":"schedule / 行程記錄​","type":1,"pageTitle":"2024.01.23 ~ 02.03 法 老 埃及","url":"/backpacker/2401 Egypt/Index Pharaoh Egypt/#schedule--行程記錄","content":" 01.23 TPE &gt; KRI &gt; KUL01.24 KUL &gt; CAI01.24 埃及國家博物館,01.25 吉薩金字塔群, 人面獅身像, 洞穴教堂, 哈利利市場01.26 黑白沙漠: 黑沙漠, 水晶山, 白沙漠露營01.27 黑白沙漠: 白沙漠, Djara Cave01.28 開羅 &gt; 錫瓦01.29 錫瓦: 鹽湖, 埃及艷后溫泉, ...01.30 錫瓦 &gt; 馬特魯 &gt; 開羅02.03 CAI &gt; KUL02.06 KUL &gt; TPE  id: egypt-2401 height: 500px lat: 27.50000 long: 29.50000 minZoom: 5 maxZoom: 15 defaultZoom: 6 unit: meters scale: 1 darkMode: true markerFolder: backpacker/2401_egypt/egypt   id: kl-2401 height: 500px lat: 3.15000 long: 101.67000 minZoom: 11 maxZoom: 17 defaultZoom: 13 unit: meters scale: 1 darkMode: true markerFolder: backpacker/2401_egypt/kuala_lumpur   ","version":"Next","tagName":"h3"},{"title":"note / 雜記小文​","type":1,"pageTitle":"2024.01.23 ~ 02.03 法 老 埃及","url":"/backpacker/2401 Egypt/Index Pharaoh Egypt/#note--雜記小文","content":"","version":"Next","tagName":"h3"},{"title":"源昌隆","type":0,"sectionRef":"#","url":"/backpacker/2401 Egypt/Kuala Lumpur/源昌隆/","content":"","keywords":"","version":"Next"},{"title":"See Also​","type":1,"pageTitle":"源昌隆","url":"/backpacker/2401 Egypt/Kuala Lumpur/源昌隆/#see-also","content":"","version":"Next","tagName":"h2"},{"title":"黑白沙漠","type":0,"sectionRef":"#","url":"/backpacker/2401 Egypt/Egypt/黑白沙漠/","content":"","keywords":"","version":"Next"},{"title":"See Also​","type":1,"pageTitle":"黑白沙漠","url":"/backpacker/2401 Egypt/Egypt/黑白沙漠/#see-also","content":" 埃及黑白沙漠，原来沙漠不只有沙子 - 知乎埃及有个地方外星球样的存在——黑白沙漠埃及｜黑白沙漠裡的一千零一夜 - JAZKO ","version":"Next","tagName":"h2"},{"title":"鬼仔巷","type":0,"sectionRef":"#","url":"/backpacker/2401 Egypt/Kuala Lumpur/鬼仔巷/","content":"","keywords":"","version":"Next"},{"title":"See Also​","type":1,"pageTitle":"鬼仔巷","url":"/backpacker/2401 Egypt/Kuala Lumpur/鬼仔巷/#see-also","content":"","version":"Next","tagName":"h2"},{"title":"茨廠街","type":0,"sectionRef":"#","url":"/backpacker/2401 Egypt/Kuala Lumpur/茨廠街/","content":"","keywords":"","version":"Next"},{"title":"See Also​","type":1,"pageTitle":"茨廠街","url":"/backpacker/2401 Egypt/Kuala Lumpur/茨廠街/#see-also","content":"","version":"Next","tagName":"h2"},{"title":"黃亞華小吃","type":0,"sectionRef":"#","url":"/backpacker/2401 Egypt/Kuala Lumpur/黃亞華小吃/","content":"","keywords":"","version":"Next"},{"title":"See Also​","type":1,"pageTitle":"黃亞華小吃","url":"/backpacker/2401 Egypt/Kuala Lumpur/黃亞華小吃/#see-also","content":"","version":"Next","tagName":"h2"},{"title":"一輩子的養份，感謝文先行","type":0,"sectionRef":"#","url":"/backpacker/Around World/after-india/","content":"一輩子的養份，感謝文先行 一趟旅程，相當重要的體驗，走訪三個相當想去的國家，增進許多歷練。 感謝老天讓我們有機會相遇、同行！感謝大家豐富我的冒險、旅途！ 花吃海賊團的雲生、Yoshiko、wisley、joey 在新加坡機場遇到的鄰居，讓我佩服獨自前往印度冒險的小女生 Elaine. 瓦納納西旅舍中認識，姊弟三人相約在印度旅遊 Leona, Zachary, Owen. 在尼泊爾組織 NGO 的 林念慈 Annapurna 同行的 Luana, Christine, Kate. Mirissa 兩天奇遇的室友, kuah. 以及所有在台灣的親友，有你們的支持，才能如此探險。 遊記陸續登場：印度 | 尼泊爾 | 安娜普納 | 斯里蘭卡 旅行，說穿了，就是把一堆問號變成其他符號的過程。 可以是逗號，一張預約再見的門票； 可以是句號，一篇無需再提的退件； 可以是驚嘆號，一段令人驚艷的回憶； 可以是刪節號，一場難以言論的經歷。 人生，或許也僅是相同過程吧～ ~ 2013.01.23 自由日, 攝於梅堡~","keywords":"","version":"Next"},{"title":"牛在囧途","type":0,"sectionRef":"#","url":"/backpacker/Around World/index_orz/","content":"牛在囧途 旅行中，班機因天候或其他因素誤點，也算屢見不鮮。 第一次出國去歐洲，回程在香港轉機，遇上班機檢修誤點兩個小時。 因是航空公司問題，又碰上用餐時間，華航給了餐券在香港機場消費使用。 也因已要回國，多了兩個小時可在香港機場晃晃，反而有些小小雀躍～ 此後，我搭機過程，就此相當不順利。想想，集結都可以出書了～ 2018 Iceland, 現在是二月喔2017 Euro, 因為你不是 MooCow2013 SriLanka, 遙遠的斯里蘭卡轉機2013 India, 烏代浦爾機場炸彈客事件2013 Singapore, 也是旅行的一部分2012 Japan, 大雨無法降落，原機折返 / 番外篇2011 France, 行李過重, again...2011 Sabah, 護照過期！2011 Thailand, 班機停飛2010 Italy, 行李過重！","keywords":"","version":"Next"},{"title":"trip by AirAsia 2011","type":0,"sectionRef":"#","url":"/backpacker/Around World/with-airasia/","content":"trip by AirAsia 2011 算了算 2011 年共去了四個國家，共 11 趟航班。 台灣 -&gt; 曼谷 -&gt; 清邁 -&gt; 曼谷 -&gt; 台灣台灣 -&gt; 北海道 -&gt; 台灣台灣 -&gt; 沙巴 -&gt; 吉隆坡 -&gt; 巴黎 -&gt; 吉隆坡 -&gt; 台灣 當中，除了北海道行是選擇華航精緻旅遊自由行之外，其餘都是搭乘亞航 AirAsia。 義大利行之後，對往來歐陸間的廉價航空大感興趣，一查才知道台灣也有亞航可供選擇。 第一次搶廉價航空票，和雨軒兩人討論後，決定先去沙巴三天三夜玩玩。 記得沙巴的票價來回花不到三千五，簡直和飛澎湖一樣。 之後又一次的 BigSale 中，我買了飛曼谷的機票，來回四千出頭吧，相當便宜！後來亞航曼谷航線停飛，原訂六月的泰國行提前至二月底，第二次搶的票成為第一次背包旅行。 出發前查了許多資料，對於曼谷比較興致缺缺，倒對清邁相當感興趣。 前往清邁有許多方式，許多背包客會選擇跨夜的長途巴士，約需 12 小時，印象中單程約 800 泰幣吧。 我等亞航的特價時買了曼谷清邁的國內線，單程不到 1000 泰幣，僅需一個多小時飛航時間，很划算的選擇。 廉價航空普遍有航班時段不佳的情形，亞航抵曼谷時已經晚上九點了，需在曼谷多待一夜。本也考慮不如曼谷待三天兩夜後再往清邁跑。 多虧朋友剛好也在曼谷玩，下榻房間有空床可借住一晚，我就未在曼谷另找住宿停留，隔日一早搭了捷運前往機場繼續往清邁飛。 台灣到清邁直航的航班不多，票價也高。亞航飛曼谷這段航班令人相當懷念，現在無法找到這樣價位了。 五月初是和雨軒一起搶票的沙巴行程。後來潔絲米他們約一起去法國，比對一下雙方行程時間，我剛好可以從馬來西亞飛法國會合，完美的巧合！ 當時亞航還有飛倫敦、巴黎等歐洲航線，我放棄沙巴回台灣的票，改由沙巴飛吉隆坡，再由吉隆坡轉巴黎。 馬來西亞不愧是亞航大總部，沙巴機場和吉隆坡廉價航空機場 (LCCT) 都幾乎是亞航的專用機場。 買亞航機票時可順便加買 SkyBus 機場到市區的接送巴士，單程約一小時，印象中票價約 120 台幣吧。 LCCT 離市區有些距離，轉機時間久的話，加買這一段行程到市區走走很划算。 SkyBus 在中央車站 (KL SENTRAL) 下車，這裡有到市區等地方的捷運路線，還看到 AirAsia 的辦公室。 我把背包放在這裡的置物櫃後搭了捷運到市區鬼混了。 亞航在我 2011 年的旅程中扮演相當重要的角色。 相對在歐洲曾搭過的 Wizz/EZJet 來說，AirAsia 的服務態度好很多了。 只是確實很常誤點，也很常出現小疏失。 我從法國回吉隆坡時，餐點就被漏掉了，害我在機上跟機組人員據理力爭了好段時間。 亞航的餐點不貴，但不好吃！吃飽喝足後，偷帶些麵包上機吧～ 最近亞航的票價越來越沒競爭力，台灣開放的廉價航空越來越多了； 下回出遊不見得會選亞航，但仍感謝亞航帶給我這精采的 2011 年旅途。","keywords":"","version":"Next"},{"title":"冰島好好吃","type":0,"sectionRef":"#","url":"/backpacker/aurora/cuisine_index/","content":"","keywords":"","version":"Next"},{"title":"Kaffi Duus, Reykjanesbær​","type":1,"pageTitle":"冰島好好吃","url":"/backpacker/aurora/cuisine_index/#kaffi-duus-reykjanesbær","content":" Google Maps | TripAdvisor | Facebook  ","version":"Next","tagName":"h3"},{"title":"Restaurant Sudur Vik, Vik​","type":1,"pageTitle":"冰島好好吃","url":"/backpacker/aurora/cuisine_index/#restaurant-sudur-vik-vik","content":" Google Maps | TripAdvisor | Facebook  ","version":"Next","tagName":"h3"},{"title":"Humarhöfnin Veitingahús, Hofn​","type":1,"pageTitle":"冰島好好吃","url":"/backpacker/aurora/cuisine_index/#humarhöfnin-veitingahús-hofn","content":" Google Maps | TripAdvisor | Facebook  ","version":"Next","tagName":"h3"},{"title":"Systrakaffi, Kirkjubæjarklaustur​","type":1,"pageTitle":"冰島好好吃","url":"/backpacker/aurora/cuisine_index/#systrakaffi-kirkjubæjarklaustur","content":" Google Maps | TripAdvisor | Facebook  ","version":"Next","tagName":"h3"},{"title":"Tryggvaskáli, Selfoss​","type":1,"pageTitle":"冰島好好吃","url":"/backpacker/aurora/cuisine_index/#tryggvaskáli-selfoss","content":" Google Maps | TripAdvisor | Facebook  ","version":"Next","tagName":"h3"},{"title":"Grillmarkaðurinn, Reykjavík​","type":1,"pageTitle":"冰島好好吃","url":"/backpacker/aurora/cuisine_index/#grillmarkaðurinn-reykjavík","content":" Google Maps | TripAdvisor | Facebook ","version":"Next","tagName":"h3"},{"title":"index","type":0,"sectionRef":"#","url":"/backpacker/baikal/","content":"index","keywords":"","version":"Next"},{"title":"Day by day","type":0,"sectionRef":"#","url":"/backpacker/2401 Egypt/Schedule/","content":"","keywords":"","version":"Next"},{"title":"MEMO​","type":1,"pageTitle":"Day by day","url":"/backpacker/2401 Egypt/Schedule/#memo","content":"    ","version":"Next","tagName":"h2"},{"title":"01/23 TPE > KUL > CAI​","type":1,"pageTitle":"Day by day","url":"/backpacker/2401 Egypt/Schedule/#0123-tpe--kul--cai","content":"  14:20 TPE &gt; KUL 02:25 KUL &gt; CAI   ","version":"Next","tagName":"h2"},{"title":"01/24 CAI​","type":1,"pageTitle":"Day by day","url":"/backpacker/2401 Egypt/Schedule/#0124-cai","content":"  🌤 1 月 19° / 10° 2 月 21° / 11° 埃及博物館 The Egyptian Museum 薩拉丁城堡 Mohamed Ali mosque   ","version":"Next","tagName":"h2"},{"title":"01/25 開鑼​","type":1,"pageTitle":"Day by day","url":"/backpacker/2401 Egypt/Schedule/#0125-開鑼","content":"  吉薩金字塔群 Giza Necropolis 狮身人面像 Great Sphinx of Giza 洞穴教堂 Mokattam Cave Church 哈利利市场 Khan el-Khalili   ","version":"Next","tagName":"h2"},{"title":"01/26 開羅 > 黑白沙漠​","type":1,"pageTitle":"Day by day","url":"/backpacker/2401 Egypt/Schedule/#0126-開羅--黑白沙漠","content":"  黑白沙漠 黑沙漠 Black Desert   ","version":"Next","tagName":"h2"},{"title":"01/27 黑白沙漠 > 開羅​","type":1,"pageTitle":"Day by day","url":"/backpacker/2401 Egypt/Schedule/#0127-黑白沙漠--開羅","content":"  白沙灘 White Desert 加拉洞穴 Djara Cave   ","version":"Next","tagName":"h2"},{"title":"01/28 開羅 > 錫瓦​","type":1,"pageTitle":"Day by day","url":"/backpacker/2401 Egypt/Schedule/#0128-開羅--錫瓦","content":"  錫瓦 Siwa Muhra   ","version":"Next","tagName":"h2"},{"title":"01/29 錫瓦​","type":1,"pageTitle":"Day by day","url":"/backpacker/2401 Egypt/Schedule/#0129-錫瓦","content":"  鹽湖 Cleopatra’s Spring 克利奧帕特拉泉水 Shali Fortress 堡壘遺跡 Abdu Resturant   ","version":"Next","tagName":"h2"},{"title":"01/30 錫瓦 > 馬特魯 > 開羅​","type":1,"pageTitle":"Day by day","url":"/backpacker/2401 Egypt/Schedule/#0130-錫瓦--馬特魯--開羅","content":"  馬特魯 Matrouh Ageeba Beach   ","version":"Next","tagName":"h2"},{"title":"01/31 開羅 > 盧客索​","type":1,"pageTitle":"Day by day","url":"/backpacker/2401 Egypt/Schedule/#0131-開羅--盧客索","content":"  帝王谷 Valley of the Kings 哈布城 Medinet Habu 盧客索神廟 Luxor Temple   ","version":"Next","tagName":"h2"},{"title":"02/01 盧客索 > 阿斯旺​","type":1,"pageTitle":"Day by day","url":"/backpacker/2401 Egypt/Schedule/#0201-盧客索--阿斯旺","content":"  丹德拉神殿 Dendera Temple of Hathor 卡納克神廟 Karnak Temple Complex   ","version":"Next","tagName":"h2"},{"title":"02/02 阿斯旺 > 開羅​","type":1,"pageTitle":"Day by day","url":"/backpacker/2401 Egypt/Schedule/#0202-阿斯旺--開羅","content":"  菲萊神廟 Philae Temple 努比亞村  ","version":"Next","tagName":"h2"},{"title":"02/03 CAI > KUL​","type":1,"pageTitle":"Day by day","url":"/backpacker/2401 Egypt/Schedule/#0203-cai--kul","content":"  死人城 階梯金字塔 20:05 CAI &gt; KUL   ","version":"Next","tagName":"h2"},{"title":"02/04 KUL​","type":1,"pageTitle":"Day by day","url":"/backpacker/2401 Egypt/Schedule/#0204-kul","content":"  黃亞華小吃 [HOTEL] 阿玉酒店   ","version":"Next","tagName":"h2"},{"title":"02/05 KUL​","type":1,"pageTitle":"Day by day","url":"/backpacker/2401 Egypt/Schedule/#0205-kul","content":"  次廠街 源昌隆 鬼仔巷 新峰肉骨茶 [HOTEL] 阿玉酒店   ","version":"Next","tagName":"h2"},{"title":"02/06 KUL > SGN​","type":1,"pageTitle":"Day by day","url":"/backpacker/2401 Egypt/Schedule/#0206-kul--sgn","content":"  09:00 KUL &gt; SGN 09:50 KUL &gt; TPE  ","version":"Next","tagName":"h2"},{"title":"02/07 SGN​","type":1,"pageTitle":"Day by day","url":"/backpacker/2401 Egypt/Schedule/#0207-sgn","content":" ","version":"Next","tagName":"h2"},{"title":"02/08 SGN​","type":1,"pageTitle":"Day by day","url":"/backpacker/2401 Egypt/Schedule/#0208-sgn","content":" ","version":"Next","tagName":"h2"},{"title":"02/09 SGN > KHH​","type":1,"pageTitle":"Day by day","url":"/backpacker/2401 Egypt/Schedule/#0209-sgn--khh","content":"  17:50 SGN &gt; KHH   ","version":"Next","tagName":"h2"},{"title":"Maybe Next​","type":1,"pageTitle":"Day by day","url":"/backpacker/2401 Egypt/Schedule/#maybe-next","content":"  荷魯斯神廟 尼羅河 妮菲塔莉神廟 Nefertari 哈特謝普蘇特神廟 Mortuary temple of Hatshepsut   %% kanban:settings  {&quot;kanban-plugin&quot;:&quot;basic&quot;}   %% ","version":"Next","tagName":"h2"},{"title":"2011.02.23 ~ 03.11 隻身．清邁","type":0,"sectionRef":"#","url":"/backpacker/chiangmai/index_chiang-mai/","content":"","keywords":"","version":"Next"},{"title":"schedule / 行程記錄​","type":1,"pageTitle":"2011.02.23 ~ 03.11 隻身．清邁","url":"/backpacker/chiangmai/index_chiang-mai/#schedule--行程記錄","content":" 02.23 台北 &gt; 曼谷02.24 曼谷 &gt; 清邁 &gt; 老街02.25 Moto citing02.26 Jungle flight02.27 Biking day02.28 清邁 &gt; Sukhothai 素可泰03.01 Sukhothai 素可泰 &gt; 清邁03.02 清邁 &gt; 曼谷 &gt; 台北  ","version":"Next","tagName":"h3"},{"title":"sopt / 景點小介紹​","type":1,"pageTitle":"2011.02.23 ~ 03.11 隻身．清邁","url":"/backpacker/chiangmai/index_chiang-mai/#sopt--景點小介紹","content":" ","version":"Next","tagName":"h3"},{"title":"note / 雜記小文​","type":1,"pageTitle":"2011.02.23 ~ 03.11 隻身．清邁","url":"/backpacker/chiangmai/index_chiang-mai/#note--雜記小文","content":" 後記：感謝誌trip by AirAsia 2011 ","version":"Next","tagName":"h3"},{"title":"index","type":0,"sectionRef":"#","url":"/backpacker/euro-hopping/","content":"index","keywords":"","version":"Next"},{"title":"清邁行 感謝誌","type":0,"sectionRef":"#","url":"/backpacker/chiangmai/note_after-chiang-mai/","content":"清邁行 感謝誌 回顧泰國行… 這趟旅途遇到了不少台灣與中國人 其中一對姊妹，姊姊曾去澳洲 Working Holiday，趁換工作空檔走走，預計往後一個月往尼泊爾、印度跑 另一位剛結束澳洲 Working Holiday，存了點錢。接下來預計往緬甸、越南走～ 又是澳洲 Working Holiday? 哪天我有小孩，抓週時我會擺滿各個可以 Working Holiday 的國家，等他三歲會走路能說話時 我會對他說：「你他媽的現在立刻給我去 Working Holiday！」 第一次的背包客旅行，我愛上這樣的遊玩方式… 短短幾天，遇到不少台灣旅人 「下一站去哪？不知道，明天再說！ 有機票飛XXX就去，沒有的話就做火車往ooo跑」 突然覺得我這趟旅程已經是計畫過多了 在開始遊記前，有些人該感激一下。 學妹：好玩嗎？ 好玩，沒先做功課是對的！ 首先要感謝一下忙碌的工作，讓我除了訂機票外，毫無時間規劃行程。 得特別感謝一下雨軒，去年的澎湖、這次的泰國，她都說到當地再找住宿跟規劃行程就好，沒事做就當渡假一樣放空。而這兩趟旅程，都有許多意外收穫，這是規劃不來的。 而在清邁所住的 guest house，確實有不少西方年輕人，拿了本書漫漫看著。 __沒事做就放空！__多棒的旅遊心境！ 還得感激在去年底，拉我鬼混的多位好友，每次臨時邀約與衝動，總多累積一分冒險心境。那是種教導不來的能力，需要長時間的耳濡目染。有你們陪我瘋，我才能總如此放肆！ 明天要去當泰山 喔～依喔～～～ 這趟另外要特別感謝的是漢&quot;清邁 感謝你們提供了這麼多有趣的活動跟可看的地區，讓我在清邁這些天可以放空，亦可以痛快的玩耍！ 最後，雖然我仍對亞航擅自取消台北曼谷航線而不悅，不過因此更動後的旅行，讓我更滿意。期望亞航早日恢復台北曼谷的航線。","keywords":"","version":"Next"},{"title":"2011.05.17 ~ 05.28 漫行法國","type":0,"sectionRef":"#","url":"/backpacker/france/index_france/","content":"","keywords":"","version":"Next"},{"title":"schedule / 行程記錄​","type":1,"pageTitle":"2011.05.17 ~ 05.28 漫行法國","url":"/backpacker/france/index_france/#schedule--行程記錄","content":" france schedule planning05.17 paris - avignon05.18 avignon 亞維農 午間 picnic 05.19 arles 亞爾勒：05.20 rossignol 胡西庸：05.21 APT 阿普特：05.22 paris 巴黎：05.23 st.michel 聖米歇爾：05.24 st.michel - paris：05.25 paris 巴黎：05.26 blois 布洛瓦：05.27 paris 巴黎：05.28 paris 巴黎：05.29 paris - taipei：  ","version":"Next","tagName":"h3"},{"title":"spot / 景點介紹​","type":1,"pageTitle":"2011.05.17 ~ 05.28 漫行法國","url":"/backpacker/france/index_france/#spot--景點介紹","content":" 亞維農 教皇堡： 巴黎 蒙馬特 Montmartre塞納河：藝術橋 Pont des Arts  ","version":"Next","tagName":"h3"},{"title":"note / 雜記小文​","type":1,"pageTitle":"2011.05.17 ~ 05.28 漫行法國","url":"/backpacker/france/index_france/#note--雜記小文","content":" 2011GREECE&amp;FRANCE - Free Imagination 想像自由, 尼尼爾潘 ","version":"Next","tagName":"h3"},{"title":"Lunch picnic at Avignon 午間野餐","type":0,"sectionRef":"#","url":"/backpacker/france/lunch-picnic/","content":"Lunch picnic at Avignon 午間野餐 近午時，路過教皇堡來到北側一座公園，這公園是亞維農城中較大的一座公園，地勢高，可以遠眺隆河和亞維農斷橋。 相較烈日下廣場的炙熱，公園綠地上、樹蔭下可真是涼爽；相對於廣場上的門可羅雀，公園裡可說門庭若市。 綠意盎然的公園，避暑、野餐的人相當多～ 挑了個樹蔭下野餐，位於高勢，一旁可瞭望隆河，我們享用早上市場買的午餐、配著酒。 cheese、麵包、熟食、1664、甜白酒，搭著樹蔭下陣陣徐風、隆河斷橋景致～ 舞山緣、佾江風、一瓢飲、任逍遙。 餐畢沿著階梯回教皇堡，瞥見一片桑葚樹，累累結果對我們伸出惡魔招換～ 『來吧～來吃我～來吃我～～～』 還在討論會不會摘了以後會被抓去關，一家子人走近大肆享用著野生桑果， 我們也跟上摘著桑葚當甜點，甜美多汁！！！ 另外，本文的重點是，那家子的女兒是個正妹！！！","keywords":"","version":"Next"},{"title":"Travel Plan","type":0,"sectionRef":"#","url":"/backpacker/france/note_plan-for-france-2011/","content":"Travel Plan 不清楚是什麼失心瘋狀況下，答應了跟捨捨、尼尼、米米一同去法國，於是去年義大利的四人行再度上路。 這篇用來做行程規劃與參考資料的收集，陸續更新 Kota Kinabalu &amp; France, tripit 目前初步的行程規劃 5/13 - 17 沙巴、吉隆坡5/17 - 21 普羅旺斯: 亞維儂-阿爾勒-路貝紅 悠游山城5/21 - 29 巴黎大區-凡爾賽宮-聖米歇爾山-羅亞爾河逛城堡-勃艮地喝紅酒 為了這趟旅遊，買了幾本書： 趁著誠品網路書店的旅遊書特賣，買了《法國 (Lonely Planet)》的旅遊導覽。記得在泰國旅行時，一些歐美遊客幾乎是人手一本 Lonely Planet 的書，內容相當完整豐富，不愧是背包客的聖經。同時買了《愛上巴黎的 77 個理由》，這本書跟 Lonely Planet 真是截然不同，只是作者自身的喜愛小店介紹，而非旅遊導覽，是本有趣的小品。書中的排版設計很棒，說是旅遊書不如當作設計參考書來收藏。而《巴黎一個月的生活》更只是作者旅遊時的手帳！很酷的一本書，會讓人有衝動也比照辦理；不過我連按按手指的攝影記錄都會「下面沒有了」，要記手帳整理，難！在書架上翻到《巴黎地下世界》，介紹巴黎錯綜複雜的地下通道與其歷史緣由，比想像中有趣的一本書。 最後《Eat, Pray, Love》(享受吧，一個人旅行)原文書，準備帶著路上看的書。喜歡在交通移動、等待時看書，一趟異國旅遊總能看完五六本書，然書本的重量卻總是困擾著我。決定帶本原文書去讀，拖累一下自己的閱讀速度，同時練習一下英文！","keywords":"","version":"Next"},{"title":"[巴黎] Montmartre 蒙馬特","type":0,"sectionRef":"#","url":"/backpacker/france/paris_montmartre/","content":"[巴黎] Montmartre 蒙馬特 去年在 facebook 貼了張相當喜愛蒙馬特這街道往下看的街景，在捨捨和尼尼的《旅。義大利》攝影展上被潔斯米拿來虧我，要我早點把相片整理分享。整理過程中看到下面這張街頭爵士演奏，想起那天一行人在路旁聽得起勁，隨之把這張相片也貼到 facebook 上。巧合的，和去年同一天貼蒙馬特的相片。 蒙馬特位於巴黎市區北方的山丘上，在奧斯曼都市更新計畫期間，許多巴黎原本居民被迫遷移到市郊地區，蒙馬特也因此加速發展。而不在都市更新計畫範疇內，使得蒙馬特的房屋、街道有特色富變化，不像巴黎那樣清一色的「奧斯曼」風格。 蒙馬特由於位在城市的範圍之外，所以不必支付稅金給巴黎市，於是蒙馬特很快就成為一個受歡迎的飲酒區域。這個地區發展在19世紀末及20世紀初已經成為一個不受約束，且頹廢的娛樂中心。紅磨坊的歌舞表演受到廣泛的歡迎，而藝術家、歌唱家與演員也經常出現會黑貓夜總會。 19世紀中葉的藝術家，例如約翰·尤因根德（Johan Jongkind）與卡米耶·畢沙羅都曾居住在蒙馬特。到了19世紀末，蒙馬特及左岸的蒙帕納斯（Montparnasse）已成為巴黎主要的藝術中心。餐廳煎餅磨坊（le Moulin de la Galette）則在舊風車附近的山頂上開業。 巴勃羅·畢卡索[9]、阿梅代奥·莫迪利亚尼與其他貧困藝術家在1904年至1909年間曾生活在一骯髒的建築物洗濯船裡。 from wikipedia 當不少巴黎老店在都市更新中消失的同時，蒙馬特卻發展出許多的特色商店，營運至今。 這是個充滿藝術氣息與法國浪漫的地方、是巴黎我最愛的一個區。 我們走訪蒙馬特的許多地方，也許陸續補充吧。 這是高低起伏沒有規則的區域，不該拘束。","keywords":"","version":"Next"},{"title":"[巴黎] Pont des Arts 塞納河 藝術橋","type":0,"sectionRef":"#","url":"/backpacker/france/paris_pont-des-arts/","content":"[巴黎] Pont des Arts 塞納河 藝術橋 藝術橋 (Pont des Arts) 是巴黎第一座鐵橋，連結左岸的法蘭西學院與羅浮宮，是一完全人行步道橋。 不知何時開始，這座鐵橋也流行起愛情鎖來。來訪情侶在鐵網上繫上鎖頭，象徵兩人愛情的堅定不移。 在富含浪漫的藝術橋掛上情鎖，好令人生羨！ 似乎是相當近期才盛行，早一點的旅遊網誌及旅遊書上皆未曾提及。未曾預期的風情，總是驚喜。 也因未預期有這愛情鎖的梗，尼尼跟米米並未準備。 尼尼在背包裡翻出一個小鎖頭，兩人也在花都留下甜蜜的印記。 我們繞了一下，都沒看到在買鎖頭的攤販，而紀念品商店也沒賣鎖頭。 這倒令我們訝異，若在台灣，恐怕不少賣鎖頭的小販在一旁遊走吧！","keywords":"","version":"Next"},{"title":"[函館] 五稜郭公園","type":0,"sectionRef":"#","url":"/backpacker/hokkaido/hakodate_fort-goryokaku-park/","content":"[函館] 五稜郭公園 洽值滿開時期，五角星形的公園河岸兩旁站滿了滿開的櫻花。 放緩腳步、放下相機，陣風吹拂，落下點點櫻花瓣，片片飛舞。櫻花雨。 幾個好友都說，櫻花最美的樣貌不是用看的、拍的，而是要感受的。 這天上午、在五稜郭，臉上、手上、身上，都體驗到花語呢喃、花雨輕拂。 種植了多達1600棵的櫻花，歷史悠久的公園 日本最早的西洋式城郭。作為北方警備防衛的據點，在幕府時代從1857年﹙安政4年﹚花費了7年的時間建成，4年後的1868年﹙明治元年﹚，榎本武揚、土方歲三以此城郭為據點，宣言創立「蝦夷地共和國」，而成為箱館戰爭的舞台。現在在護城河內種植了許多櫻花，是函館市民最熟悉的賞花景點。此外在公園旁的五稜郭塔也是著名的觀光景點。 五稜郭公園(特別史跡五稜郭遺跡) [BEST! from 北海道] 一早從函館坐了三個小時的火車到五稜郭站，甫出站就忍不住在販賣機買了冰淇淋。依著地圖的概略印象朝著五稜郭塔前進。 各國鄉下地方都很迷人，日本也是！一路看到跟札幌、小樽截然不同的風貌，在鄉間漫步就是種樂趣。也許另寫一篇吧，這段小路。 約二十分鐘後到五稜郭，遠遠就被滿開的櫻花震著。大片的櫻花林、粉白帶點紅配上綠地藍天，大地代表顏色全到齊了。 這樣幅員廣大又單純，果然賞櫻還是要在這般開闊地方。 五稜郭塔上可俯瞰整個五陵郭，前一週還是光禿的大地全換上白底帶粉紅的色澤，這五角星顏色層次繽紛了。 從五角形的展望台上眺望五棱郭 2006年4月，高107m的新塔興建完成。從高90m的展望台上，可以眺望特別史跡五棱郭和函館山、津輕海峽。在展望台第一層，可以從強化玻璃的地板看到腳下的景觀，還設有咖啡廳。在展望台第二層，有可以學習五棱郭歷史的展示迴廊。一樓有販賣許多限定的商品和土產。若是肚子餓的話，中庭的店家有販賣剛出爐的麵包。 五棱郭塔 [BEST! from 北海道] 五稜郭的美並不一定要登塔鳥瞰，找個樹下近身貼近櫻花，也是種風景。 五稜郭塔為最顯眼的建築，從許多角度都可以看到其蹤跡。透過櫻樹縫隙中看到挺立的高塔，別有風情。 五稜郭不愧是函館主要的賞櫻地點，也是這趟旅程老遠花了不少金錢跟時間從札幌來到函館的主因之一。 甫下機時還在猶豫要不要花上來回六小時的車程來到函館，總希望不是那麼趕行程地過這短短四天。 期望能留一天在札幌郊區悠哉，也許順道走訪一些歷史建築或是觀光工廠，或是找個舒服的小山坡看書一個下午，旅行應該緩慢不是嗎？ 然，看到五稜郭的櫻況報導及相片後，決定衝了！ 對的抉擇！我體會到櫻花美麗風情，寬裕地散步元町區，更挑戰成功幸福小丑的超級大漢堡。 有機會再安排北海道旅遊的話，也許我還是會再來一趟函館吧！","keywords":"","version":"Next"},{"title":"[函館] 八幡坡道","type":0,"sectionRef":"#","url":"/backpacker/hokkaido/hakodate_hachimansaka-dori/","content":"[函館] 八幡坡道 八幡坡的街、港、山，這遠中近三景各有風味卻融洽。日落時分，遠中近因天色呈現不同色調，漂亮。 這坡道更貼近函館一些，偶爾車輛穿梭與行人漫步，憑添了一點人味。旅行久了，最回味的往往不是奇川百景，是生活的氣味。 八幡坡道名字取自於函館八幡宮﹙現在遷移至谷地頭﹚，以美景聞名的坡道。是俯瞰函館港的絕佳景點，逛元町界街道時是您絕不可錯過的地方。沿著行道樹由石塊砌成的坡道而下乃舊富士銀行函館分行﹙現在是新函館飯店﹚。有許多電視廣告和電影登場的鏡頭也在此取景，是您拍照留念的最佳觀光景點。 八幡坡道 [BEST! from 北海道] 連兩年來北海道旅遊，函館也來了兩次。第一年來時和友人上函館山拍夜景，在零下幾度的寒風中從黃昏拍到夜晚，下山後手幾已凍僵，散步到八幡坡時覺得美麗，卻毫無精神架起腳架拍攝。除了體力的消耗外，當時天色已然完全暗黑，喜歡的暮色時間點已過。 第二次再來函館，一樣是下午時分。捨捨未曾來過函館，堅持要上函館山拍攝夜景，而我、賊和我妹、大頭就在元町區慢慢逛著。元町異國教會區景致和雪季時截然不同，少許櫻花樹配上各式不同風格教堂，迷人。 這次不讓攝影佔去旅遊過多的比例，以遊玩體驗為主。一路上就四處買冰淇淋吃，有趣的角落就停留拍照，有趣的店家就逛。在接近黃昏時來到八幡坡道，將腳架立在北海道函館西高等學校的入口坡道上。洽值放學時分，當地學生一一離開學校，對遊客在此取景似乎也習以為常，路過我們往下走去。 「在這麼美麗的地方上課，真是幸福。」心中如此想著。 「在這麼陡的坡道上念書，真是辛苦。」(當地學生的 O.S.) 我們並未等到「黃金時刻」就先行下山了，因還趕著去吃小丑漢堡。這次我和賊挑戰了七層大漢堡，那是另一篇故事了。","keywords":"","version":"Next"},{"title":"[函館] 五稜郭 鈴井商店","type":0,"sectionRef":"#","url":"/backpacker/hokkaido/hakodate_lunch/","content":"[函館] 五稜郭 鈴井商店 同事曾說日本賣吃的沒有雷，朋友也認同，這趟對於用餐地點全沒做功課。 在五稜郭待了幾小時，餓了，估了時間也該吃午餐後準備繼續移動。一行人就沿著五稜郭大街前進，吃完順便可以搭市電前往元町地區。才走不遠就被鈴井商店招牌上的花枝飯給吸引住，就這家吧！ 鈴井商店門口很可愛、很日本，就像日劇裡常看到的小餐館。 入門後看到少少的兩張桌子及料理台前的幾把椅子。主人是一對老夫婦，客氣地招待我們入座後端上溫開水。老闆娘相當客氣，從頭到尾都輕聲地為我們介紹菜單上的料理（應該是啦）。我們之中最懂日文的捨捨還在五稜郭塔上拍照，老婆婆也不懂英文，在比手畫腳中完成了點餐。 我們每個人都點了一個花枝飯另加炒烏龍或炒飯。 把糯米塞入去除內臟的花枝中，再用醬汁燉煮。 花枝鮮甜有嚼勁，糯米暖硬適當，花枝的香味瀰漫，醬汁鹹中帶甜。 另外點的烏龍麵跟炒飯都好吃，但花枝飯的印象太深刻了！ 這該是家「家庭料理」，擺飾一般、菜色不多也不甚精緻，但味道樸實濃厚！ 像這樣的一家小餐館，確實會有種回到家的感覺。 沒有過多為遊客準備的裝潢與宣傳，只有溫暖的環境、紮實的口味跟主人和氣的問候。 對了，這樣一個花枝飯，才 300 日幣！便宜吧！","keywords":"","version":"Next"},{"title":"[函館] 幸福小丑漢堡","type":0,"sectionRef":"#","url":"/backpacker/hokkaido/hakodate_lucky-pierrot/","content":"[函館] 幸福小丑漢堡 幸福小丑漢堡應該算是來函館必吃的食物之一吧。 這家漢堡不僅便宜好吃，重點是「函館限定」！ 我不僅連兩年都來函館，也是連兩年都來吃小丑漢堡。 它在函館有許多分店，重要景點、交通要點附近幾乎都找得到它的蹤跡。我們則是連兩年都在金森倉庫店用餐，這和我們第二年許多行程是和前年重複的有關。 第一年來時因生意太好，要等上好一段時間，那時我們已經很餓不耐等候，於是先在隔壁的便利商店解決了晚餐，再買漢堡外帶回旅館吃。在旅館啃食時後悔沒多買一個。 漢堡肉塊鮮嫩多汁及滿滿的蔬菜！我喜歡蔬菜多的漢堡，非但有鮮脆的口感，也不那麼膩。整體口味搭的相當適宜，肉汁、醬汁濃郁，配上蔬菜的清爽、麵包的飽足，是個物超所值的漢堡！ 今年再訪小丑漢堡，和賊趁著胃口還大，點了每天限量 20 個的超級大漢堡。 就坐後老妹跟大頭的漢堡先送上來，這兩個人大口的啃著漢堡。沒多久聽到店裡傳來搖鈴吆喝的聲音，轉頭就看見店員端了大漢堡過來。 頓時注意全店的顧客都隨著鈴聲往我們這桌看，才知道原來點超級大漢堡，店員上菜時會搖鈴昭告天下，且隨餐還會附贈「表彰狀」。我想其他顧客應該都在好奇，我們會如何「解決」這七層的超級大漢堡吧！ 個人堅持漢堡當然要用手拿著吃！於是我學《挑戰美食王》裡的方法，把漢堡想辦法抓緊壓實後，大口咬下！ 賊董則是慢條斯理的將漢堡拆解，以刀叉切割分食。 這麼一大份漢堡，才賣 800 日幣！以它的食材來看怎麼樣都划算便宜！ 何況它又是如此好吃，若有機會再來函館，我一定會再來挑戰這超級大漢堡！","keywords":"","version":"Next"},{"title":"2018.05.24 ~ 06.02 樹又不是風景","type":0,"sectionRef":"#","url":"/backpacker/hokkaido/index_hokkaido-2018/","content":"","keywords":"","version":"Next"},{"title":"schedule / 行程記錄​","type":1,"pageTitle":"2018.05.24 ~ 06.02 樹又不是風景","url":"/backpacker/hokkaido/index_hokkaido-2018/#schedule--行程記錄","content":" 05.24 Thu, TPE &gt; CTS:05.25 Fri, 札幌:05.26 Sat, 札幌 &gt; 新千歲 &gt; 洞爺湖:05.27 Sun, 洞爺湖 &gt; 函館:05.28 Mon, 函館 &gt; 小樽:05.29 Tue, 小樽 &gt; 星野:05.30 Wed, 星野 &gt; 富良野:05.29 Thu, 富良野 &gt; 層雲峽 &gt; 旭川:06.01 Fri, 旭川 &gt; 札幌:06.02 Sat, CTS &gt; TPE:  ","version":"Next","tagName":"h3"},{"title":"spot / 景點介紹​","type":1,"pageTitle":"2018.05.24 ~ 06.02 樹又不是風景","url":"/backpacker/hokkaido/index_hokkaido-2018/#spot--景點介紹","content":" ","version":"Next","tagName":"h3"},{"title":"note / 雜記小文​","type":1,"pageTitle":"2018.05.24 ~ 06.02 樹又不是風景","url":"/backpacker/hokkaido/index_hokkaido-2018/#note--雜記小文","content":"","version":"Next","tagName":"h3"},{"title":"小樽行旅","type":0,"sectionRef":"#","url":"/backpacker/hokkaido/note_otaru/","content":"小樽行旅 天候乍暖還寒，街道悠悠無人 卜結束黃金週的小樽，意外地片刻寧靜 幼童成對行走，蒸汽鐘響時興奮地跳上跳下 配合蒸汽、鐘聲，手舞足蹈著 牆面的燈籠仍亮著，門旁的木喵仍坐著 裡頭少了分喧鬧，店員表情格外輕鬆 狗兒在旅人中間竄出頭來，後頭還有個湯圓憤憤地望著 為這寧靜的小樽街頭畫，添了幾分動作","keywords":"","version":"Next"},{"title":"2011.05.08 ~ 05.11 再訪北海道","type":0,"sectionRef":"#","url":"/backpacker/hokkaido/index_sakura-hokkaido/","content":"","keywords":"","version":"Next"},{"title":"schedule / 行程記錄​","type":1,"pageTitle":"2011.05.08 ~ 05.11 再訪北海道","url":"/backpacker/hokkaido/index_sakura-hokkaido/#schedule--行程記錄","content":" 05.08 台北 &gt; 新千歲 &gt; 札幌 &gt; 啤酒廠 &gt; 貍小路05.09 小樽 &gt; 拉麵共和國05.10 函館：五稜郭、元町異國街區05.11 札幌：北海道神宮 &gt; 台北  ","version":"Next","tagName":"h3"},{"title":"spot / 景點介紹​","type":1,"pageTitle":"2011.05.08 ~ 05.11 再訪北海道","url":"/backpacker/hokkaido/index_sakura-hokkaido/#spot--景點介紹","content":" 札幌 大通公園道廳舊紅磚廳舍札幌啤酒博物館北海道神宮 小樽 小樽車站 函館 五稜郭元町街區八幡坡道  ","version":"Next","tagName":"h3"},{"title":"cuisine / 美食小記​","type":1,"pageTitle":"2011.05.08 ~ 05.11 再訪北海道","url":"/backpacker/hokkaido/index_sakura-hokkaido/#cuisine--美食小記","content":" 札幌 成吉思汗烤肉拉麵共和國 函館 鈴井商店幸福小丑漢堡  ","version":"Next","tagName":"h3"},{"title":"note / 雜記小文​","type":1,"pageTitle":"2011.05.08 ~ 05.11 再訪北海道","url":"/backpacker/hokkaido/index_sakura-hokkaido/#note--雜記小文","content":" 櫻花雨小樽行旅 ","version":"Next","tagName":"h3"},{"title":"詠嘆．櫻花雨","type":0,"sectionRef":"#","url":"/backpacker/hokkaido/note_sakura-rains/","content":"詠嘆．櫻花雨 回想起北國四月的櫻花 時間彷彿一剎那 純淨的花影忘了嗎 愛してる 說吧 你還牽掛 那年青春正好相約看花 在那兒時卻是雨下 櫻花容顏如此哀愁 愛してる 心事 猶如晚霞 彷彿歲月是首格外惆悵之歌 青春若夢 終究錯身走過 堅強與美麗是那般壯碩 就算雨折櫻花 我依然是我 彷彿記憶還留著那時的花朵 倦眼回眸 相信你還記得 攜手看雨中花紛紛飄落 追念寫成詩句 為你唱的歌 （為你唱的歌） 櫻花雨 印證 真愛永生不朽 賴佩霞 詠嘆．櫻花雨(Aria)詞：林文義 / 曲：李雨寰 看到這畫面，想起這首歌 美麗的事物，愈經時間磨練愈加動人 美麗的景緻，是該閉上眼睛好好感受 日本，櫻花是生活中的一部分，是季節了往櫻樹下一坐 一單食 一瓢飲 不改其樂","keywords":"","version":"Next"},{"title":"[小樽] 小樽駅","type":0,"sectionRef":"#","url":"/backpacker/hokkaido/otaru_train-station/","content":"[小樽] 小樽駅 對一個習慣自助旅行的遊客，車站往往是對一個地區的第一印象； 對一個鐵道運輸繁榮的國度，車站更是一個地區的入口大門。 小樽駅不大，但有味道。 小樽以哨子（玻璃）聞名，尤其是玻璃燈。早期小樽多靠漁業為生，玻璃燈趙是補魷魚用的，幾乎家家戶戶都需要，後來更發展出其他的玻璃工藝製品，成為小樽代表。 小樽駅月台兩側掛滿了玻璃燈，售票大廳還有一面牆全是玻璃燈，相當古意。 日文漢字的「哨子」即是玻璃，猜想和中國古代稱玻璃為哨子有關吧。 明代以「哨子」稱玻璃。明代曹昭《格古要論》：「哨子，假水晶用藥燒成者，但不潔白明瑩。」 明代李時珍《本草綱目》：「水精，藥燒成者，有氣眼，謂之哨子，一名海水精。」 （新竹玻工館也提及玻璃古名為哨子一辭，但網路上僅找到此出處） 玻璃小百科 連兩年在小樽的行程動線雷同、連兩年沒吃到魚真、連兩年搭車離開的時間也接近。 該是巧合吧！ 車站往來的人有各自的目的地跟心情，也許是日復一日已無表情的通勤族、也許是即將遠赴他鄉的不捨、也許是外出旅遊的興奮，當然還有我這種遊客，初來乍訪，走馬看花了一回還意猶未盡，也滿足也遺憾的離開。 總期待能多落腳幾個車站，也期待能多體驗人生百態。","keywords":"","version":"Next"},{"title":"[札幌] 札幌啤酒博物館","type":0,"sectionRef":"#","url":"/backpacker/hokkaido/sapporo_bear-museum/","content":"[札幌] 札幌啤酒博物館 應該是在《烤焦麵包的北海道旅行日記》中看到成吉思汗烤肉吧，再上網一查，原來那麼有名！ 好吧，其實更吸引我的是它位於「札幌啤酒博物館」裡～～～ 可以深入了解啤酒歷史的啤酒博物館 2004年12月重新改裝新開幕。博物館中介紹札幌啤酒的原點「開拓使麥酒釀造所」及日本啤酒產業的發產歷史，往昔啤酒釀造的情形。參觀後還可以試飲剛釀的新鮮啤酒(收費)，在園區內並設有3200席座位的札幌啤酒園。 札幌啤酒博物館 我們將札幌啤酒廠排在第一天晚上，希望剛到日本的第一天就醉倒（誤） 地圖上看，札幌車站走到啤酒廠約只需二十分鐘，於是我們捨棄搭乘大眾交通，徒步前往。 找到了出發方向前進，一路走、停、拍，剛看到啤酒廠煙囪露臉時，高興！ 然後又繼續停、走、拍，那根聳立的煙囪，花了好久好久的時間才走到。 是保留開拓時代原有風貌且具有很高曆史價值的紅磚建築物，也是日本唯一的啤酒博物館。 從明治9年開拓使啤酒釀造所開辦到啤酒釀造曆史的變遷以及和北海道開拓史的關係等都有實物或影像資料做介紹。在這其中之精華應屬到昭和44年(1969年)還在原九州工場使用的德國制造的直徑為三點八米的下料大鍋。在接待人員的帶領下參觀遊覽完後，可在試飲大廳試飲(注：收費)剛剛釀造出來的生啤(一共所要時間約50分鐘)。另外還可在院內的札幌啤酒園品味由工場直送的啤酒和成吉思汗烤羊肉。 札幌啤酒博物館 燈光打亮紅磚牆面、點綴標示的啤酒桶，櫻花在燈光前綻放。 這景色是在告訴我們，來得太晚了，啤酒博物館已經關了。（哭） 本該為這美麗景致駐足，然飢餓難耐，我們就直接前去用餐了。 吃了幾輪烤肉、喝了兩大杯啤酒後，見外頭色溫漸深，和捨捨不顧寒冷又外出拍攝。 滿開的櫻花確實迷人，夜晚點點燈光照亮的櫻花樹、暮色背景，更是浪漫！ 會再來一趟吧，為啤酒、為烤肉！","keywords":"","version":"Next"},{"title":"[札幌] 札幌啤酒廠成吉思汗烤肉","type":0,"sectionRef":"#","url":"/backpacker/hokkaido/sapporo_bbq-bear-buffet/","content":"[札幌] 札幌啤酒廠成吉思汗烤肉 關於成吉思汗烤肉的傳說有許多版本，但無從查證。個人比較喜歡的說法是蒙古軍遠征時，士兵喜歡用自己的頭盔烤羊肉而得名，慢慢演變成後來中高外低的烤盤形狀。成吉思汗烤肉最早在札幌出现，在北海道已经有一定的歷史，可以稱得上是北海道最有特色的料理之一。 札幌和台灣的蒙古烤肉完全不同。台灣是在大鐵圓盤上看廚師拿著兩根長筷子飛舞翻，說是烤肉，其實更像是熱炒。 而札幌蒙古烤肉則是中高外低的鐵盤，烤盤很像台灣的「韓國烤肉」。 但台灣的韓國烤肉烤盤為銅盤、而食材多為醃製品，札幌蒙古烤肉則是新鮮蔬菜、肉片。 有趣的是，無論是台灣的蒙古烤肉還是札幌的成吉思汗蒙古烤肉，都是當地發明的。 蒙古人並沒有特別的烤肉文化，也沒有台灣或日本那樣的烤肉器材。 將特製的鐵盤放在炭火上燒烤，先鋪上高麗菜、豆牙等耐煮又富含水份的蔬菜，再放上肉片。 燒烤後蔬菜的水份會慢慢將肉片蒸熟，肉汁滴在蔬菜上，夾起沾著特製的醬汁，美味！ 肉質鮮美毫無羊羶味，蔬菜甜又爽脆，醬汁淡淡的酸、甜、鹹，絕配！一口烤肉配一口啤酒，暢快！！！ 札幌成吉思汗烤肉店不少，其中位於札幌啤酒館的烤肉餐廳，是相當具代表性的一間。 挑高的百年紅磚建築，矗立著興建於1912年的大型釀酒槽，悄悄訴說著釀製出日本第一滴啤酒的光榮歷史。這裡的氣氛確實是一流的，復古的啤酒廠建築配上華麗的燈光，加上強力放送的暖氣，讓人不由自主陷入大塊吃肉、大口喝酒的豪放情緒，也因此這裡總是有著高朋滿座的歡聚場面。 除了味覺的享受，看著啤酒園服務生展現送酒絕技也是一大享受，一次一個人左右手可各拿10杯啤酒，以效率靈活的姿態，將啤酒工廠的生鮮美味直送到客人桌上，暢快淋漓，令人難忘；如果秋冬到北海道一遊，千萬別錯過啤酒與烤肉這充滿豪氣的美食拍檔。一路玩下去 大口吃肉、大碗喝酒實在暢快，在這古意舒適的空間內！","keywords":"","version":"Next"},{"title":"[札幌] 大通公園","type":0,"sectionRef":"#","url":"/backpacker/hokkaido/sapporo_odori-park/","content":"[札幌] 大通公園 大通公園位於 JR 札幌車站南側，步行約五分鐘的距離，是一條東西向的線形公園。 公園底下是札幌捷運南北線、東西線、東豐線等交會站。對札幌市區來說，大通站是個比 JR 札幌車站更為重要的交通中心，有點像高雄美麗島，是捷運的轉乘站點。 東西向總長約 1.5 公里的大通公園，把札幌市區分隔成南北兩部分，是個依城市規劃發展而成的大型公園。附近成棋盤式的路名、街道名也以大通公園為中心，依方向作出稱呼，例如「北十七條東五丁目」、「南九條西十五丁目」等。區分東西的標準是創成川，而公園的南北就是真正所謂「大通」。 位於大通公園東側盡頭的札幌電視塔，是札幌另一個重要地標。登上札幌電視塔可俯瞰大通公園及一眼望盡札幌街景。 冬天的大通公園是著名札幌雪祭的會場，各式雪雕、冰雕就擺在公園裡，壯觀、浪漫。為這南來北往的交通要點增添了不少悠閒的氣氛，也為寒天凍地的北國居民帶來了一點溫暖的問候。 我們這趟在五月到訪，公園兩側高大的櫻花樹正要盛開，不時可見民眾拿著相機、手機拍照留影。 而老妹他們的飯店就在大通公園旁。真是幸運，可以在這樣美景下窩在門口抽煙～ 春天的大通跟去年冬天時的風味完全不同，一個四季富有變化的地方，每個季節都有他的美。","keywords":"","version":"Next"},{"title":"[札幌] 道廳舊紅磚廳舍","type":0,"sectionRef":"#","url":"/backpacker/hokkaido/sapporo_old-hokkaido-government/","content":"[札幌] 道廳舊紅磚廳舍 保留著開拓時代身影的北海道代表性建築 1888年(明治21年)完工，以「紅磚樓」的暱稱為札幌市民所熟悉，被國家指定為重要文化財產。美國風格巴洛克式的紅磚建築，八角的圓形屋頂是一大特徵。館內對外開放，可以參觀紅磚拱門的1樓正面大廳及歷代長官、知事所使用的辦公室。 北海道廳舊本廳舍 [BEST! from 北海道] 舊道廳位於大通公園跟札幌車站之間，第一年路過但一直未進入一探究竟，再訪時因時間充裕進入繞了一圈。這兒不單建築走巴洛克風格，庭院花圃設計亦很西式。廳裡陳列北海道開括的史蹟資料相當多，可惜我不懂日文，只能四處拍照。 北海道廳舊本廳舍建造於1888年，作為北海道廳的本廳使用了80年。 建築是美國新巴洛克風格的磚造建築，磚、木材等許多建材都使用了北海道產的材料建造。 內部曾一度遭火災燒毀，1968年復原成創建當時的風貌，第二年即1969年作為實際存在的優秀西洋建築被指定為重要文化遺產。 廳舍內現在成為道立文書館、北海道歷史畫廊北海道開拓記念館，介紹北海道的歷史和文化。 另外，還可以參觀歷代長官、知事的豪華的辦公室。 Japan-i 暢遊日本網 道廳保存的情況相當好。長久使用的扶手所磨出歷史痕跡也完整保留，很值得借鏡。 看過不少古蹟的維護案，總把古蹟「維護」的像是甫落成新屋。曾聽龍南漆器的老闆說，日本維修古蹟，木頭、工法、上漆等，都會和原建築一樣。國內卻常看到用色澤亮麗的化學漆在破壞維護古蹟的施工，有些事還有不少進步空間。 揮別過往繁忙的公務需求，轉身向熙往遊客、居民訴說歷史。舊道廳以不同面貌，繼續看護著北海道。","keywords":"","version":"Next"},{"title":"藍屋","type":0,"sectionRef":"#","url":"/backpacker/hongkong/hk_blue-house/","content":"藍屋 一陣瘋狂地忙碌中，猛然地。轉身，一個月過了。 1/8, 263 兩個數字停滯不動中，身子不斷累積著疲累。 週間的加班、週末帶著靠么到小春日和放生，自個兒繼續埋頭筆電中，常態。 硬是抽了空看了部電影，那些和你瑣事又浮現腦海。 劍岳，答應過要帶你去的，我排入了今年行事曆，你呢？ 日前聽了場閱讀旅行分享，有個旅遊上癮者這麼說： 旅行，就是從你活膩了的地方，移動到另一群人活膩了的地方。 是自我調侃，對一個無法戒掉旅行的浪人。 一如我顧自努力地往前走，仍無法戒掉你。 想起香港．灣仔．藍屋，在旅伴介紹下而前往的地方。 那天散步在灣仔，喘了口氣的舒暢。 漫無目的地旅遊，仍是我的歸屬、我的調性。 走訪了一處很民生社區的街坊，在那吃了很美味的小吃。 又來到老屋欣力一般的藍屋周遭，在此駐留了一會。 Reference 控如我，查了查蘭屋的由來： 曾是華佗醫院、香港少數還有露台建築的唐樓、 曾經有一間二次大戰前灣仔區內唯一的英文學校「一中書院」、 一所為小孩提供免費教育的「鏡涵義學」、 一所由黃飛鴻徒弟林世榮的姪兒林祖開辦的武館。 歷史幽幽的古蹟，在裝修工人因油漆缺色下，一股腦穿上藍衣。 這該是面對歷史的態度？無從評論… 諷刺？幽默？將錯就錯？ 藍屋身旁站起了澄屋、黃屋，外頭還有一整排彩虹屋。 高聳新建大樓林立包圍下，這區建築以自個的姿態活著。 不顧和周遭環境的格格不入，訴說著香港的故事。 不動如山 目光因藍屋的獨特而停駐，而它只是想著辦法從歷史的錯誤中繼續前進。 「旅行，不過是從你活膩了的地方，移動到另一群人活膩了的地方…」 「烈日底下無新事」他說、她說… 努力走了那麼久，我仍，掛念著她。","keywords":"","version":"Next"},{"title":"黑白．香港映像","type":0,"sectionRef":"#","url":"/backpacker/hongkong/note_bnw-hk/","content":"黑白．香港映像 再一次，你如何定義你的旅遊？ 你在大街上逛著，你在小弄中竄著。 你討厭彌敦道上林立的珠寶店，你無視藥舖門口滿滿的奶粉。 你注意被廣告招牌張牙舞爪佔領的天際，關注著林立高樓裡頭的微小蟻居； 「對嘛，這才是香港！」 你在感受？或在驗證？ 你遊走在人群之中，忽略身旁滿滿地大陸腔， 而歡欣於街道上彈奏老歌與一同跳舞歡樂的民眾。 你喜歡的、不愛的，都是香港。 他們來香港多會安排順道去澳門走走， 你跟著買了船票後，才發現並沒有那麼想去澳門。 你退了票，漫無目的著～ 皇后大道比你家門前的路還小，世界最長的手扶梯是好幾段連結起來的… 是的，這就是香港。 你的鄰桌有個正妹，和本文無關～ 你那麼反骨，又那麼老派。 你記得真實反應當下就好～","keywords":"","version":"Next"},{"title":"山城 古城 埃本哈度","type":0,"sectionRef":"#","url":"/backpacker/iceland/essays_ait-ben-haddou/","content":"翻看自己曾經大量使用但停用多時的圖像社群平台，只像是另一人的人生。 打開手機，黃邊心想邊打入她的帳號，搜尋、追蹤。 ⋯⋯ 山城 古城 埃本哈度 在菲斯逛市集時，被跑鬧中小孩衝撞一下，隨即她發現錢包掉了。 「小偷！」她大叫著！ 黃追了上去，目標卻是接應的同夥，在小孩遞交錢包同時攔住錢包。 「又是你們，滾！」黃斥哄著！ 黃因工作派駐摩洛哥已逾半年，她則因情傷隻身旅行各地。 在菲斯相遇，她請黃一起晚餐，黃介紹了摩洛哥的旅遊景點與注意事項。 ⋯⋯ 「have a cafe with this view」 黃抬頭一看，埃本哈度山城山腰一間不起眼的咖啡店，她笑著享用咖啡、邊打招呼。 「那麼巧？」 走入咖啡店、點了杯摩洛哥茶、與她聊著摩洛哥與彼此的旅程。 她聊著她的時尚、黃訴說他的冒險。 「有沒有IG，加我一下～」她說道。 翻看自己曾經大量使用但停用多時的圖像社群平台，只像是另一人的人生。 打開手機，黃邊心想邊打入她的帳號，搜尋、追蹤。 ⋯⋯ 走下山城 「你不覺得很像特洛伊裡面的古城～」 面對古城那樸實一片的磚土色，她說道 「我卻總聯想起聖米歇爾～」 走在崎嶇山城，兩旁藝術品林立，黃回應 偕伴古鎮 「have a wine with this night」 ⋯⋯ 八百多年歷史的埃本哈度古城 曾提供補給於駱駝商隊、提供景致給電影拍攝 今為世界遺產、交流著來往遊客人生故事","keywords":"","version":"Next"},{"title":"三個傻瓜．班公錯 Pangong Tso","type":0,"sectionRef":"#","url":"/backpacker/india/essays_pangong-tso/","content":"","keywords":"","version":"Next"},{"title":"...","type":1,"pageTitle":"三個傻瓜．班公錯 Pangong Tso","url":"/backpacker/india/essays_pangong-tso/##","content":"               烈日高掛，湖面閃爍著閃閃金光； 豔陽當中，湖岸露透著陣陣暑氣。  一行人等在回列城路上，爭執著⋯  「老闆，我不懂！他們昨夜那種態度，沒把他們趕出去已經不錯了。護照忘了拿，幹嘛還幫他們送過去！？」  ⋯⋯  昨夜，原定傍晚抵達帳篷的一車旅客，入夜後才到達。 接待旅客的員工，優先把鄰近餐廳帳的幾頂帳篷給了其他旅客。這組團體，硬生生地被拆成兩區入住。 一天舟車勞頓後，看到朋友要被安排在遙遠另一處的帳篷居住，顏暴怒！  幾經協調後，一組熟客同意幫忙，願意更換帳篷。員工迅速地整理出兩頂帳篷，讓這組團體住得近些。  晚餐時，在連日無變化的印度餐轟炸下，再也不想吃咖哩，紛紛拿出家鄉泡麵吃著。 員工有人看著有趣，也有人不舒服。辛苦準備的餐點被如此嫌惡，覺得不受尊重。  早晨，團體退房後驅車前往湖畔拍照。員工整理房間時發現一本遺落的護照，顏⋯  列著清單，老闆派一個員工去列城採買，順便把護照送回他們晚上下榻的飯店。  那不舒服的員工更怒了！  ⋯⋯  「可是，他也沒說錯啊。他們兩個月前就已經訂好房間，是我們沒把團體安排妥當，我們的疏失啊⋯」 老闆笑笑，站在旅客這方，和員工爭執著。 「想想，要是你護照掉了，又會是多著急、多麼不便？這不是我們這行業本來就應該的事嗎？」  爭論中，巴士從遠處出現，老闆揮著手攔下車。 和司機交談一會後，車上的人翻著背包找尋護照。  顏意外，護照夾裡的護照消失了。 再回神，想起昨夜隨手把護照往桌上一扔，忘了收。 羞愧著，上前詢問護照下落。聽聞已送至列城，更是愧欠了。  員工站在一旁，看著顏的表情。 先是不耐、緊張、慌張、愧對、爾後感恩、平靜。  需要在一片無邊際的高草原撥開一些草，仰頭看天時能有牛頓環，陽光溫煦。  「無論如何，我挺你。 「這並不代表我認同你，或你是對的。 「⋯⋯⋯  ","version":"Next","tagName":"h3"},{"title":"...​","type":1,"pageTitle":"三個傻瓜．班公錯 Pangong Tso","url":"/backpacker/india/essays_pangong-tso/#-1","content":"         落日餘暉，遠處的深藍、眼前的金黃，及其間夾雜的繽紛。 漸趨平淡⋯  風起，湖畔僅剩的車隊一一駛離。 夕下，班公錯再陷入沉寂。  「該回帳篷了。」 他打破沉默，遞上一件外套後起身緩行。  「那邊有人和你一樣穿短袖耶！」 夜間，十度上下的氣溫，往來遊客、居民接連著上外衣禦寒，他一如往常短袖裝扮。 趙舉手指了某營業帳篷，外頭一群華人聚在相機後聊天著。其中一人著無袖上衣，特別顯目。  「那不是我們今天遇到，在涼亭上耍笨的那一車嗎？很瘋狂的一群。 「應該是台灣人吧！ 「我在 PCT 時遇上一對台灣夫婦，他們聽到我住北北印，說有一團台灣遊客來這玩。他們所拍攝的旅遊影片，大受歡迎。從此台灣人來此觀光旅行的變多了。」  ⋯⋯  無預警地，趙來到店內。「什麼風把你吹來？」  離婚的消息，他楞了，如同三年前的閃婚。 當時他正在 PCT 健行，聽到婚禮消息後連忙趕回參與婚禮。 訊息與班機的延誤，沒趕上趙的婚禮。 婚後，在趙搬家前和這最好的朋友聚了。熟知再次的碰面，竟是如此情境。 在那傳統價值社會中，離婚是多大的勇氣與決心。  「走！剛好我明天要上山露營，回去準備一下。」 他沒多問，拎了趙一同出行。  重機越過重重山嶺，午後三時抵班公錯。遠離遊客聚集的區域，挑了塊平坦的湖畔。 搭完帳、放了裝備，兩人沿湖畔緩行。  刺眼的陽光慢慢變得可愛，柔和的光線灑落山頭湖面，天空變得更加湛藍。  他什麼也沒多說、多問。就在湖畔、看著書、放著她飛翔。 人從頭都只需要坐於一棵樹下，需要一片海與一個岸，如此而已。  ⋯⋯  回到帳篷、生起火、煮食咖哩；食畢，再來杯奶茶。 趙有說不完的話，卻不知從何開口。 他傾聽著，即使無語。  山對班公錯說，你那麼美，該生到城市去，讓人們親近。 天對班公錯說，你那麼廣大，該長到平原去，灌溉萬物。 班公錯靜靜地不應答。 你們不懂的是，因為我在這，才能那麼廣大、那麼美。  「相信很多人說了，他們認為的應該如何這般⋯ 「但，這是你的人生啊，該活得是你想要的應該。」  朋友一場⋯  「無論如何，我挺你。 「這並不代表我認同你，或你是對的。 「不過，做自己從來就不是不對的事。」  ","version":"Next","tagName":"h3"},{"title":"...​","type":1,"pageTitle":"三個傻瓜．班公錯 Pangong Tso","url":"/backpacker/india/essays_pangong-tso/#-2","content":"     三個傻瓜 一種傻勁，一種堅持，不是真傻，只是不被所認同。    北北印-藏魂的棲息地 from +N Studio on Vimeo. ","version":"Next","tagName":"h3"},{"title":"裂．晨","type":0,"sectionRef":"#","url":"/backpacker/india/essays_leh/","content":"裂．晨 夜半 一如往常，男人爬下床。 家還在睡，燈還暗著。熟捻地走向廚房倒了杯溫開水，邊轉開水龍頭，裝滿了一漱口杯。 咬著牙刷走向餐桌、開了燈、翻出筆記本、打開筆電，把昨天未竟的工作檢視了一遍，重新調整排定今日項目。 盥洗畢、檢視完今日清單、換上運動鞋。4:30 的鬧鐘響起，有預警地隨手按掉。 「走吧，出門跑跑。」對著家犬說。 天還魚肚白⋯ 夜半 一如往常，女人爬下床。 走向桌案待了一會、再移到沙發上窩著一陣、仍回到床鋪。遊走各方卻遍尋不著足以歇息的感受。 家還沒睡，燈卻暗著。 失眠著，抱了筆電蜷曲於沙發一角，該處理的工作未能動手完成。 天漸亮，太陽漸昇。窗外山頭染紅、披金，爾後泛黃。 望著窗頭晃神著，勞累感湧上，生理心理皆然。 「來吧，陪我睡覺。」對著家貓說。 陽光已普照大地。 列城，喀什米爾高原上，海拔 3,500m 的小城鎮。 有人說它是絲路進入印度平原的重要關卡； 有人說這兒存在最純正的藏傳佛教傳統； 有人說，這就是天堂。 清晨，一樣的日出下醒著的人，各自進展分裂的故事。 山，仍在那，牛脾氣著環繞列城。 你可以推開所有人，然你移不了它。","keywords":"","version":"Next"},{"title":"2013.01.17 ~ 01.30 印度 不思議","type":0,"sectionRef":"#","url":"/backpacker/india/index_incredible-india/","content":"","keywords":"","version":"Next"},{"title":"schedule / 行程記錄​","type":1,"pageTitle":"2013.01.17 ~ 01.30 印度 不思議","url":"/backpacker/india/index_incredible-india/#schedule--行程記錄","content":" 01.17 taipei -&gt; singapore 牛在囧途 - 也是旅行的一部分 01.18 singapore01.19 singapore -&gt; udaipur 牛在囧途 - 烏代浦爾機場炸彈客事件 01.20 udaipur01.21 udaipur -&gt; jodhpur01.22 jodhpur01.23 jaipur01.24 jaipur -&gt; agra01.25 agra01.26 agra01.27 kumbh mela01.28 varanassi01.29 varanassi  ","version":"Next","tagName":"h3"},{"title":"spot / 景點介紹​","type":1,"pageTitle":"2013.01.17 ~ 01.30 印度 不思議","url":"/backpacker/india/index_incredible-india/#spot--景點介紹","content":" 久德浦爾 jodhpur Mehrangarh Fort 梅堡 Moti Mahal - The Pearl Palace 珍珠宮  ","version":"Next","tagName":"h3"},{"title":"note / 雜記小文​","type":1,"pageTitle":"2013.01.17 ~ 01.30 印度 不思議","url":"/backpacker/india/index_incredible-india/#note--雜記小文","content":" 黑暗騎士．黎明升起 ","version":"Next","tagName":"h3"},{"title":"[Jodhpur] Moti Mahal - The Pearl Palace, Mehrangarh Fort, 梅堡．珍珠宮","type":0,"sectionRef":"#","url":"/backpacker/india/jodhpur_moti-mahal/","content":"[Jodhpur] Moti Mahal - The Pearl Palace, Mehrangarh Fort, 梅堡．珍珠宮 興建於十六世紀 (1595–1619) 是梅蘭加爾堡最古老的廳房，當時作為會議廳使用。 相傳拱門上面的5座大型壁竈其實是一處秘密陽台，是為了讓皇后儐妃可以坐在這裡安靜聆聽會議討論的地方。 興建時石灰岩泥混入壓碎的貝殼，壁面產生珍珠般的光澤而得名： 而彩色玻璃窗戶經由陽光照射，為室內增加許多色彩。 因著印度王朝落沒，梅堡保留的過往皇家壯麗歷史，成了遊客品足空間。 陽光曜曜，窗花繽紛，鮮豔光影在地上遊走， 躲在秘密陽台上的嬪妃，不再聽到國是會議的討論，是導覽的介紹中穿插著快門聲。 ref Mehrangarh Fort - Wikipedia, the free encyclopediaMoti Mahal | The Pearl Palace , Mehrangarh Fort, Jodhpur瘋印度(一) - 印象主義畫室Incredible India(8) - 藍色城市久德浦Jodhapur @ 獨眼小魚的獨白","keywords":"","version":"Next"},{"title":"[牛在囧途] 也是旅行的一部分","type":0,"sectionRef":"#","url":"/backpacker/india/orz_its-travel/","content":"[牛在囧途] 也是旅行的一部分 飛機被拖離閘門後，機長廣播了一串訊息，沒怎麼仔細聽，不外乎歡迎搭乘，本班機幾點從哪裡出發，預計幾點抵達...等。 滑行一會後停了下來，猜想是在排隊等候起飛吧，打了個盹～ 好一會兒飛機沒動靜，正好奇今天航班那麼多，飛機又開始滑行，機長也廣播。該是要起飛了吧，恍神著如此猜想。 &quot;... We are sorry that we must back to Taipei... The Singapore airport is not allow for our landding...&quot; 只見飛機繞行了起飛跑道外圍一圈後，回到 A1 gate. 「我回來了，唷乎～」 「？？發生什麼事？」 「剛在打瞌睡沒仔細聽，新加坡不能降落，可能是天氣吧」 「那怎麼辦？要等唷？」 「嗯，等待中～」 「呵，有點傻眼」 「哈，這也是旅行的一部分！」 旅途中總有插曲，不會完全照劇本、行程走；旅程中總有意外，花冤枉錢、時間都在所難免。 除了看看不同的風景、感受不同的文化外，在陌生的環境打理自己、處理事情也相當重要。 有趣的是，回顧旅程，往往印象最深刻，就是那些插曲和意外！ 插曲、意外，都是旅行的一部分。樂觀面對、細心處理。 最近的幾次搭機： 馬祖行搭上了飛機後，空等了好一會兒確定馬祖機場仍關閉中，航班取消後下機； 大阪到東京，已經抵達在空中排旋，最後確認氣象太差無法降落，原機飛回大阪； 這次繞行機場一圈，等了半個多小時後，順利起飛！ &quot;Ladies and gentleman, we are glad to tell you we will takeoff, please back to your seat, and check your seatbelt... We will arrival Singapore at 8:15 tonight, sorry for delay...&quot; 八點十五到新加坡，捷運應該還來得及搭乘。 這旅程，會漸入佳境！ 「如果有機會上網要記得報一下平安喔」 「我如果有豔遇，不小心把威而鋼用完，也會上網求助的！」","keywords":"","version":"Next"},{"title":"黑暗騎士．黎明升起","type":0,"sectionRef":"#","url":"/backpacker/india/note_dark-knight-rises/","content":"黑暗騎士．黎明升起 在黑暗騎士．黎明升起中，蝙蝠俠被囚禁的水井地牢，「月亮水井！」 直覺認了出來，那兒太有味道、太具特色。 又見到布魯斯·韋恩爬出水井後，寬闊的荒原、高聳的城牆、藍色的城市。 「梅堡」、「藍城．久德浦爾」 一趟印度行，擴展了許多視野。 那兒和過去曾旅行過的國家都不同，有著獨特的魅力，令人深深著迷的國度！ 印度雖詳盡計畫，一路上充滿許多未知數，時刻都有探險的感覺～ 想起朋友在沖繩旅行後回來分享的許多經歷，尤以迷路時、計畫有變時的趣事為勝。 一直很喜歡在旅行中的迷路，事實上也時常在旅行中迷路～ 許多令人難忘的經歷都發生在未知的迷路途中，謹慎地應變著，卻更用心地體會了那國度。 走過，海闊天空。 一如黑暗騎士，終將等到黎明到來～ 關於背包客，我想說...迷路沒那麼可怕，我們可以藉此探找出意外的風景， 錯過了火車，就是和這城市多幾小時緣份， 那麼多的不可預測和但是，教會我在許多挫折中要求自己冷靜和應變， 在旅行中，的確能使人成長與獨立， 旅行以各樣不同的考驗把我們的年輕釀成一壺醇美的佳釀， 我們用腳步和雙眼記錄了許多當下，創造了生命裡多少可愛的詩篇， 也藉由旅行發現了許多不同面貌的自己，把自己延展地那樣溫柔又堅定， 更懂得珍惜當下與所擁有的生活， 若你問我自助旅行浪漫嗎？ 是的， 又苦又浪漫。","keywords":"","version":"Next"},{"title":"[牛在囧途] 烏代浦爾機場炸彈客事件","type":0,"sectionRef":"#","url":"/backpacker/india/orz_udaipur-airport/","content":"[牛在囧途] 烏代浦爾機場炸彈客事件 白城．烏代浦爾 (udaipur) 是本趟旅程的第一站。 從新加坡飛海得拉巴 (Hyderabad) 再經孟買轉機，到烏代浦爾時已是下午三四點了。 在海得拉巴邂逅了一個小女孩～ 在孟買享用了印度的第一餐、也遇到飛機延誤起飛～ 總算到達烏代浦爾後，一行人推了推車、拿領了行李。 依團長準備的旅遊指南表示，進市區一律在機場外頭買預付計程車券(prepaid taxi)。 因我勝任本團翻譯蟲角色，在娜美和喬巴要去買計程車券時，被拉著一起去。 把推車和行李留給同行伙伴後，跟著去購買計程車券～ 出機場後左轉即可看到有個櫃台貼著 prepaid taxi 的資訊，價錢固定。 我們一團共五人，需要租兩輛車。買完票後就有計程車司機帶著我們到他車上放行李。 行李放完後發現外套不見了，似乎跟著買票時沒有交代清楚，旅伴們沒有注意到我的外套。 於是我走回機場詢問。 要進機場時就被衛兵攔下，說已經沒有班機機場關閉了。 解釋著外套忘在機場，需要進去找，仍不肯放行。 討論中來了另一個人，沒穿軍裝，看來似乎是機場職員。 聽完雙方敘述後，劈頭就問：為什麼要把衣服留在機場！口氣頗兇！ 我又和緩地重新解釋，我如何把推車交給朋友、然後離開機場去買計程車票... （OS: 什麼為什麼？不就是忘記咩～你以為我想喔～） 最後他問我外套顏色和特徵、裡面有什麼東西等等，然後走房間裡拿了我的外套出來。 這時我才知道原來外套已經被搜過～ 原來我的外套引起了一陣小小混亂～ 在印度火車站剛歷經炸彈攻擊不久後，一件不小心遺忘在機場大廳的外套都會引起恐慌～ 還好我沒被當成炸彈客，才剛到印度就被逮捕！ 印度旅，有個奇妙的開始～","keywords":"","version":"Next"},{"title":"2010.07.01 ~ 07.16 義大利假期","type":0,"sectionRef":"#","url":"/backpacker/italy/index_italy-holiday/","content":"","keywords":"","version":"Next"},{"title":"schedule / 行程記錄​","type":1,"pageTitle":"2010.07.01 ~ 07.16 義大利假期","url":"/backpacker/italy/index_italy-holiday/#schedule--行程記錄","content":" Hello, italy07.01 Thu, Rome, Italy:07.02 Fri, Vaticanae:07.03 Sat, Rome holiday:07.04 Sun, Bike around Rome:07.05 Mon, Rome -&gt; Venice:07.06 Tue, Burano, Venice:07.07 Wed, Venice:07.08 Thu, Venice -&gt; Milan:07.09 Fri, Milan,Italy to Gdansk,Poland: 米蘭機場 廉價航空初體驗 07.14 Wed, Gdansk, Poland -&gt; Rome, Italy -&gt; Amalfi:07.15 Thu, Amalfi -&gt; Rome -&gt; Taipei, Taiwan:  ","version":"Next","tagName":"h3"},{"title":"spot / 景點介紹​","type":1,"pageTitle":"2010.07.01 ~ 07.16 義大利假期","url":"/backpacker/italy/index_italy-holiday/#spot--景點介紹","content":" 羅馬： 花市廣場 Campo de fiori 威尼斯：米蘭：南義： 維蘇威火山  ","version":"Next","tagName":"h3"},{"title":"note / 雜記小文​","type":1,"pageTitle":"2010.07.01 ~ 07.16 義大利假期","url":"/backpacker/italy/index_italy-holiday/#note--雜記小文","content":"","version":"Next","tagName":"h3"},{"title":"[南義] Vesuvius 維蘇威火山","type":0,"sectionRef":"#","url":"/backpacker/italy/napoli_vesuvius/","content":"[南義] Vesuvius 維蘇威火山 維蘇威火山為歐洲大陸唯一的活火山，在西元 79 年的大噴發中，深達六公尺的火山灰把龐貝城活埋。近代對龐貝古城的挖掘考察讓曾經繁華的龐貝漸現光明，也逐步還原當時火山爆發的災難。 會在此拍照取景純屬意外。迷路整晚後我們從阿瑪菲旁山路鑽出去，在山頂時看到陽光斜印，當下找了個視野廣闊的路邊停車拍照休息。卻在回國整理相片時才發現，我們眼前的就是維蘇威火山。 網路上維蘇威火山的相片，大多從山腳或港邊拍攝，方向和角度皆不同。 這張意外成為少見的取景角度，這也是旅遊迷人的地方吧。永遠不知道下一刻會有什麼驚喜！","keywords":"","version":"Next"},{"title":"Lonely Planet","type":0,"sectionRef":"#","url":"/backpacker/Lonely Planet/","content":"Lonely Planet","keywords":"","version":"Next"},{"title":"[羅馬] Campo de fiori 花市廣場","type":0,"sectionRef":"#","url":"/backpacker/italy/roma_campo-de-fiori/","content":"[羅馬] Campo de fiori 花市廣場 市場有什麼好逛的？ 小時候不太喜歡去市場，覺得髒亂吵雜，跟媽媽走在一起還得忍受許多伯伯阿姨摸頭。 （我知道你認識我媽媽，但我不認識你阿！） 市場有什麼好逛的？ 長大後卻很愛往市場跑，覺得很親切、有生氣。 即使是小小的台灣，各地市場都有其不同特色，從擺販商品種類、攤商叫賣方式，各自獨特。 市場是最能反映該地生活的地方。 喜歡傳統市場，甚至曾在那辦了外拍。 一些友人在一旁拍照，我則和老闆聊天並大啖春捲、魯肉飯。回頭當時作品，也是懷念。 羅馬第三天，租了機車假掰地享受著羅馬假期，走訪了不少地方，包括花市廣場。 花市廣場離知名的納佛那廣場只有十分鐘步行距離，是個旅行團鮮少安排、自助旅人卻不會錯過的地方。 從古羅馬時期一直到西元十五世紀，這個地方一直沒有被開發 但他附近的街道，卻讓他成為商業的中心點，西元十七世紀時，在他附近的街道有 Via dei Balestrari(crossbow-makers十字弓製造)、Via dei Baullari(coffer-makers咖啡製造) Via dei Cappellari(hat-makers帽子製造)、Via dei Chaivari(key-makers鑰匙製造) 以及Via dei Giubbonari(tailors裁縫師)等等 到教宗思道四世 Pope Sixtus IV 建造了 Via Florea 跟 Via Pellegrino 以後 這個廣場成為通往梵蒂岡必經的地方，那時才出現現今花市廣場的雛型 + Ciao！ Italy！！ Day 3 -- 花市廣場、納佛那廣場、四河噴泉 + | Asphodel Fields 這個露天市集在文藝復興時期是個花市，後來還曾是刑場。 廣場中央的雕像是哲學家布魯諾 Giordano Bruno。布魯諾主張地動說，認為自然界至高無上的觀點，被羅馬教廷視為異教徒，遭囚禁八年後在花市廣場處火刑。 和許多市場一樣，蔬果、食材、日常用品、雜貨都有，倒是不見魚、肉等鮮食攤販，也聞不到腥味。 和台灣市場最大的差異該是在地面相當乾淨，商品擺設整齊有藝術感。 而飲食文化不同，販售的商品也和台灣略有不同。各式義大利麵、調味罐，多是台灣少見的。 先吸引我們的是餐具攤，我們都在這兒買了摩卡壺。 義大利不愧以濃縮咖啡聞名，相關器具多樣且便宜。考慮旅程才剛開始而沒帶乳牛摩卡壺，回國後有些後悔,台灣的價位貴上一倍啊！ 尼尼他們買了小番茄，同時我和捨捨被一旁酒攤吸引著。 這攤有相當多不同調味的自釀酒，其實很想全部掃回，這些在台灣難得一見啊！ 我們在這小市集待了好久，欣賞當地人如何討價價，如何挑選商品。 離開時一行人帶了三個摩卡壺、好幾瓶酒、還有些小紀念品。 戰利品拿回旅社，下午返回花市廣場，隨意挑間咖啡館，和一群老外看著世足賽，為各自支持球隊喊聲加油，偶爾玩笑地相互叫囂。 市場有什麼好逛的？ 市場是當地日常生活型態的濃縮。錯過市場，就錯過旅途最精彩的縮影啊！","keywords":"","version":"Next"},{"title":"Ready to Halo","type":0,"sectionRef":"#","url":"/backpacker/italy/note_ready-2-halo/","content":"","keywords":"","version":"Next"},{"title":"schedule plan​","type":1,"pageTitle":"Ready to Halo","url":"/backpacker/italy/note_ready-2-halo/#schedule-plan","content":" 2010.07.01 Day1 Thu. Rome, Italy. Fontana di Trevi 2010.07.02 Day2 Fri. Rome, Italy. Vatican &amp; Saint Peter's SquareMusei VaticaniSt Peter's BasilicaCapella SistinaCastel Sant' Angelo 2010.07.03 Day3 Sat. Rome,Italy. Campo de' FioriSan Pietro in VincoliPantheonPiazza Navona, Fontana dei Quattro FiumiPiazza Del PopoloPiazza Barberina 2010.07.04 Day4 Sun. Rome,Italy. ColosseoTerme di Caracalla 2010.07.05 Day5 Mon. Rome to Venice,Italy. Piazza di SpagnaGondolaPiazza San Marco 2010.07.06 Day6 Tue. Venice,Italy. Burano 2010.07.07 Day7 Wed. Venice,Italy. Piazza San Marco 2010.07.08 Day8 Thu. Milan,Italy. Milan DuomoSanta Maria delle Grazie 2010.07.09 Day9 Fri. Milan,Italy to Gdansk,Poland.2010.07.10 Day10 Sat. Gdansk,Poland.2010.07.11 Day11 Sun. Gdansk to Sopot,Poland.2010.07.12 Day12 Mon. Sopot to Warsaw,Poland.2010.07.13 Day13 Tue. Warsaw to Gdansk,Poland.2010.07.14 Day14 Wed. Gdansk,Poland to Rome,Italy.2010.07.15 Day15 Thu. Rome,Italy to Taiwan R.O.C. ","version":"Next","tagName":"h2"},{"title":"14.11.26 日光，你好！","type":0,"sectionRef":"#","url":"/backpacker/mt-fuji-marathon/halo-nikko/","content":"14.11.26 日光，你好！ 得知為了富士山馬前往日本旅行時，賊董和 Kido 也在日本。 對過彼此時間後，他們倆決定更改名古屋後半段行程，相約東京碰頭。 喜歡一個人旅行，也喜歡中途遇到老朋友。 這次搭乘香草航空，在台地勤由長榮支援。 撿便宜挑了紅眼航班，反正接下來行程都很寬鬆～ 七點多就到日本，搭 Nex 進東京車站等待賊董和 Kido。 東京車站地下街之大，商店、美食街林立，吸引我的仍是某酒攤～ 獺祭二割三，曾聽聞賊董、寒月談過，這兒滿滿一櫃，但產量有限一人現購一瓶。 （帶了兩瓶回台灣，一瓶送人、一瓶跨年夜開…） 東京車站會合後，到淺草購買東武日光周遊套票，在淺草商店街用餐、買了點心後搭車前往日光。 這天天氣不好，綿綿陰雨不停，所幸多在交通移動中，影響不大。 我們將在日光待上三天兩夜，有機會走訪較遠的地區， 網路上多是建議購買周遊套票，可以無限搭乘公車，否則公車費不便宜。 後來證明的確如此，三天來公車的費用就高於四日券套票的費用了。 在日光兩夜都住在東觀莊，這是個傳統日式溫泉旅社，位於世界遺產東照宮附近。 進房、行李扔一旁，盤坐在茶几旁泡茶配點心，一整天的移動有些疲累。 東京到日光 2.5hr 的車程，時間不長。但通勤電車的椅座直挺挺，久坐很不舒服。 下次來訪，該會加價 Express 快急運費，時間上省了一小時，乘坐舒適上提升不少。 東觀莊房價因餐點內容有所不同，預定時擔心太晚到趕不上晚餐，第一晚沒有預定晚餐。 問了旅館人員，拿了地圖，上街覓食。 這天星期三，不知為何，街上許多店家都沒開。繞了一會，選擇不多，隨便挑間就進去了。 入門一看，橋面貼滿便條紙、名片、各國紙鈔，寫著顧客留言、塗鴉，便利貼版的海之冰。 招牌似乎是炒麵，點了白飯配串燒、炒麵的組合，好吃、很有飽足感。 那炒麵和串燒，真適合來杯啤酒。因為晚上要回房裡喝酒，沒叫啤酒配，想想有些後悔。 回到旅館，床鋪已經撲好了，陸續下樓洗澡泡湯。 深夜，坐在窗邊一同喝酒，各自上網、看書。 日本行第一天，什麼也沒做，慢慢地，很享受～","keywords":"","version":"Next"},{"title":"2014.11.26 - 12.04 富士山馬拉松","type":0,"sectionRef":"#","url":"/backpacker/mt-fuji-marathon/index_fujisan-marathon/","content":"","keywords":"","version":"Next"},{"title":"schedule / 行程記錄​","type":1,"pageTitle":"2014.11.26 - 12.04 富士山馬拉松","url":"/backpacker/mt-fuji-marathon/index_fujisan-marathon/#schedule--行程記錄","content":" 11.26 Taipei -&gt; Tokyo -&gt; 日光11.27 中禪寺湖、湯元溫泉11.28 日光 東照宮 -&gt; 東京11.29 東京 -&gt; 河口湖: 富士山馬拉松報到11.30 富士山馬拉松 3th Mt.Fuji marathon12.01 河口湖 -&gt; 東京 -&gt; 橫濱 -&gt; 東京12.02 東京12.03 東京12.04 東京12.04 Tokyo -&gt; Taipei  ","version":"Next","tagName":"h3"},{"title":"spot / 景點介紹​","type":1,"pageTitle":"2014.11.26 - 12.04 富士山馬拉松","url":"/backpacker/mt-fuji-marathon/index_fujisan-marathon/#spot--景點介紹","content":" 日光、河口湖、東京．住宿經驗  ","version":"Next","tagName":"h3"},{"title":"note / 雜記小文​","type":1,"pageTitle":"2014.11.26 - 12.04 富士山馬拉松","url":"/backpacker/mt-fuji-marathon/index_fujisan-marathon/#note--雜記小文","content":"","version":"Next","tagName":"h3"},{"title":"index","type":0,"sectionRef":"#","url":"/backpacker/mt-tsurugi-dake/","content":"index","keywords":"","version":"Next"},{"title":"index","type":0,"sectionRef":"#","url":"/backpacker/nagoya/","content":"index","keywords":"","version":"Next"},{"title":"index","type":0,"sectionRef":"#","url":"/backpacker/paul/","content":"index","keywords":"","version":"Next"},{"title":"Cooking a trip","type":0,"sectionRef":"#","url":"/backpacker/piwiw/Cook a trip/","content":"","keywords":"","version":"Next"},{"title":"Reference​","type":1,"pageTitle":"Cooking a trip","url":"/backpacker/piwiw/Cook a trip/#reference","content":" 如何用 Trello 規劃自助旅行？我的 Trello 行程計畫使用技巧教學 ","version":"Next","tagName":"h2"},{"title":"2014 冬 日光、河口湖、東京．住宿經驗","type":0,"sectionRef":"#","url":"/backpacker/mt-fuji-marathon/note_lodge-tokyo-2014/","content":"","keywords":"","version":"Next"},{"title":"日光 東觀莊​","type":1,"pageTitle":"2014 冬 日光、河口湖、東京．住宿經驗","url":"/backpacker/mt-fuji-marathon/note_lodge-tokyo-2014/#日光-東觀莊","content":" 和風式旅館是建立在世界遺產．日光山境內中．仙臺伊達公別墅古蹟的位置上，是個有來歷的旅館。 四周環繞著歷史古蹟的建築物，隨著四季變換的景觀，來療癒你平日疲憊的身心。    決定去日光玩個三天後就開始查相關住宿，初步找到多是位於總合會館附近的新興溫泉旅館。 賊董傳了個東觀莊的心得文當參考，看完後就決定是他了，就愛這種老靈魂。  入住東觀莊，有種日劇或漫畫裡頭的場景感覺，旅人刻板印象中的「日本味」。 「住在世界遺產中，彷彿自己也成遺產的一部分了…」我說。    和式房隔成兩個活動區，剛進房時房間放了茶几，盤坐著喝杯熱茶，舒坦～ 晚餐時旅館人員會幫忙鋪床墊、棉被，餐後回房已經是溫暖的臥室了。      一間房最多可入住四人，依人數多寡收費。價位有分素泊、一泊一食（早餐）、一泊二食等。 貼心的是，我們連住了兩晚，兩天的早餐是不同的。  【日光】東觀莊 @ NONOMAMA‧飲食生活日光東觀莊 @ JustD的人文旅記日光東觀莊 @ 阿偉的秘密基地  ","version":"Next","tagName":"h3"},{"title":"Kouyoudai Camp Village​","type":1,"pageTitle":"2014 冬 日光、河口湖、東京．住宿經驗","url":"/backpacker/mt-fuji-marathon/note_lodge-tokyo-2014/#kouyoudai-camp-village","content":" 錯過在第一時間報名富士山馬，意味著鄰近、價位合理的旅館早就被訂滿了。 賽事前一晚河口湖附近只剩下上萬元的溫泉旅社，一個人實在花不下去啊～ 找著找著，最後找到了離會場 10K，位於西湖的露營區。    紅葉台露營區就在富士山馬路線 32K 旁，最壞打算是富士山馬當天提早跑步過去。 老闆英文不好，但客氣好客。登記入房時就拿了咖啡、水果、餅乾請我吃。  我問隔天要去跑富士山馬拉松，有沒有公車，老闆則說會載我過去會場，真棒！ 後來幾個看來是長住在這兒的年輕人回來，他們隔天也要去跑富士山馬， 或許因為如此順道載我前往，但老闆夫婦的熱情令人很舒服。    入住時老闆問了我有沒有準備食物，並告知鄰近可以用餐的地方，他們也可以提供。 我懶，就讓他們幫忙準備，沒想到意外豐盛，配了啤酒吃得很暢快啊！      西湖周圍有許多露營區，真的覺得在西湖露營好舒服！ 若有機會再來富士山走走，白天在河口湖玩耍，傍晚在西湖畔露營，愜意！  ","version":"Next","tagName":"h3"},{"title":"K's House Mt.Fuji​","type":1,"pageTitle":"2014 冬 日光、河口湖、東京．住宿經驗","url":"/backpacker/mt-fuji-marathon/note_lodge-tokyo-2014/#ks-house-mtfuji","content":" 原定在河口湖多待一天，更仔細地漫遊富士山與河口湖地區，好好欣賞景致。 果然賽事結束後的住宿很好找，許多鄰近的旅社都有空房。 畢竟隻身一隻，仍首選背包客棧。  多年榮獲 Hostel 相關評價獎項的 Ks' House 就不用多介紹了。  當天，K's House 幾乎被台灣來的跑者佔領了。 據說前一晚床位早在富士山馬開始報名後就被搶光了，當天早上不少跑友結隊一起前往會場。  同寢的室友也是前一晚找不到住宿，被迫享受了豪華溫泉旅社。 相約一同用餐、開慶功宴，跑馬時還彼此不認識，完賽後湊一塊喝酒； 跑馬、旅行就是有這種魔力。  ","version":"Next","tagName":"h3"},{"title":"Factory Roof-Top!​","type":1,"pageTitle":"2014 冬 日光、河口湖、東京．住宿經驗","url":"/backpacker/mt-fuji-marathon/note_lodge-tokyo-2014/#factory-roof-top","content":" 「這次打算在 Airbnb 上找住宿…」和朋友在桃源谷散步邊聊著富士山馬拉松行程，突然的靈光閃現。    本來是自己的個人旅程，看了不同於背包客棧的客房。後因賊董加入，找了更有趣的房間。 在 Airbnb 上第一眼喵到這房間就很愛，喜歡有個性的房型遠勝於複製貼上的商務旅社。  進一步看其他相片時被露台給吸引住了，幻想著晚上在陽台上嗑著串燒配著酒，完美！ 本還猶豫著位置並不在市中心，但交通方式還方便，價位亦可接受，就他了。    房間相當整潔乾淨，和 Airbnb 上的相片一樣，很有個性、味道。 房間外的露台仍是大加分，但已經開始入冬，在外頭待不久。 窩在外頭嗑串燒配啤酒，只是自己美好的幻想啊。期待有機會春末到秋初再訪…  民宿位於葛飾區京成立石站附近，車站外是傳統商店街，賊董說曾看過節目介紹。 也因碰巧住在這兒，有個機會去龜有站走走，來個烏龍派出所小旅行～  在 Airbnb 上訂房的初體驗，結束後可以給屋主評論，也收到屋給的評價。 很不錯的體驗、很棒的服務，為何台灣不積極開放呢？ ","version":"Next","tagName":"h3"},{"title":"index","type":0,"sectionRef":"#","url":"/backpacker/nara-marathon/","content":"index","keywords":"","version":"Next"},{"title":"A patagonia a week","type":0,"sectionRef":"#","url":"/backpacker/piwiw/Way 2 Patagonia/","content":"","keywords":"","version":"Next"},{"title":"續​","type":1,"pageTitle":"A patagonia a week","url":"/backpacker/piwiw/Way 2 Patagonia/#續","content":" 第一篇的 A Patagonia a week, 以目錄開始吧.  每週找一條 patagonia 山區健行路線來研究與介紹. 2017 年的自我要求, 2018 年的準備功課. 陸續更新整理到這篇來.  巴塔哥尼亞巴塔哥尼亞一般是指南美洲安第斯山脈以東，科羅拉多河以南的地區；主要位在阿根廷境內，小部分則屬於智利。 該地區的地形主要是一千公尺上下的高原以及窄小的海岸平原為主，各河流發源於安地斯山，向東流入大西洋，切割成河谷，但因當地雨量不多，河流大多屬於間歇河，南部有許多冰河地形如峽灣等。  ","version":"Next","tagName":"h2"},{"title":"阿根廷​","type":1,"pageTitle":"A patagonia a week","url":"/backpacker/piwiw/Way 2 Patagonia/#阿根廷","content":" ","version":"Next","tagName":"h2"},{"title":"智利​","type":1,"pageTitle":"A patagonia a week","url":"/backpacker/piwiw/Way 2 Patagonia/#智利","content":" ","version":"Next","tagName":"h2"},{"title":"百內國家公園 Torres del Paine National Park​","type":1,"pageTitle":"A patagonia a week","url":"/backpacker/piwiw/Way 2 Patagonia/#百內國家公園-torres-del-paine-national-park","content":" [行前準備] 智利-百內國家公園 @ 和世界做朋友 - Eric &amp; Evelyn Explore The World :: 痞客邦 PIXNET ::W該怎麼寫？--百內國家公園W路線健行記 @ 休假一年，世界一圈-A year off, around the world :: 痞客邦 PIXNET ::  ","version":"Next","tagName":"h3"},{"title":"所​","type":1,"pageTitle":"A patagonia a week","url":"/backpacker/piwiw/Way 2 Patagonia/#所","content":" ","version":"Next","tagName":"h2"},{"title":"中文網誌​","type":1,"pageTitle":"A patagonia a week","url":"/backpacker/piwiw/Way 2 Patagonia/#中文網誌","content":" 登山健行的天堂 - El Chaltén - 阿根廷 中南美深度攝影及旅遊 - Leandro Cheng (專業攝影嚮導 及 旅遊嚮導)黃心遊世界 YellowSumTravel巴塔哥尼亞高原 Patagonia: 兩天健行40公里，觀賞托雷峰 &amp; Mt Fitz Roy 海拔一千多公尺的高山藍湖 【El Chalten 健行路線介紹】 - Travel with WinnyPatagonia 冰原 El Calafate / Perito Moreno 莫雷諾冰上健行 - 1 @ 背包客 妙Maggie :: 隨意窩 Xuite日誌南極日記4：傳說中的巴塔哥尼亞高原 | ATUNAS 歐都納前進基地營~全球14座八千米探險計畫REEL ROCK Film Tour Taiwan: 南半球的群山聖殿-Patagonia上的Fitz Roy健行FitzRoy的存在, 健行者的天堂El Chaltén - 巴塔哥尼亞(Patagonia)高原part22013 南美．巴塔哥尼亞之旅：再度山區健行 @ 旅行は私の人生なのだ :: 痞客邦 PIXNET ::2013/01 阿根廷Patagonia之El Bolson - 阿根廷的登山首都El Chalten @ Bergmannstr., 10961 :: 痞客邦 PIXNET ::【旅遊籽】腳踏廿萬年冰雪　冰川零距離 | 蘋果日報 | 果籽 | 旅遊 | 20150624女人三十也太陽-南美向前行: 巴塔哥尼亞「秋之禮讚」Fall's Greeting in El Chalten ","version":"Next","tagName":"h3"},{"title":"11.05.16 旅人．漂流之後","type":0,"sectionRef":"#","url":"/backpacker/sabah/after-trip/","content":"11.05.16 旅人．漂流之後 傍晚突來一場大雨，提早結束了吉隆坡轉機的一日漫遊。 本預期拍雙子星大樓夜景，雖可等這陣雨過後，但我理想畫面是湛藍色溫，而非黑夜，於焉放棄。 旅遊拍照，還是以旅遊為準吧。理想畫面可遇不可求，若連旅行品質都失去了，可真因小失大了。 怎樣也難比在地人拍得好！他們多的是機會，亦清楚最適合的拍攝點，先天條件是不公平的。 回頭想想，是該好好拍拍家鄉。在國外四處奔波之餘，也多花點時間看看台灣，這美麗寶島！ 這趟，有些感觸： 有人問「你活著的意義是什麼？」 我呢，真未曾認真想過這問題。實著說了，也還不知道該怎麼回答。 但清楚的，我會不斷地探索歷險，以期有那麼一天，答案自在燈火闌珊處。 這不是我活著的意義，但卻是我生活的方式。 《被延遲的快樂，不會產生利息 - 王文華》，一篇戚戚焉的文章，共享。 曾對心儀對象說，我對你的幻想不是性，而是幸福。 然，對我來說，幸福不單僅是情侶之間的廂廝伴守。 豪放如我，一輩子聊得來的朋友、一生的旅伴， 也許是比伴侶，更奢求、幸福的吧。 一趟旅程的結束，是下一趟旅程的開始。 這是這個月的最佳寫照，剛結束日本、馬來西亞行程，準備前往法國，做個完美句點。 旅人，漂流之後，還是漂流","keywords":"","version":"Next"},{"title":"index","type":0,"sectionRef":"#","url":"/backpacker/praha-budapest/","content":"index","keywords":"","version":"Next"},{"title":"2011.05.13 ~ 05.16 馬來背包客","type":0,"sectionRef":"#","url":"/backpacker/sabah/index_backpacker-in-sabah/","content":"","keywords":"","version":"Next"},{"title":"schedule / 行程記錄​","type":1,"pageTitle":"2011.05.13 ~ 05.16 馬來背包客","url":"/backpacker/sabah/index_backpacker-in-sabah/#schedule--行程記錄","content":" [[note_plan-for-sabah-2011:行前準備]05.11 台北 &gt; 沙巴 &gt; 背包客棧 護照過期 05.12 沙巴街區市場探索05.13 沙比島、馬努干島雙島浮潛05.14 沙巴 &gt; 吉隆坡 旅人，漂流之後trip by AirAsia 2011  ","version":"Next","tagName":"h3"},{"title":"spot / 景點介紹​","type":1,"pageTitle":"2011.05.13 ~ 05.16 馬來背包客","url":"/backpacker/sabah/index_backpacker-in-sabah/#spot--景點介紹","content":" 市集：果菜市場 / 中央市場 / 魚市場 /菲律賓夜市 /手工藝市場吉隆坡：唐人街  ","version":"Next","tagName":"h3"},{"title":"note / 雜記小文​","type":1,"pageTitle":"2011.05.13 ~ 05.16 馬來背包客","url":"/backpacker/sabah/index_backpacker-in-sabah/#note--雜記小文","content":" 暮光日落時分童顏 ","version":"Next","tagName":"h3"},{"title":"[吉隆坡] Petaling Street 唐人街","type":0,"sectionRef":"#","url":"/backpacker/sabah/kuala-lumpur_petaling-street/","content":"[吉隆坡] Petaling Street 唐人街 吉隆坡是個新舊混雜的城區，有著曾是世界最高大樓的雙子星塔，而不遠的老城區也還保留許多歷史悠久建築。位於老城區的茨廠街為吉隆坡的「中國城、唐人街」，街巷不寬、店鋪一家緊鄰一家開，很「標準」的華人市場風格。 前往華人街的道路上，有著一排彩色建築的街道，很喜歡這樣的「各自表率」 在波蘭、義大利常可看到這般家家戶戶顏色皆不同的街道。而台灣較常見的樓房建築幾乎都是相同的顏色，以鐵窗和鐵捲門顏色造型不同來區分；而新建的大樓更是家家戶戶長得一模一樣，毫無特色。 這區建築接近台灣早期的洋樓，長條屋舍配上立面、磚造牆柱、騎樓。 門面顏色、建材和裝飾則和台灣不同，台灣許多老街常看到日據時期遺留下來的「日治仿巴洛克風格建築」，立面華麗綴飾，配上花、葉、果實的雕刻。這裡的立面沒有那些裝飾，俐落線條和粉彩顏色的組合取而代之。 朋友猜測該是「折衷主義」建築，考量馬來西亞曾在十八至二十世紀被英國統治的歷史背景，可能性很大。 文化，是基於歷史發展而形成的！","keywords":"","version":"Next"},{"title":"行前準備","type":0,"sectionRef":"#","url":"/backpacker/sabah/note_plan-for-sabah-2011/","content":"行前準備 這篇行前準備其實是後續邊回顧邊整理而成。事實上對於這短短三天半的沙巴行，和雨軒只簡單決定： 一天去海邊玩、一天在市郊逛、另一個半天就逛市區吧。 行前最多的資料收集都參考自沙巴遊及馬來西亞觀光局。 其中馬來西亞觀光局和部落客合作編寫的馬來西亞快樂出走是不錯的參考資料，雖說稍微官方了點，裡面資訊對三天的自由行來說，夠了。","keywords":"","version":"Next"},{"title":"童顏","type":0,"sectionRef":"#","url":"/backpacker/sabah/note_children-sabah-2011/","content":"童顏 一抹微笑能化解一絲尷尬、一場大笑能化解一份干戈。沒人反對「微笑是地球共通的語言」，尤其看過童稚小孩綻放的燦爛笑容，可真是世上最美麗的語言。這美麗的景致無國度、貧富之分，純真的神情和由內而發的笑顏，總令人感動。 沙巴遊第二天，炎熱午後揹著相機躲進果菜市集買了顆椰子消暑。孩童在攤架構成的城堡間嬉鬧，三不五時向我探腦一番。臉上雖滿是好奇疑問，卻無一絲不歡迎的神情。他們當然把我當外人看，幾番打量後，遊竄範圍慢慢靠近我，最後再我身旁跑來跑去，無視我的存在。我拿起相機，對著他們微笑，他們興奮地跑到鏡頭前比起手勢。 動感小帆說：「微笑著大方拿起相機，願意入境的人自然會走入鏡頭。」 孩童大方又羞澀的在鏡頭前跑入跑出，跑過來比了 Ya 後又沖沖離開，還來不及拍攝又跑開。一群孩童在身旁用著不同的語言和我嬉鬧。把相機給他們看了看，又是一陣不懂的語言及笑聲。漸漸地起初的疑惑、羞澀消逝，他們就在鏡頭前乖乖站著讓我拍攝。 善意會感染，和語言無關！ 又想起清邁行的苗族部落，一群小男孩在水池旁猜拳，輸的要跳池塘的情境。 那神情是多麼純真無念，那動作是多麼原始自然。 其實，每個男人心中，不也都住著一個永遠長不大的男孩嗎？","keywords":"","version":"Next"},{"title":"日落時分","type":0,"sectionRef":"#","url":"/backpacker/sabah/note_sunset-sabah-2011/","content":"日落時分 沙巴，美麗的夕色讓我在港口流連許久 到訪沙巴的第一個傍晚，美麗的夕色讓我在港口流連許久。 不確定當地人是否已對這樣的夕陽習以為常，卻喚醒我腦中，許多令人感動的旅行攝影作品。 忘記已經多久不曾為夕陽感動，隻身異鄉似乎特別容易為不起眼的小事動容。 或許這就是旅行迷人的地方，在自己熟悉的環境，一切都過於理所當然。 再美的天色、溫暖的陽光、有趣的小角落，放理所當然的跟前，都不值一提。 旅行，是換個角度看世界。 同樣的太陽，相連的海洋、天空，異國的月亮並沒有比較圓，但卻能給人不同的思愁。 是遠離工作的繁忙，也是環境的不熟悉，但更多的，是卸下不必要的「理所當然」 對自己生長的環境，也用同樣的心態角度，會有不同收獲吧！","keywords":"","version":"Next"},{"title":"護照過期！說好的於心不忍呢～","type":0,"sectionRef":"#","url":"/backpacker/sabah/orz_passport-expired/","content":"護照過期！說好的於心不忍呢～ 這年五月都在工作旅行，先去北海道「賑災」四天，回國休息上班一天後馬上又飛沙巴、再轉吉隆坡到法國。 接連的旅途中，最期待沙巴這些天，因為要和學妹私奔出國玩樂。 在國光客運碰頭、買完車票等候上車時，學妹說 「我昨天發現原來我的護照剩下一個多月就過期了耶～還好還沒過期～」 「！！！！！！ 「你不知道出國護照有效期限要六個月以上嗎？」 在機場客運上，我們不斷查詢相關資訊，查到的資料多是否定的； 該是輕鬆愉快的心情，突然有些低迷～ 抵機場後先前往亞航櫃台詢問，因這趟是促銷機票，無法改期。（廉價航空～） 櫃台地勤幫我們打電話給外交部駐機場辦事處，我向辦事人員說明護照有效期限不足，請求協助～ 得到的回應是個人疏失，要我們向航空公司更改航班，再去外交部更新護照。 暫時離開亞航櫃台，和學妹討論著可能方案，決定再試一次。 這次在機場服務台，和服務人員說明後，她幫我們再度打給外交部駐機場辦事處。 由學妹親自和對方談，講得快聲淚俱下，而無論我們如何說明，仍被拒絕，沒有受理這項業務！ 再回亞航櫃台詢問，櫃台仍表示該機票無法更改，倘若我們堅持，畢竟護照尚未過期，仍可給我們登機證。 而台灣和馬來西亞移民官願不願意放人，他們無法保證。 如台灣移民署不願意放人，回到原點，無法出國； 若馬來西亞移民署不願意讓你入境，遣返得額外附上一筆費用～ 「好吧，我們改搭高鐵去墾丁玩吧，大後天我再飛法國和捨捨他們會合就好～」 對我來說，一起出去玩是重點，去哪倒不重要。 學妹覺得對我不好意思，堅持要我自己去～ 而我期待已久的蜜月結夥旅行，成了一個人的背包流浪～ 圖取自：文藝憤青喵星人 之 捷運人生 某新聞事件想起了那次機場的際遇。 機場可以趕辦護照？過去親身經歷是否定的。 （傳說中的於心不忍呢？！不忍小孩單獨被留下，就忍心拆散我和學妹！！！） 因該事件而開始這項服務，個人難以高興，行政機關的準則何在？ 若這是本該存在的便民服務，之前行政人員豈不瀆職？ 若這是緊急事件的特別處理，廣開大門後遇上緊急事件該如何處理？","keywords":"","version":"Next"},{"title":"暮光","type":0,"sectionRef":"#","url":"/backpacker/sabah/note_twilight-sabah-2011/","content":"暮光 暮光燃燒了太陽 推著我浪跡天涯 暮光燦爛了晚霞 直到夜都被照亮 帶我瘋 帶我狂 看懂了 迷惘和希望 我用微笑 迎接美麗的光 我找到了 你們肯定的目光","keywords":"","version":"Next"},{"title":"[沙巴] 果菜市場","type":0,"sectionRef":"#","url":"/backpacker/sabah/sabah_market/","content":"[沙巴] 果菜市場 沙巴市區有許多知名市場：中央市場、魚市場、手工藝市場、菲律賓夜市…等。 我最愛的，是位於菲律賓市場旁的果菜市場。 果菜市場不在旅遊書籍、網站所登錄的景點，雖緊鄰菲律賓市場，但相對於菲律賓市場的熙往人來，果菜市場則是門可羅雀。而上述知名市場常見到外國遊客的蹤影，這果菜市場看來多是在地人竄動的身影。 然我卻對這不知名的果菜市場深深著迷。 午後時分，菲律賓市集正蠢蠢欲動，果菜市場卻一派悠然。孩童純真地穿梭在攤台形成的堡壘，老嫗蒼蒼地坐臥於攤架構成的高台。陽光斜照，和諧的氛圍使人忘返。","keywords":"","version":"Next"},{"title":"[沙巴] Handicraft Market 菲律賓手工藝市場","type":0,"sectionRef":"#","url":"/backpacker/sabah/sabah_handicraft-market/","content":"[沙巴] Handicraft Market 菲律賓手工藝市場 菲律賓手工藝市場位於亞庇市區海邊、菲律賓夜市旁，屬於徒步可到的市區景點。 菲律賓市場所以叫菲律賓市場，是因為這裡只允許菲律賓人擺攤。並非相當確定這說法是否為真，不過該有一定可信度吧。 鐵皮搭起來的手工藝市場，外觀刻意做了稜角以強化視覺感，很顯眼。而裡面則是相當擁擠，攤販之間約僅容兩人錯身而過的距離。賣的東西琳琅滿目，看到不少泰緬傳統手工藝品在此販賣，但以珍珠為主，幾乎每個攤位都擺了一展示台的珍珠。 關於如何挑選珍珠，魚小丸的遊記有不少值得參考的技巧。 位在中央市場隔壁的「菲律賓手工藝品市集」是搜刮各種特產、藝品的好去處,尤其是珍珠,幾乎每個攤位都可以看到以珍珠做成的各式項鍊手環,店家會強調是野生珍珠,不過購買時還是要注意品質,最好是跟懂得選購的朋友一起購買。如果只是喜歡珍珠的色澤, 市場裡多的是一條喊價美金5元的珍珠手環, 買多還可以還價, 不用因為價錢考慮品質問題; 另外, 還有一條條亮晶晶的飾品手環, 買多可以殺到一條只要RM5, 非常適合送禮自用。市場內也有以草編、藤編製作的各種手包或帽子,也有沙龍、布 匹,每一種都深具特色,適合作為送禮的選擇。 對於珍珠比較興致缺缺，而裡頭販售的其他手工藝品種類不多、精緻度也不如年初在清邁看到的那樣精采。也因接著還有法國行程，紀念品攜帶上不便。從頭到尾走了一趟竟是什麼都沒買、沒拍。 倒是市場外一排男生手工在修改衣服的景象讓我相當感興趣。 這些師傅就坐在市場外頭，低頭，腳踩著針車，雙手不斷地把衣料前推、轉彎、後拉，技巧熟捻得很。 若有機會再來沙巴，我很想拿著布料給這些師傅，請他們為因故沒能一起來的雨軒縫製件紗麗，或為多變的單片裙點綴些不同的裝飾，這是菲律賓手工藝市場最引起我購買慾的地方。 這些師傅也有趣，看到我拿著相機對著他們，於是一個個對著鏡頭搞怪。 一個認真工作的師傅，發現我在拍照後，也不禁笑了起來。這三幅相片，很平凡，卻很得我心。","keywords":"","version":"Next"},{"title":"index","type":0,"sectionRef":"#","url":"/backpacker/sichuan-yachin/","content":"index","keywords":"","version":"Next"},{"title":"[沙巴] Philippines Market 菲律賓夜市","type":0,"sectionRef":"#","url":"/backpacker/sabah/sabah_philippines-market/","content":"[沙巴] Philippines Market 菲律賓夜市 亞庇市區相當小，許多商場、市集、餐廳都相當近，散步走路可輕鬆往來的距離。有名的不夜天海鮮樓旁，即是菲律賓夜市。 早期在華人和馬來人為主的馬來西亞，菲律賓人社經上都相對弱勢。為保護與照顧菲律賓人，亞庇特地劃分一塊區域給菲律賓人營業，在這區域內只有菲律賓人可以販售商品。原本菲律賓專區主要交易對象也以菲律賓人為主，因所得低，物價相對也低廉，使得這區域以物美價廉為名。 想起另一本書看到的，似乎在義大利（不是很確定）早期教廷為了因對猶太人的敵意與輕視，僅發販售執照給猶太人，讓他們在教堂周圍販賣商品，讓人取笑。而這樣的販售執照一直傳承到現代，熱門觀光地區仍只有猶太人可以合法販售，這張執照變得相當值錢。這大概是教廷始料未及的吧！ 不確定是否現今仍限菲律賓人才可販賣，但菲律賓市場、手工藝市集、夜市已是沙巴著名觀光景點了。物價也漸漸貼近亞庇其他市集的水準，並不特別便宜。但有其特色，值得一逛。 午後菲律賓夜市的攤販就慢慢露臉了，率先營業的是冰品、飲料、蔬果攤；稍晚天氣涼爽點，生鮮魚肉攤販也越來越多；夕陽時分，整個菲律賓夜市瀰漫著烤肉香，可以現買現吃的燒烤、熟食攤位滿佈靠海的那一側。 菲律賓夜市交易最活絡的時間約為夕陽前後，許多家庭來此採購晚餐食材，也不少遊客至此買了燒烤後就近觀賞夕陽。 這裡熟食以烤雞翅、烤海鮮為大宗，各佔約三分之一的攤位面積。其他的也有自助餐、點心、餅類的食物，選擇還不少。然素食者可能會比較辛苦，除了新鮮的蔬果外，幾乎沒看到適合的食物。 我在不夜天前棧板拍了好一會的夕陽後，拉哩拉雜買了不少東西，提了回客棧用餐。 調味偏重但可接受。可惜馬來西亞這回教國家對酒管制甚嚴，酒類超貴，買不下手，否則那夜市美食真適合下酒！","keywords":"","version":"Next"},{"title":"[牛在囧途] 遙遠的斯里蘭卡","type":0,"sectionRef":"#","url":"/backpacker/srilanka/orz_far-2-srilanka/","content":"[牛在囧途] 遙遠的斯里蘭卡 加德滿都 -&gt; 德里 -&gt; 清奈 -&gt; 可倫坡 我要寫書！你從未想到的旅途囧境！ 我讓飛機已經離開 gate 了又折回，班機因我延遲了 20 分鐘！ 今天只在轉機，且轉機的狀況很有趣，尼泊爾加德滿都到印度德里，轉印度國內線到南印 chennai，再轉國際線到斯里蘭卡。 所以得入境印度再出境。入境時繳交入境資料卡，海關要求填 hotel name，我解釋了好一會沒有要在印度停留，並秀出電子機票跟登機證後，幾個海關職員討論了一會才放我入境，於是護照上多了兩個印度出入境在同一天的章。 三年前和捨捨、尼尼、米米去義大利時也曾在德里轉機，當時還只是個破爛的小機場，但如今的德里機場可真是現代化的大機場。中午就在德里機場悠哉整理相片，小小休息。 時間快到了我走去閘門準備登機，看到工作人員逢中國臉孔就問「優姬妾」？ 我拿出登機證給他看，他們在找的就是我！！！ 他劈頭就問我為何把行李留在領取處！ 「加德滿都 checkin 時，櫃台人員說會直接幫我掛轉到斯里蘭卡，我不需要在機場領取行李阿！？」 原本以為他們只是問問，了解狀況。 後來另一個職員叫我跟他走，一路邊走邊跑，從閘門、安檢站、櫃台往回跑到下機時的行李領取處， 穿過一堆工作人員限定的走道、填了一堆表格，當下覺得，「幹，德里機場也太大了吧！」 沿途帶我跑的職員一直念：you will miss the flight. 跑回到行李領取處、拿了行李後，所有安檢程序仍得照舊。 回到航空公司櫃台要 checkin 行李時，帶我走的職員變得不急不徐， the flight depart. 當下惟一的想法是，不管機票多貴，我當場買回台灣的機票，結束所有旅途！ 後來跑來了一個職員，邊講電話邊幫我把行李拖運，同時給我一張新的登機證。 行李拖運後重過安檢，那個職員叫我快！ 印度安檢特別嚴，我的登山鞋、外套跟皮帶都得脫。通過安檢後也沒時間整理， 於是就看到一隻牛一手拉著褲子、另一手抱著外套、皮帶，鞋帶也沒綁好，就這樣一路跑上飛機。 剛好，這班機我的位子幾乎是最後面，就一路被注視到我就坐，還覺得旁人在竊竊私語。 本來 2：45 起飛的班機，我坐下時剛好 45分，起飛時間是 3：05。出發前聽到機長跟大家致歉延誤，還解釋有位乘客ooxx........ Anyway, 我上機了，這篇在飛機上打的。原本候機時過於無聊，已打算上機好好睡一番，現在腎上腺素充沛，一點也沒睡意。 我有確認了一下行李拖運吊牌，確實是直接掛轉到斯里蘭卡無誤，不是我的錯阿！！！ 然後，有另一個乘客跑來和我聊天，他狀況和我一樣，不過他很早到登機閘門，所以處理的時間相當充裕。這、這、這…… --- Part 2 --- 這趟真的是經驗值大幅成長！連哀鳳打字速度都變快了！ 抵 chennai 後第一個疑問是，到底我該不該去等我的行李？ chennai 轉機時間只有一個半小時，扣掉延誤的 20 分鐘，更只有一個小時出頭。很趕！ 我決定還是去等候行李，等了十幾分鐘後第一個行李才出現。然後我很仔細看掛牌，一直到我有看到 MAA | CMB 的行李出現，才確定還是要自己領行李，就在那等候。 想當然耳，我的行李消失了！消失了～消失了～消失了～消失了～消失了～ 當下馬上問了現場職員，他說往可倫坡的行李會直接掛轉，叫我趕緊去登機，這時離班機起飛只剩 35 分鐘。 我越來越清楚所有流程，我在 15 分鐘內跑到另一個航廈、填完出境表格、跟移民官、安檢官周旋、跟印度人搶著不排隊。 我搭上飛機時離起飛還 20 分鐘，整個很好整以暇。 今天搭了三班飛機，剛好早午晚餐都在飛機上吃。早餐過的去；午餐很好吃，印度的咖哩真的棒！晚餐很簡單，但一開始就很有誠意的送上一瓶啤酒，加分！ 這篇在飛機上打，目前還不知道到底我的行李會不會出現在可倫坡，拭目以待中~也許我需要處理行李移失的狀況，突然有些興奮！ 目前為止我最慶幸的是，昨天旅館有來信詢問接機服務，我一輩子沒使用過旅館的機場接機，昨天竟答應了。（當然要自費） 不過現在看來真是正確的決定！我今天實在沒精神搭公車轉嘟嘟車到旅館了。 --- Part 3 --- 最新狀況是，我的行李來不及拖運，會隨下一班飛機到，我明天早上還得跑機場一趟領行李。 喔，本來明天是海灘放空日，現在變成公車日了。 本次旅行的第三個盧比貨幣國家，折合台幣剛好為 2:1, 3:1, 4:1","keywords":"","version":"Next"},{"title":"2013.02.19 - 02.27 微笑 斯里蘭卡","type":0,"sectionRef":"#","url":"/backpacker/srilanka/index_srilanka/","content":"","keywords":"","version":"Next"},{"title":"schedule / 行程記錄​","type":1,"pageTitle":"2013.02.19 - 02.27 微笑 斯里蘭卡","url":"/backpacker/srilanka/index_srilanka/#schedule--行程記錄","content":" 02.19 kathmandu - delhi - chinnai - colombo: 牛在囧途 - 遙遠的斯里蘭卡 02.20 colombo:02.21 galle:02.22 mirissa:02.23 mirissa:02.24 ella:02.25 ella:02.26 nuwara eliya:02.27 colombo:  ","version":"Next","tagName":"h3"},{"title":"spot / 景點介紹​","type":1,"pageTitle":"2013.02.19 - 02.27 微笑 斯里蘭卡","url":"/backpacker/srilanka/index_srilanka/#spot--景點介紹","content":" ","version":"Next","tagName":"h3"},{"title":"note / 雜記小文​","type":1,"pageTitle":"2013.02.19 - 02.27 微笑 斯里蘭卡","url":"/backpacker/srilanka/index_srilanka/#note--雜記小文","content":"","version":"Next","tagName":"h3"},{"title":"README","type":0,"sectionRef":"#","url":"/docs/","content":"README","keywords":"","version":"Next"},{"title":"2020.02.14 ~ 02.25 東北沒雪記","type":0,"sectionRef":"#","url":"/backpacker/zao/index_skiii-tohoku/","content":"","keywords":"","version":"Next"},{"title":"schedule / 行程記錄​","type":1,"pageTitle":"2020.02.14 ~ 02.25 東北沒雪記","url":"/backpacker/zao/index_skiii-tohoku/#schedule--行程記錄","content":" 02.14 Fri, TPE &gt; SDJ:02.15 Sat, 仙台 &gt; 秋田 &gt; 雪屋祭:02.16 Sun, 秋田: 雪屋祭:02.17 Mon, 旭岡山神社梵天奉納祭 &gt; 銀山溫泉:02.18 Tue, 銀山 &gt; 新潟:02.19 Wed, 新潟 &gt; 福島:02.20 Thu, 福島 &gt; 仙台:02.21 Fri, 仙台 &gt; 藏王:02.22 Sat, 藏王滑雪團:02.22 Sun, 藏王 &gt; 仙台:02.23 Mon, 仙台:02.24 Tue, 仙台:02.25 Wed, SDJ &gt; TPE:  ","version":"Next","tagName":"h3"},{"title":"spot / 景點介紹​","type":1,"pageTitle":"2020.02.14 ~ 02.25 東北沒雪記","url":"/backpacker/zao/index_skiii-tohoku/#spot--景點介紹","content":" ","version":"Next","tagName":"h3"},{"title":"note / 雜記小文​","type":1,"pageTitle":"2020.02.14 ~ 02.25 東北沒雪記","url":"/backpacker/zao/index_skiii-tohoku/#note--雜記小文","content":"","version":"Next","tagName":"h3"},{"title":"露營基礎裝備組合, 2021 Apr","type":0,"sectionRef":"#","url":"/lifehacker/equipment/camping_base/","content":"","keywords":"","version":"Next"},{"title":"帳篷​","type":1,"pageTitle":"露營基礎裝備組合, 2021 Apr","url":"/lifehacker/equipment/camping_base/#帳篷","content":" OneTigris Backwoods Bungalow Ultralight Bushcraft Shelter 2.0  TBD  LOGOS Tepee 400  TBD  三峰 藍山: 通透大空間——三峰藍山2雙尖塔體驗 - 每日頭條  ","version":"Next","tagName":"h3"},{"title":"收納箱​","type":1,"pageTitle":"露營基礎裝備組合, 2021 Apr","url":"/lifehacker/equipment/camping_base/#收納箱","content":" 本想購入 CampingBar收納箱 這類折疊收納箱。 挑個軍品色系，搭配木桌版，在方便、空間、風格間抓個平衡。 後來想想，要收納的是常備品，收納箱大多時候都是開啟狀態，能否折疊好像不重要。  幾次露營後，認同 KNOX ▲ LIVE WILD: 我們的露營進化史 所說， 該把露營器具和家用器具分開， 無須在家裡使用不見得便利的露營器具，也無須露營時使用過於笨重的家庭用具， 更無須每次露營前後在那乾坤大挪移。  合適材積的收納箱，放置六七分滿的露營裝備， 出門時整箱帶走，回家後整箱歸定位。 收納箱本身收納折疊與否，更不重要了。  考慮自己的個性，決定搞幾個紅酒箱來當露營收納箱。  兩個紅酒箱參考 スノーピークのシェルフコンテナを真似て、ランタンや焚き火道具などソロキャンプ道具を収納する頑丈コンテナの自作にチャレンジ, DIY 改造成類 SnowPeak UG-055G 的收納箱。  另一個紅酒箱預計搭加一些鐵件配件，改裝成類似 BLACK Nature 原木箱 - 合舍二一 般兩用的收納箱。  ...製作安排中...  ","version":"Next","tagName":"h3"},{"title":"露營桌​","type":1,"pageTitle":"露營基礎裝備組合, 2021 Apr","url":"/lifehacker/equipment/camping_base/#露營桌","content":" ","version":"Next","tagName":"h3"},{"title":"炊事組合​","type":1,"pageTitle":"露營基礎裝備組合, 2021 Apr","url":"/lifehacker/equipment/camping_base/#炊事組合","content":" ","version":"Next","tagName":"h3"},{"title":"Reference​","type":1,"pageTitle":"露營基礎裝備組合, 2021 Apr","url":"/lifehacker/equipment/camping_base/#reference","content":" 營火部落KNOX ▲ LIVE WILD ","version":"Next","tagName":"h3"},{"title":"隨車放風裝備組合, 2022 Aug","type":0,"sectionRef":"#","url":"/lifehacker/equipment/camping_carry-around/","content":"","keywords":"","version":"Next"},{"title":"桌椅組合​","type":1,"pageTitle":"隨車放風裝備組合, 2022 Aug","url":"/lifehacker/equipment/camping_carry-around/#桌椅組合","content":" SELPA 輕便折疊桌 / 月亮椅 Coleman 輕鬆躺椅 / CM-0499JM000 隨車一桌兩椅的組合, 不方便落地的時空, 拿把月亮椅樹蔭下呼吸, 悠活! 可以放風的環境, 躺椅配上啤酒, 舒服!  ","version":"Next","tagName":"h3"},{"title":"炊事組合​","type":1,"pageTitle":"隨車放風裝備組合, 2022 Aug","url":"/lifehacker/equipment/camping_carry-around/#炊事組合","content":" SOTO ST-310 / 折疊桌版海尼根星銀潮流套鍋  ","version":"Next","tagName":"h3"},{"title":"收納系統​","type":1,"pageTitle":"隨車放風裝備組合, 2022 Aug","url":"/lifehacker/equipment/camping_carry-around/#收納系統","content":" 海尼根星銀潮流手提收納箱   海尼根這組手提收納箱, 尺寸小巧卻恰好足以收納個人套鍋, 爐具和一些基本雜物. 打包後放於車上冰桶內, 不佔空間又能隨時取用.  ","version":"Next","tagName":"h3"},{"title":"睡眠組合​","type":1,"pageTitle":"隨車放風裝備組合, 2022 Aug","url":"/lifehacker/equipment/camping_carry-around/#睡眠組合","content":" 常備抱枕, 內含睡袋, 床單, 充氣枕頭等. 臨時放空組合, 若有必要車宿為準. ","version":"Next","tagName":"h3"},{"title":"豪華露營裝備組合, ...TBD","type":0,"sectionRef":"#","url":"/lifehacker/equipment/camping_glamping/","content":"","keywords":"","version":"Next"},{"title":"帳篷​","type":1,"pageTitle":"豪華露營裝備組合, ...TBD","url":"/lifehacker/equipment/camping_glamping/#帳篷","content":" OneTigris Backwoods Bungalow Ultralight Bushcraft Shelter 2.0  TBD  LOGOS Tepee 400  TBD  三峰 藍山: 通透大空間——三峰藍山2雙尖塔體驗 - 每日頭條  ","version":"Next","tagName":"h3"},{"title":"收納箱​","type":1,"pageTitle":"豪華露營裝備組合, ...TBD","url":"/lifehacker/equipment/camping_glamping/#收納箱","content":" 本想購入 CampingBar收納箱 這類折疊收納箱。 挑個軍品色系，搭配木桌版，在方便、空間、風格間抓個平衡。 後來想想，要收納的是常備品，收納箱大多時候都是開啟狀態，能否折疊好像不重要。  幾次露營後，認同 KNOX ▲ LIVE WILD: 我們的露營進化史 所說， 該把露營器具和家用器具分開， 無須在家裡使用不見得便利的露營器具，也無須露營時使用過於笨重的家庭用具， 更無須每次露營前後在那乾坤大挪移。  合適材積的收納箱，放置六七分滿的露營裝備， 出門時整箱帶走，回家後整箱歸定位。 收納箱本身收納折疊與否，更不重要了。  考慮自己的個性，決定搞幾個紅酒箱來當露營收納箱。  兩個紅酒箱參考 スノーピークのシェルフコンテナを真似て、ランタンや焚き火道具などソロキャンプ道具を収納する頑丈コンテナの自作にチャレンジ, DIY 改造成類 SnowPeak UG-055G 的收納箱。  另一個紅酒箱預計搭加一些鐵件配件，改裝成類似 BLACK Nature 原木箱 - 合舍二一 般兩用的收納箱。  ...製作安排中...  ","version":"Next","tagName":"h3"},{"title":"露營桌​","type":1,"pageTitle":"豪華露營裝備組合, ...TBD","url":"/lifehacker/equipment/camping_glamping/#露營桌","content":" ","version":"Next","tagName":"h3"},{"title":"炊事組合​","type":1,"pageTitle":"豪華露營裝備組合, ...TBD","url":"/lifehacker/equipment/camping_glamping/#炊事組合","content":" ","version":"Next","tagName":"h3"},{"title":"Reference​","type":1,"pageTitle":"豪華露營裝備組合, ...TBD","url":"/lifehacker/equipment/camping_glamping/#reference","content":" 營火部落KNOX ▲ LIVE WILD ","version":"Next","tagName":"h3"},{"title":"健行野營裝備組合, ...TBD","type":0,"sectionRef":"#","url":"/lifehacker/equipment/camping_trail/","content":"","keywords":"","version":"Next"},{"title":"帳篷​","type":1,"pageTitle":"健行野營裝備組合, ...TBD","url":"/lifehacker/equipment/camping_trail/#帳篷","content":" OneTigris Backwoods Bungalow Ultralight Bushcraft Shelter 2.0  TBD  LOGOS Tepee 400  TBD  三峰 藍山: 通透大空間——三峰藍山2雙尖塔體驗 - 每日頭條  ","version":"Next","tagName":"h3"},{"title":"收納箱​","type":1,"pageTitle":"健行野營裝備組合, ...TBD","url":"/lifehacker/equipment/camping_trail/#收納箱","content":" 本想購入 CampingBar收納箱 這類折疊收納箱。 挑個軍品色系，搭配木桌版，在方便、空間、風格間抓個平衡。 後來想想，要收納的是常備品，收納箱大多時候都是開啟狀態，能否折疊好像不重要。  幾次露營後，認同 KNOX ▲ LIVE WILD: 我們的露營進化史 所說， 該把露營器具和家用器具分開， 無須在家裡使用不見得便利的露營器具，也無須露營時使用過於笨重的家庭用具， 更無須每次露營前後在那乾坤大挪移。  合適材積的收納箱，放置六七分滿的露營裝備， 出門時整箱帶走，回家後整箱歸定位。 收納箱本身收納折疊與否，更不重要了。  考慮自己的個性，決定搞幾個紅酒箱來當露營收納箱。  兩個紅酒箱參考 スノーピークのシェルフコンテナを真似て、ランタンや焚き火道具などソロキャンプ道具を収納する頑丈コンテナの自作にチャレンジ, DIY 改造成類 SnowPeak UG-055G 的收納箱。  另一個紅酒箱預計搭加一些鐵件配件，改裝成類似 BLACK Nature 原木箱 - 合舍二一 般兩用的收納箱。  ...製作安排中...  ","version":"Next","tagName":"h3"},{"title":"露營桌​","type":1,"pageTitle":"健行野營裝備組合, ...TBD","url":"/lifehacker/equipment/camping_trail/#露營桌","content":" ","version":"Next","tagName":"h3"},{"title":"炊事組合​","type":1,"pageTitle":"健行野營裝備組合, ...TBD","url":"/lifehacker/equipment/camping_trail/#炊事組合","content":" ","version":"Next","tagName":"h3"},{"title":"Reference​","type":1,"pageTitle":"健行野營裝備組合, ...TBD","url":"/lifehacker/equipment/camping_trail/#reference","content":" 營火部落KNOX ▲ LIVE WILD ","version":"Next","tagName":"h3"},{"title":"Bitplay Aquaseal 02 使用心得","type":0,"sectionRef":"#","url":"/lifehacker/equipment/sacoche_bitplay-aquaseal-02/","content":"","keywords":"","version":"Next"},{"title":"廢言​","type":1,"pageTitle":"Bitplay Aquaseal 02 使用心得","url":"/lifehacker/equipment/sacoche_bitplay-aquaseal-02/#廢言","content":" 近些年 Sacoche 包流行，而身旁友人多年前就已在使用。 放置手機、錢包、鑰匙、悠遊卡、紙巾等出門必備物品恰好。 當時我還是個筆電、相機不離身的狀態，覺得筆電包外要再帶個隨身包，煩。  後來在公司禁帶個人設備政策下，筆電不再隨身攜帶。 因緣購入了 小米 90分Chic休閒胸包，通勤上班僅需一小胸包。 覺得方便也漸漸習慣未帶筆電外出時，配戴隨身胸包。  直到近期的專案工作，上班需攜帶自己的筆電， 而園區管制嚴格，中途休息離開大樓時有個小包裝載錢包、手機、識別證、口罩等，較為方便。 筆電背包加隨身小包的組合是必須的。  這回選用跨包而非續用胸包， 主要是通勤時偶爾遇到捷運人潮較多，需把筆電後背包轉向背負胸前，胸包不方便。 次要則多數跨包輕薄，整個放入筆電背包內當隔間袋也方便，胸包就無法了。  尋覓的時候，日前受 KNOX ▲ LIVE WILD: bitplay AquaSeal 02 隨行瞬扣包｜為健行者而生的進化版誘惑而敗入的二代後袋剛好到貨。使用一段時間後大愛，分享之。  ","version":"Next","tagName":"h3"},{"title":"輕巧​","type":1,"pageTitle":"Bitplay Aquaseal 02 使用心得","url":"/lifehacker/equipment/sacoche_bitplay-aquaseal-02/#輕巧","content":" 輕巧方便是這類跨包受歡迎的主因。個人以為是 Sacoche 的本質。 但期間有幾款網路購入的跨包，材質過於厚實，即使其他設計再出色，也不那麼方便。  隨行瞬扣包至少守住了這個本質。  ","version":"Next","tagName":"h3"},{"title":"材質​","type":1,"pageTitle":"Bitplay Aquaseal 02 使用心得","url":"/lifehacker/equipment/sacoche_bitplay-aquaseal-02/#材質","content":" 手上有些其他跨包材質過於柔軟，戶外活動、健行、野跑還合適， 但通勤使用，上班時放辦公桌上鬆鬆垮垮的，個人不愛。    隨行瞬扣包選用戶外包包常用的 「防撥水CORDURA®」，強韌、耐操、抗撕裂。 材質輕薄且硬挺，上班擺在桌旁還能好好立著。  ","version":"Next","tagName":"h3"},{"title":"隔間​","type":1,"pageTitle":"Bitplay Aquaseal 02 使用心得","url":"/lifehacker/equipment/sacoche_bitplay-aquaseal-02/#隔間","content":" 許多小包內部為一大艙體，沒有隔間設計。 而隨行瞬扣包內部多了兩個隔間，使用後有些回不去的感覺。    我因故隨身攜帶兩隻手機，這兩個隔間剛好各放一隻互不打架影響。 取用上也可以和主艙體雜物分開，相當好用。    內部兩個隔間並沒有完全貼緊底部，除了可避免泡水外， 主艙底部空間比較寬大，雜物堆放取用都很順手。  ","version":"Next","tagName":"h3"},{"title":"細節​","type":1,"pageTitle":"Bitplay Aquaseal 02 使用心得","url":"/lifehacker/equipment/sacoche_bitplay-aquaseal-02/#細節","content":" 除以上幾點個人喜愛的特色外，設計與做工細節也是亮點。  相當多背包都強調使用 YKK 等知名品牌五金配件。 先不論真實與否，但常遇到拉鍊本身是順暢的，但背著使用時就是卡卡的。 而隨行瞬扣包完全沒這問題，各種背帶調整、拉鍊開合等，都相當順暢。  魔鬼藏在細節裡，無誤。  ","version":"Next","tagName":"h3"},{"title":"心得​","type":1,"pageTitle":"Bitplay Aquaseal 02 使用心得","url":"/lifehacker/equipment/sacoche_bitplay-aquaseal-02/#心得","content":" 隨著生活情境的改變，生活需求與使用的物件也跟著改變。 套句營火部落達哥測試裝備後最常說的：沒有最好，只有最適合。  為了登山健行者改良的隨行瞬扣包，許多設計恰好適合近期的工作需求。 它仍有些不足想加強的地方，後續另發文說明如何修改客製。  每個人需求不同，而我當前生活型態中， Bitplay Aquaseal 02 跳脫山野健行的定位，協槓通勤城市包。  ","version":"Next","tagName":"h3"},{"title":"後記​","type":1,"pageTitle":"Bitplay Aquaseal 02 使用心得","url":"/lifehacker/equipment/sacoche_bitplay-aquaseal-02/#後記","content":" 小插曲是使用不到一個月時，後袋的磁扣莫名噴了。 反應後立刻獲得換新的售後服務，這點也很令人讚賞。    自己扭轉了沒噴掉的另一個磁扣母扣，不需太大的氣力就可以轉下，也難怪會噴掉。 相關事項也反應給玩點互動，希望後續的產品這方面是有補強的。 ","version":"Next","tagName":"h3"},{"title":"MADNESS SACOCHE 工裝小包 使用心得","type":0,"sectionRef":"#","url":"/lifehacker/equipment/sacoche_madness/","content":"","keywords":"","version":"Next"},{"title":"廢言​","type":1,"pageTitle":"MADNESS SACOCHE 工裝小包 使用心得","url":"/lifehacker/equipment/sacoche_madness/#廢言","content":" 使用這個背包，可說是因緣際會、命中註定。  所以會購入，是淘寶自動跳出的推薦商品：日系潮流青年学生情侣外出单肩小包余文乐同款港风工装斜挎包。 當時有每滿 200 - 20 促銷活動，購物車裡商品還差 2x 元可再折 20， 跳出這推薦商品就立即加入購物車、結帳。 心想反正算起來成本不到 10 元人民幣，不喜歡就送出。  所以會使用，是Bitplay Aquaseal 02 隨行瞬扣包磁扣噴掉送保固換新時，需要個替代品。  結果一用就愛上了。 MADNESS 材質是比較硬挺的布料，加上簡單低調的款式設計，很適合都市通勤。  ","version":"Next","tagName":"h3"},{"title":"隔間​","type":1,"pageTitle":"MADNESS SACOCHE 工裝小包 使用心得","url":"/lifehacker/equipment/sacoche_madness/#隔間","content":" 而喜愛 MADNESS 最大的原因在於隔間設計。 隨行瞬扣包在整個大艙間裡縫出兩個小置物袋，而 MADNESS 則是大小三個獨立艙間設計。  前面的小隔間，鑰匙、識別證、口罩夾、面紙等小東西。 中間比較扁平的空間，一正一倒放了兩隻手機。 後面的空間，錢包、環保餐具、隨身酒精等較大型雜物。      使用和拿取東西的順手度上，三個獨立隔間還是方便些。 歸功於包體設計俐落，外觀上仍簡單輕便。  ","version":"Next","tagName":"h3"},{"title":"改裝​","type":1,"pageTitle":"MADNESS SACOCHE 工裝小包 使用心得","url":"/lifehacker/equipment/sacoche_madness/#改裝","content":" MADNESS 包體設計不差，但原廠肩帶是常見的扁帶＋塑膠扣的設計，有些落漆。  故拿了 7mm 的迷彩傘繩，自己做了個背帶替換掉原廠背帶，自豪地以為質感上升不少。 比起扁帶來說傘繩肩帶舒適度較差，不過小包不會放重物，使用至今尚無不適感。  也用了相同傘繩，在個拉鍊多加了一小段方便操作的延伸， 除了外觀整體和傘繩背帶更一致外，操作使用確實也較方便。      ","version":"Next","tagName":"h3"},{"title":"後記​","type":1,"pageTitle":"MADNESS SACOCHE 工裝小包 使用心得","url":"/lifehacker/equipment/sacoche_madness/#後記","content":" 因有著部分簡單的手作情感、加上合適的隔間設計， 即使在隨行瞬扣包換新後，MADNESS 的出勤率還是比較高， 故分享心得。  原本是淘寶自動跳出的推薦，當時只是撿便宜心態購買。 寫這篇文章時發覺淘寶賣的是仿冒品，打算再另尋正品購入。 ","version":"Next","tagName":"h3"},{"title":"簡詩敏 + Earth Garden 創作發表 mini concert","type":0,"sectionRef":"#","url":"/lifehacker/lifestyle/music_mimijasmine-earthgarden/","content":"簡詩敏 + Earth Garden 創作發表 mini concert 「妳在哪？」電話那頭一聲哈囉也沒，劈頭就直問著。 傍晚細雨紛紛，蔡漫步雨中，這些日子來情場失意、職場也不如意。 屋漏偏逢連夜雨，中午用餐時放在店家門口的傘忘了拿，下班去找已經不見。 ㄍㄢ、 雖然我也忘了拿，但幹嘛偷拿人家的傘啦，很賤耶（大哭） 為什麼要欺負我， 人家的手機塞跟狗狗雨傘 看到蔡在 facebook 上的狀態，好友撥了通電話來。 「好，不要動，我去接妳！」 「去哪？」 「來去聽一個歌手的創作發表。」 蔡有些訝異，酒鬼如他，不離口的話該是「美好的週五夜晚，怎能不來個兩手呢？」 簡詩敏。是音樂人、是藥師，也是背包客。 她背著背包探索地球，用心傾聽世界的聲音。 她用力寫歌，將她對生命的熱情與能量全部放進音樂裡。 在她的音樂裡，你能感受到一股生命的濃烈與律動。 &quot;從心出發，從台灣到全世界。&quot; 此刻她正用音樂宣示著一種無國界的自由態度。 兩人來到樹樂集，一棟結合咖啡、展演、手創複合經營的透天厝 蔡看著介紹，對這場演出是完全陌生 席地就坐後喵了一下四周，人氣頗旺，似乎不少簡詩敏的朋友 試音時她談了生活、聊到音樂、說著樹爺爺，好個樂於生命的人！ 開場的第一首夜戀威尼斯，蔡完全著迷了。 充滿神祕感的音樂，瀰漫著華麗的歌聲，濃重的異國風格。 「喔？明年捨捨要穿比基尼？！」 隨著眾人的鼓譟望去，牆角那一臉靦腆尷尬的男生，應該就是捨捨了 每首歌之前，簡詩敏聊著這首歌的創作緣由，偶爾和台下好友互動 相當歡樂的氣氛，和印象中的音樂發表不同，像個同樂會 首首音樂皆是不同風格，甜蜜、熱情、迷幻、奔放 歌聲、樂團的精湛演出，蔡忘了原本的不愉快，隨著周圍拍起手 玲瓏曲韻隨手起，瑤光聲色譜樂章。 散場時，雲開了。「走吧，上陽明山，你不是很想去？」 兩人來到文化大學旁，面對台北市區的草皮上坐了下來， 他回到車上拿了羽毛披肩給蔡禦寒、順便拿了一瓶紅酒與兩個酒杯 「美好的週五夜晚，怎能不來個兩杯呢？」 「你車上隨時有紅酒跟酒杯！？」 「怎麼知道這場演出的？」 「有次在天母喝咖啡，碰巧遇到當晚有爵士演出， 「那晚聽得很舒服，不知為何，咖啡和爵士就是相配， 「回家上網查他們演出時間，也看到了今天這場發表。 「你喜歡那首?」 蔡很喜歡 shut up，簡直把她最近生活壓力完全發洩了出來。 但最喜歡的仍是春眠不覺曉，她想起和男友那段甜蜜時光。 「你呢？」 「我最喜歡的是最後那首，歌詞和節奏都深得我心阿！ 「另外應該就是第一首威尼斯，當下威尼斯的暮色、夜晚景色整個跳出腦海。」 蔡好奇地追問威尼斯的景色，話題轉到他兩年前的義大利旅行... 白雲天地為衾枕，興來倒臥醉花顏；一任風月不留痕，逍遙山水憶秋年。 話題再度回到今晚的音樂發表， 「我不懂音樂，但我喜歡她的歌聲帶來的生命力。以及她面對音樂的態度。」 歌聲會穿透、音樂會渲染、節奏會震撼、態度會傳播 「今晚，謝謝你的陪伴。」 「沒啥，說穿了，我不過缺個酒伴罷了。早點休息吧，晚安、好夢。」","keywords":"","version":"Next"},{"title":"2009.07.03 十年回憶．能高主","type":0,"sectionRef":"#","url":"/lifehacker/mount/090703_nenggao-peak/","content":"2009.07.03 十年回憶．能高主 十年前，我因山而愛上攝影； 十年後，我因攝影而更愛山。 能高主峰 flickr http://www.flickr.com/photos/kywk71/3702042745/ 牛魔角（卡賀爾）、假山頭們、能高主 flickr http://www.flickr.com/photos/kywk71/3702857840/ 天池山莊營地 flickr http://www.flickr.com/photos/kywk71/3702015453/ 霧起 flickr http://www.flickr.com/photos/kywk71/3702829952/ 雲開 flickr http://www.flickr.com/photos/kywk71/3702034863/ 夕下 flickr http://www.flickr.com/photos/kywk71/3702052467/ 變天 flickr http://www.flickr.com/photos/kywk71/3702059073/ 日落 flickr http://www.flickr.com/photos/kywk71/3702061201/ 感謝同行的友人 flickr http://www.flickr.com/photos/kywk71/3702911492/ 感謝最後一天的好天氣 flickr http://www.flickr.com/photos/kywk71/3702079469/ 感謝這美麗的山林 flickr http://www.flickr.com/photos/kywk71/3702070399/ 最後，合照是一定要的 flickr http://www.flickr.com/photos/kywk71/3701983989/ flickr http://www.flickr.com/photos/moogoo/3695981073/ 補上行程紀錄，感謝蘑菇提供 屯原登山口 - 天池山莊 flickr http://www.flickr.com/photos/kywk71/3719433708/ 天池山莊 - 能高主峰(來回) flickr http://www.flickr.com/photos/kywk71/3719433766/","keywords":"","version":"Next"},{"title":"2013.06.29 重拾熱血．嘉明湖","type":0,"sectionRef":"#","url":"/lifehacker/mount/130629_lake-cjiaming/","content":"2013.06.29 重拾熱血．嘉明湖 夜半，拎了雨衣外套爬出帳篷，湖畔緩行～ 星空、湖面、水鹿、宿營，一副理想畫面呈現眼前，卻捨不得回去拿相機。 水鹿在周圍遊走著，眼神在星空遊蕩著。 習慣先找到夏日大三角、大熊星座，以此判別方向； 配合時間、月亮角度計算上下弦月，再尋找其他熟識星座。 然，雙眼在星空中迷路了！ 尋覓中，火紅的心跳抓住了目光「心宿紅星照南斗...」 天蠍火熱的心臟，滿天星辰中比牛郎織女更耀眼。 順著銀河由南往北尋覓，人馬、天琴、牛郎織女… 視線停留在英仙身上，對看了好一會…… -x-x-x-x-x- 熊貓在 facebook 上相約嘉明湖，想也不多想就答應了。 簡單作些功課、概略抓了行程、訂了山屋，就成團了！ 行進稜線上，山嵐山巒交錯，風吹拂樹林，陣陣波濤～ 松濤松濤，多久沒聽聞這寧靜美妙的歌聲～ 攀上崩壁，大口喘息間，聽聞松濤。山輕述說著：放慢牛步，恣意享受～ 輕輕地、深深地呼吸著，山嵐和感動一同湧上，腳步漸輕快。 綿延不絕的山巒帶走了專注，肩頭頓時輕鬆起來～ 「歡迎回家，孩子！」松濤再度傳來，山的聲音。 帶了瓶八八坑道，第一晚在向陽山屋和莊主及兩個嚮導大哥喝開； 聽聞不少嘉明湖趣聞及憾事，也對這山有更進一步的認識～ 背了瓶可口可樂，第二天在嘉明湖畔和新認識的山友慶功； 圓夢也好、任性也罷，一起被山感動，就是個緣份～ -x-x-x-x-x- 仰望英仙，想著這兩天點滴，輕述和英仙那一生的約定： 「八月中旬再上山看你！請像往常一般乘流星雨而來～」 回帳篷前，再度看到天蠍美麗的模樣，想本要一起前來的朋友， 「下次，我帶你來！」天際落下兩顆流星～ 這趟，喚醒了心底那個沈睡的野孩子～ 敬山一杯！","keywords":"","version":"Next"},{"title":"2014.11.22 越野．能高","type":0,"sectionRef":"#","url":"/lifehacker/mount/141122_trail-nenggao/","content":"2014.11.22 越野．能高 Christmas is love in action 看到這句話，想起一個好友、也想起上個月輕裝跑能高西段的「剛好」。 剛好的天候、剛好的景致、剛好的伙伴、剛好的心情。 天意，如此剛好，暢快的週末與舒服的行程。 能高越嶺古道，百岳再入門不過的路徑。沿途寬敞平坦，滿是林蔭、高山景致，越野天堂。 去年回程時遇到山友、跑友輕裝挑戰一日能高，開始心癢～ 「或許，先試試野跑西段來回吧…」 起心、動念、糾團、成行。 屯原登山口到雲海保線所 4.5k 的距離，表定 40 分鐘完成。 實際則因對高山活動尚未適應，只能維持快走的節奏，難以跑起來，花了近一個小時。 天氣相當好，帶著靠么一起玩。 牠一下成為雲海上的焦點，這點是我永遠無法達成的成就吧。 展望很棒，正雄無意間發現的視角，成為大傢伙排隊拍照的熱門景點。 就是這，從樹葉間往霧社眺望，天然的「心」。 上天歡迎著這週末到訪能高越嶺古道的山友們～ 在雲海墮落、拍照了近半小時後，繼續前行。 5.5K 的大崩壁，去年走時落差較大的部分已全整理好， 連我家靠么都可以輕鬆走過～ 過大崩壁後講定下個休息點，8.5k 的水源處，便以各自的節奏前進著。 此行伙伴： 正雄 惠麗 神人志叡 8.8k 水源處時人太多，水源狀況不如預期，大伙亦未顯疲累，直取天池山屋。 能高三疊瀑布的水流很小，看來今年冬季連能高都可能缺水。 想起今晚將夜宿天池山屋近三百多人，不禁覺得一日來回是正確決定。 抵天池山屋時算了算，連同休息時間約花三個半小時多。 要往奇萊、南華較不可能，往光被八表還有機會，先休息用餐再決定。 晃著晃著，一下子就快兩點了，要前往光被八表的話得跑起來， 不想那麼累，也不想摸黑下山，仍決定折返。 回程時大伙都適應高山狀況了，又是好跑的緩下坡，各自跑了起來。 遇到霹靂馬，這趟帶能高安東軍團； 遇到正上山的山友，錯身、加油、各自前進。 期間，惠麗不小心跌倒，在山友的幫助下緊急處理，還好無礙。 想起十月奇萊北時，摔倒脫臼後也是在山友支援下包紮，該將簡易急救包列成為隨身物品了。 而靠么，仍是一路上最受歡迎的登山客！ 回程花不到一個半小時就到雲海保線所了，在這兒又和山友聊天拍照， 也在山友介紹下得到當晚住宿的資訊～ 離開雲海後，夕下正美。也不顧可能的摸黑，一路上走走拍拍。 手機、相機裡頭都是彼此的寫真照片～純天然、無打光！ 最後，回程途上，再度捕獲一顆「心」 感謝伙伴，讓此行如此話題不斷，心中的秘密留在山上； 感謝上天，給了如此美好的天氣，山野的景致映在心底。 願，元旦假期將走訪能高越嶺古道的好友，也能如此自在快活。","keywords":"","version":"Next"},{"title":"2013.08.23 南湖大山．初心者","type":0,"sectionRef":"#","url":"/lifehacker/mount/130807_mt-nanhu/","content":"2013.08.23 南湖大山．初心者 雲稜山莊外，仰頭望著銀河、流星，你說：這片星空就值得了。 沒想過會帶你上山，一句無心玩笑話就啟程了，完全是我倆的互動模式。 南湖大山，五岳之一，又有帝王之山的別號； 南湖圈谷，風景絕美、生態豐富，上帝遺落的珍珠。 知道這趟不算輕鬆，再次評估了路況、行程，以及所需的裝備等； 清楚你身體情況，比對身旁友人的狀況和紀錄... 「走吧！一起上南湖！」我相信你體能足以應付這趟行程。 你擔心著衣著裝備不足，幫你挑選、打包時，想起初回的登山 心想牛仔褲堅固耐用、覺得毛衣保暖、認為平底鞋好走，鬧過好大的笑話 細想山上可能會遇到的需求，審慎檢視你的行李 再幫你從家裡帶件刷毛保暖衣，這搭配組合足以應付夏秋季登山活動 記得林道上，我們開心聊天著，那時有些不太適應～ 爬山久了，習慣靜靜地走，避免任何不必要的體力和水分消耗。 然，邊扯淡邊走著，完全讓人不覺林道漫長和枯燥，毫無展望的踢腳路徑變得有趣。 想像若再帶上我妹、大頭一起走奇萊南華時，應該會像古魯家族一樣吵雜吧～ 記得松風林，我們悠閒享用早茶，那有些奢侈～ 趕路慣了，能站著喘息就不坐下，能再繼續前進就不停留。 然，那個上午，我們徹底享受了山野仙境的愜意。 仔細檢視行程、裝備，謹慎評估體能、補給； 行進間和夥伴快樂的交談，時間寬裕時坐著享受山林風情。 經驗越加豐富，打包好似家常便飯般； 腳程越來越快，趕路途中錯過不少登山樂趣～ 這回，重新感受到，初次登山的心情 興奮又緊張，期待也怕受傷害的情緒波動，該是持續登山也不該消失的感動。 很高興帶你上山，你讓山，不再只是山！","keywords":"","version":"Next"},{"title":"2015.03.22 聖境．北大武","type":0,"sectionRef":"#","url":"/lifehacker/mount/150322_mt-peitawu/","content":"2015.03.22 聖境．北大武 這趟的天氣不算太好，前兩天多在霧雨中行進。 也不是太差，偶爾露臉的陽光、藍天就讓沿途充滿色彩。 行程記錄 (待補) D0 台北 -&gt; 屏東．登山故事館D1 登山口 -&gt; 檜谷山莊 10:00 新登山口 -&gt; 11:20 舊登山口．午餐 12:00 舊登山口 -&gt; 15:00 3.8k 光明頂 -&gt; 15:30 檜谷山莊D2 檜谷山莊 -&gt; 北大武 -&gt; 檜谷山莊D3 檜谷山莊 -&gt; 登山口 -&gt; 慶功宴 -&gt; 台北 D1 登山口 -&gt; 檜谷山莊​ 下班後從台北出發，連夜趕下屏東，夜宿登山界老前輩 — 紹定國（山羊） 所開設的登山故事館。 登山故事館離北大武登山口僅 15 分鐘車程，這天的行程亦相當輕鬆，睡飽、悠閒用了份早餐後才緩緩啟程。 從新登山口出發時還偶有太陽，走到舊登山口用餐時就漸有雲霧了。 氣候宜人，不太熱，走來舒暢，就是雲霧間沒什麼景致可欣賞～ 午後三時攀上 3.8k 光明頂，雲層逐漸下降開朗，小憩片刻後繼續前往檜谷山莊。 前往檜谷山莊時，雲層漸開，陽光撒了下來。 換下重裝喝了些甜湯，輕裝帶了咖啡、酒、零食，回光明頂午茶順候夕陽。 天氣不是太好，雲霧沒全開。太陽害羞地躲在霧中，漸漸西沉～ D2 檜谷山莊 -&gt; 北大武 -&gt; 檜谷山莊​ 第二天是重點行程，摸早黑啟程。 檜谷山莊到北大武山約 5K 距離，爬升約 1k 高度，領隊預估含休息十個小時來回。 剛出發時就覺得溼氣很重，過神木後變遇上霧雨。 一度覺得山上應該沒啥展望，個人曾興起撤退念頭。 日出後，因著太陽漸大，水氣漸開；也隨著隊伍攀高，慢慢走出雲層… 抵稜線時陽光從樹叢後竄出，不預期的景致倒是令人不斷驚訝。 相較於沿途霧氣和陽光交錯下帶來景致的變化，大武祠和三角點則略顯單調。 尤其三角點附近，莫名濃厚的尿騷味，令人難以忍受只好早早下山。 回到檜谷山莊不久後開始下雨，窩著喝酒、敲碗等晚餐（誤～） D3 檜谷山莊 -&gt; 登山口 -&gt; 慶功宴 -&gt; 台北​ 這趟最大的意外該是一葉蘭吧… 山壁間綻開了幾朵一葉蘭，沾著露水嬌艷欲滴的模樣，美。 Full photo set at flickr","keywords":"","version":"Next"},{"title":"2014.09.10 野孩子．嘉明一夜情","type":0,"sectionRef":"#","url":"/lifehacker/mount/cjia-ming-lake-140910/","content":"2014.09.10 野孩子．嘉明一夜情 首先，感謝號召這團的晶晶，一同前往的志叡、蘭君，及協助留守與討論的 Irene。 行程記錄 D0 台北 -&gt; 花蓮__D1 花蓮 -&gt; 向陽山屋 __ 16:00 向陽森林遊樂區 -&gt; 17:00 雙橋登山口 -&gt; 18:20 向陽山屋D2 向陽山屋 -&gt; 嘉明湖04:40 向陽山屋 -&gt; 05:40 黑水塘營地 -&gt; 06:30 向陽名樹 -&gt; 07:30 向陽哭坡 -&gt; 08:30 向陽山登山口 -&gt; 9:30 避難小屋 13:00 嘉明湖避難小屋 -&gt; 13:40 下向陽北峰 (迎賓樹) -&gt; 14:50 三叉山登山口 -&gt; 15:10 三叉口營地D3 嘉明湖 -&gt; 向陽森林遊樂區 -&gt; 台北08:30 三叉口營地 -&gt; 09:00 三叉山 -&gt; 10:40 向陽北峰 -&gt; 11:30 嘉明湖避難小屋 12:30 嘉明湖避難小屋 -&gt; 13:20 向陽山登山口 -&gt; 14:20 向陽名樹 -&gt; 15:30 向陽山屋 17:00 向陽山屋 -&gt; 17:40 雙橋登山口 -&gt; 18:30 向陽森林遊樂區 去年初訪嘉明湖後想著有機會來年要再來一趟， 七月和公司同事再度走訪嘉明湖，在雲豹的完善照料下走得輕鬆自在， 卻莫名有種好像少了些什麼的感受。似乎過於期待、過於容易得到，反而容易失落？ 「或許，找時間再來走一次？」才竄出這念頭，晶晶便傳訊詢問嘉明湖行程。 聊過後，答應和他們再走一次。 這次成員是越野越自由中認識的朋友，體能、山徑行進絕不是問題，負重和高山天候是比較不熟悉的。 所以八月時大夥各自排出時間上合歡群峰進行負重，體驗高山負重活動的感覺與穿著。 面對山，再多的準備都不嫌過。 向陽山屋炊事時遇上余主任和仁哥，他們熱情分享了晚餐，也交流許多登山經驗、原住民生活和嘉明湖知識。 遇上乜寇帶領的隊伍，行程規劃相似下許多路程皆相伴而行。 避難小屋午餐休息時窩在廚房一起聊著天，一位隊員說在研究高山揹工： 「什麼科系？」「人類學。」走嘉明湖和人類學特別有緣，去年也在這兒認識兩位念人類學的好友； 「哪間學校？」「暨南大學。」「叫學長！」最近上山和暨大很有緣，雪山、嘉明湖都能遇上暨大的學弟。 抵嘉明湖畔，霧漸升起。薄霧後的嘉明湖有另一種美，撲朔、迷離、難捉摸的女孩心。 霧更濃、雨紛飛，水滴落三叉營地，長出了一頂頂帳篷。一杯甜湯暖胃，卸除一身勞累。 雲又散，天再晴，日落彩霞萬千變化。山，用最美的姿態回應著那女孩「好美唷」的呼喊。 就這個午後，體驗了自然的陰晴多變，領悟了山的風情萬種。 翌晨，陽光尚未露臉，月亮高掛天空，天狼、獵戶仍隱約可見，雲彩已先行環繞南二段山頭。 太陽剛從海面升起，還躲在雲層後面，卻已不客氣地散發光芒，先為天際雲層加上一片紅彩。 日光繼續升起，灑落大地上，帶來光線、溫暖和活力，呼喊聲此起彼落，一夜沉靜嘉明湖又甦活 過來。 就這個清晨，了解了自然的生生不息，見識了山的麟次節比。 每次上山都有不同感受，都會認識不同朋友。 巧的是，下山後一聊，竟有共同的朋友！才剛耳聞鳶嘴山的囧樣，竟就在嘉明湖上相識。 期待下次一起上山！ 三次上嘉明湖都有不同心情，這趟的自然風景變化最大，最漂亮，心情也最舒暢。 最後，感謝帶給我們三天好天氣的山，也再度感謝這次的隊員們： 晶晶，高山上你的呼喊聲特別響亮，辛苦走了一天到目的地，「好美喔！」不絕的吶喊，特別提神，一整天的勞累都消散了。 志叡，14 分鐘來回向陽山，神人不愧是神人！明年一定找你一起來跑跑一日嘉明。 蘭君，第三天清晨看你神清氣爽上嘉明湖，很是高興。身體狀況佳時候，高山野跑最適合你了。 因為你們，這趟很美好！","keywords":"","version":"Next"},{"title":"白雪村","type":0,"sectionRef":"#","url":"/lifehacker/mount/白雪村/","content":"白雪村","keywords":"","version":"Next"},{"title":"臻山O型","type":0,"sectionRef":"#","url":"/lifehacker/mount/臻山O型/","content":"臻山O型","keywords":"","version":"Next"},{"title":"左米綜走","type":0,"sectionRef":"#","url":"/lifehacker/mount/左米綜走/","content":"左米綜走","keywords":"","version":"Next"},{"title":"赤心巔峰-braving-the-peak","type":0,"sectionRef":"#","url":"/lifehacker/movie/赤心巔峰-braving-the-peak/","content":"赤心巔峰-braving-the-peak","keywords":"","version":"Next"},{"title":"robot-dream","type":0,"sectionRef":"#","url":"/lifehacker/movie/robot-dream/","content":"robot-dream","keywords":"","version":"Next"},{"title":"平多縱走","type":0,"sectionRef":"#","url":"/lifehacker/mount/平多縱走/","content":"平多縱走","keywords":"","version":"Next"},{"title":"[Docusaurus] 設定筆記","type":0,"sectionRef":"#","url":"/lifehacker/obsidian/docusaurus/","content":"","keywords":"","version":"Next"},{"title":"Docs Multi-instance​","type":1,"pageTitle":"[Docusaurus] 設定筆記","url":"/lifehacker/obsidian/docusaurus/#docs-multi-instance","content":" 想把 kywk.life 中旅行和生活紀錄拆分成不同 Docs, 有各自獨立的側邊導覽和 Tag. 畢竟文章屬性不相同, 拆分開來側邊欄不會過於冗長外, Tag 也不會混在一起.  對於為專案文件出發的 Docusaurus 來說, 類似的需求可能也不少. 雖然系統內建僅支援一份文件, 但可透過官方 plugin 來完成需求.  The @docusaurus/plugin-content-docs plugin can support multi-instance. Ref: Docs Multi-instance | Docusaurus  ","version":"Next","tagName":"h2"},{"title":"install plugin​","type":1,"pageTitle":"[Docusaurus] 設定筆記","url":"/lifehacker/obsidian/docusaurus/#install-plugin","content":" ","version":"Next","tagName":"h3"},{"title":"configure​","type":1,"pageTitle":"[Docusaurus] 設定筆記","url":"/lifehacker/obsidian/docusaurus/#configure","content":" module.exports = { plugins: [ [ '@docusaurus/plugin-content-docs', { id: 'backpacker', path: 'backpacker', routeBasePath: 'backpacker', sidebarPath: require.resolve('./sidebars.js'), // ... other options }, ], ], ... themeConfig: { navbar: { items: [ { to: '/backpacker/way-2-kywk', label: 'Lonely Planet', position: 'left', activeBaseRegex: `/backpacker/`, }, { type: 'doc', docId: 'way-2-kywk', position: 'left', label: 'Journal', }, ... ], }, }, };   ","version":"Next","tagName":"h3"},{"title":"Multiple Blogs​","type":1,"pageTitle":"[Docusaurus] 設定筆記","url":"/lifehacker/obsidian/docusaurus/#multiple-blogs","content":" 慢慢把逛 Hacker News / twitter / ... 等看到一些有趣或有用的新聞資訊隨手筆記下來. 而這樣的新聞隨筆不適合放筆記文件, 也不想和主部落格混在一起, 故查了下 Docusaurus 是否支援多個部落格.  By default, the classic theme assumes only one blog per website and hence includes only one instance of the blog plugin. If you would like to have multiple blogs on a single website, it's possible too! You can add another blog by specifying another blog plugin in the plugins option for docusaurus.config.js. Ref: Blog | Docusaurus  plugin-content-blog 是預設會安裝的 plugin, 無須另外新增. 需要建立多個部落格, 參考 multi-instance plugins, 替每一個 plugin instance 設定獨立的 plugin ids 即可.  module.exports = { // ... plugins: [ [ '@docusaurus/plugin-content-blog', { /** * Required for any multi-instance plugin */ id: 'second-blog', /** * URL route for the blog section of your site. * *DO NOT* include a trailing slash. */ routeBasePath: 'my-second-blog', /** * Path to data on filesystem relative to site dir. */ path: './my-second-blog', }, ], ], };   ","version":"Next","tagName":"h2"},{"title":"Tip & Trick​","type":1,"pageTitle":"[Docusaurus] 設定筆記","url":"/lifehacker/obsidian/docusaurus/#tip--trick","content":" ","version":"Next","tagName":"h2"},{"title":"GitHub Action Permission denied​","type":1,"pageTitle":"[Docusaurus] 設定筆記","url":"/lifehacker/obsidian/docusaurus/#github-action-permission-denied","content":" 某次 GitHub 的版本之後, Workflow Actions 權限有異動. 若出現下列錯誤:  Push the commit or tag /usr/bin/git push origin gh-pages remote: Permission to kywk/kywk.github.io.git denied to github-actions[bot]. fatal: unable to access 'https://github.com/kywk/kywk.github.io.git/': The requested URL returned error: 403 Error: Action failed with &quot;The process '/usr/bin/git' failed with exit code 128&quot;   到 Settings &gt; Actions &gt; General &gt; Workflow permissions, 選 Read and write permission 即可.  ","version":"Next","tagName":"h3"},{"title":"See Also​","type":1,"pageTitle":"[Docusaurus] 設定筆記","url":"/lifehacker/obsidian/docusaurus/#see-also","content":" ...TBD... ","version":"Next","tagName":"h2"},{"title":"[Docusaurus] 設定筆記","type":0,"sectionRef":"#","url":"/lifehacker/obsidian/docusaurus/Docusaurus Setup Note/","content":"","keywords":"","version":"Next"},{"title":"Docs Multi-instance​","type":1,"pageTitle":"[Docusaurus] 設定筆記","url":"/lifehacker/obsidian/docusaurus/Docusaurus Setup Note/#docs-multi-instance","content":" 想把 kywk.life 中旅行和生活紀錄拆分成不同 Docs, 有各自獨立的側邊導覽和 Tag. 畢竟文章屬性不相同, 拆分開來側邊欄不會過於冗長外, Tag 也不會混在一起.  對於為專案文件出發的 Docusaurus 來說, 類似的需求可能也不少. 雖然系統內建僅支援一份文件, 但可透過官方 plugin 來完成需求.  The @docusaurus/plugin-content-docs plugin can support multi-instance. Ref: Docs Multi-instance | Docusaurus  ","version":"Next","tagName":"h2"},{"title":"install plugin​","type":1,"pageTitle":"[Docusaurus] 設定筆記","url":"/lifehacker/obsidian/docusaurus/Docusaurus Setup Note/#install-plugin","content":" ","version":"Next","tagName":"h3"},{"title":"configure​","type":1,"pageTitle":"[Docusaurus] 設定筆記","url":"/lifehacker/obsidian/docusaurus/Docusaurus Setup Note/#configure","content":" module.exports = { plugins: [ [ '@docusaurus/plugin-content-docs', { id: 'backpacker', path: 'backpacker', routeBasePath: 'backpacker', sidebarPath: require.resolve('./sidebars.js'), // ... other options }, ], ], ... themeConfig: { navbar: { items: [ { to: '/backpacker/way-2-kywk', label: 'Lonely Planet', position: 'left', activeBaseRegex: `/backpacker/`, }, { type: 'doc', docId: 'way-2-kywk', position: 'left', label: 'Journal', }, ... ], }, }, };   ","version":"Next","tagName":"h3"},{"title":"Multiple Blogs​","type":1,"pageTitle":"[Docusaurus] 設定筆記","url":"/lifehacker/obsidian/docusaurus/Docusaurus Setup Note/#multiple-blogs","content":" 慢慢把逛 Hacker News / twitter / ... 等看到一些有趣或有用的新聞資訊隨手筆記下來. 而這樣的新聞隨筆不適合放筆記文件, 也不想和主部落格混在一起, 故查了下 Docusaurus 是否支援多個部落格.  By default, the classic theme assumes only one blog per website and hence includes only one instance of the blog plugin. If you would like to have multiple blogs on a single website, it's possible too! You can add another blog by specifying another blog plugin in the plugins option for docusaurus.config.js. Ref: Blog | Docusaurus  plugin-content-blog 是預設會安裝的 plugin, 無須另外新增. 需要建立多個部落格, 參考 multi-instance plugins, 替每一個 plugin instance 設定獨立的 plugin ids 即可.  module.exports = { // ... plugins: [ [ '@docusaurus/plugin-content-blog', { /** * Required for any multi-instance plugin */ id: 'second-blog', /** * URL route for the blog section of your site. * *DO NOT* include a trailing slash. */ routeBasePath: 'my-second-blog', /** * Path to data on filesystem relative to site dir. */ path: './my-second-blog', }, ], ], };   ","version":"Next","tagName":"h2"},{"title":"Tip & Trick​","type":1,"pageTitle":"[Docusaurus] 設定筆記","url":"/lifehacker/obsidian/docusaurus/Docusaurus Setup Note/#tip--trick","content":" ","version":"Next","tagName":"h2"},{"title":"GitHub Action Permission denied​","type":1,"pageTitle":"[Docusaurus] 設定筆記","url":"/lifehacker/obsidian/docusaurus/Docusaurus Setup Note/#github-action-permission-denied","content":" 某次 GitHub 的版本之後, Workflow Actions 權限有異動. 若出現下列錯誤:  Push the commit or tag /usr/bin/git push origin gh-pages remote: Permission to kywk/kywk.github.io.git denied to github-actions[bot]. fatal: unable to access 'https://github.com/kywk/kywk.github.io.git/': The requested URL returned error: 403 Error: Action failed with &quot;The process '/usr/bin/git' failed with exit code 128&quot;   到 Settings &gt; Actions &gt; General &gt; Workflow permissions, 選 Read and write permission 即可.  ","version":"Next","tagName":"h3"},{"title":"See Also​","type":1,"pageTitle":"[Docusaurus] 設定筆記","url":"/lifehacker/obsidian/docusaurus/Docusaurus Setup Note/#see-also","content":" ...TBD... ","version":"Next","tagName":"h2"},{"title":"[Docusaurus] Upgrade to v3","type":0,"sectionRef":"#","url":"/lifehacker/obsidian/docusaurus/docusaurus_upgrade-to-v3/","content":"","keywords":"","version":"Next"},{"title":"Package Upgrade​","type":1,"pageTitle":"[Docusaurus] Upgrade to v3","url":"/lifehacker/obsidian/docusaurus/docusaurus_upgrade-to-v3/#package-upgrade","content":" 直接打 npm install @docusaurus:latest ... 會有些相依套件沒有跟著更新, 造成生成失敗. 需要參考官網 Upgrading to Docusaurus v3 | Docusaurus - Upgrading Dependencies的說明, 手動修改 package.json 中的設定升級相依套件, 方能正確執行.  ","version":"Next","tagName":"h2"},{"title":"Bad use of < {​","type":1,"pageTitle":"[Docusaurus] Upgrade to v3","url":"/lifehacker/obsidian/docusaurus/docusaurus_upgrade-to-v3/#bad-use-of--","content":" The object shape looks like {username: string, age: number} Use Android version &lt;5 You can use a generic type like Array&lt;T&gt; Follow the template &quot;Road to &lt;YOUR_MINOR_VERSION&gt;&quot;   Docusaurus v3 使用 MDX v3 引擎, 對於 Markdown 文件中可能會造成 MDX 誤判的 &lt; { 有較嚴格的 lint 標準, 升級後一堆文章都因為類似錯誤造成編譯失敗.  官網的 Common MDX Problem 有發生原因和處理方式.  ","version":"Next","tagName":"h2"},{"title":"Summary​","type":1,"pageTitle":"[Docusaurus] Upgrade to v3","url":"/lifehacker/obsidian/docusaurus/docusaurus_upgrade-to-v3/#summary","content":" v2 到 v3 升級遇到的問題, 幾乎官網文件都有提及, 耐心跟著文件修正可順利升級. 至於 v3 究竟升級了哪些, 還待研究就是.  Announcing Docusaurus 3.0 | DocusaurusPreparing your site for Docusaurus v3 | Docusaurus ","version":"Next","tagName":"h2"},{"title":"[Docusaurus] Obsidian Integration","type":0,"sectionRef":"#","url":"/lifehacker/obsidian/docusaurus/Integrate Obsidian and Docusaurus/","content":"","keywords":"","version":"Next"},{"title":"Source tree​","type":1,"pageTitle":"[Docusaurus] Obsidian Integration","url":"/lifehacker/obsidian/docusaurus/Integrate Obsidian and Docusaurus/#source-tree","content":" Docusaurus 設定彈性很大, 唯一限制是專案必須有 docs 資料夾, 且裡面至少要有一個 &quot;.md&quot; 的檔案. 否則會報錯如下:  ❯ rm -rf docs ❯ yarn start yarn run v1.22.19 $ docusaurus start [INFO] Starting the development server... [ERROR] Error: The docs folder does not exist for version &quot;current&quot;. A docs folder is expected to be found at docs. at getVersionMetadataPaths (/Users/kywk/.node_modules/docusaurus/node_modules/@docusaurus/plugin-content-docs/lib/versions/files.js:123:15) at async createVersionMetadata (/Users/kywk/.node_modules/docusaurus/node_modules/@docusaurus/plugin-content-docs/lib/versions/index.js:97:68) at async Promise.all (index 0) at async readVersionsMetadata (/Users/kywk/.node_modules/docusaurus/node_modules/@docusaurus/plugin-content-docs/lib/versions/index.js:150:30) at async Object.pluginContentDocs [as plugin] (/Users/kywk/.node_modules/docusaurus/node_modules/@docusaurus/plugin-content-docs/lib/index.js:32:30) at async initializePlugin (/Users/kywk/.node_modules/docusaurus/node_modules/@docusaurus/core/lib/server/plugins/init.js:83:32) at async Promise.all (index 0) at async initPlugins (/Users/kywk/.node_modules/docusaurus/node_modules/@docusaurus/core/lib/server/plugins/init.js:91:21) at async loadPlugins (/Users/kywk/.node_modules/docusaurus/node_modules/@docusaurus/core/lib/server/plugins/index.js:26:21) at async load (/Users/kywk/.node_modules/docusaurus/node_modules/@docusaurus/core/lib/server/index.js:76:58) [INFO] Docusaurus version: 2.2.0 Node version: v16.17.1 error Command failed with exit code 1. info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.   個人專案檔案結構如下, 看得出同時包含 Docusaurus 專案結構以及其他 Obsidian 文章.  ❯ tree -a -d -L 2 . ├── .docusaurus │ ├── ... │ └── docusaurus-plugin-wikigraph ├── .git ├── .github │ └── workflows ├── .obsidian │ ├── plugins │ └── themes ├── _incoming │ ├── archive │ └── sandbox ├── _journaling │ ├── 2023 │ └── 2024 ├── _templates │ └── scripts ├── assets ├── backpacker │ ├── ... │ ├── 2401 Egypt │ ├── Around World │ └── PIWIW ├── blog.life │ ├── ... │ └── 2024 ├── blog.news │ ├── ... │ └── 2024 ├── com.XXXX │ ├── xxx │ └── zip_archive ├── docs ├── important ├── lifehacker │ ├── ... │ └── taiwan ├── moco │ ├── ... │ └── utilities ├── src │ ├── components │ ├── css │ └── pages └── static └── img ``` ## Docusaurus 如前述, Docusaurus 設定彈性很大, 只要指定到正確路徑即可. ```json plugins: [ ... [ '@docusaurus/plugin-content-docs', { id: 'moco', path: 'moco', routeBasePath: 'moco', sidebarPath: require.resolve('./sidebars.js'), }, ], [ '@docusaurus/plugin-content-blog', { id: 'news', routeBasePath: 'news', path: 'blog.news', showReadingTime: true, }, ], ... ],   ","version":"Next","tagName":"h2"},{"title":".gitignore​","type":1,"pageTitle":"[Docusaurus] Obsidian Integration","url":"/lifehacker/obsidian/docusaurus/Integrate Obsidian and Docusaurus/#gitignore","content":" 常見 Docusaurus 發佈到 GitHub 有兩種方式:  本地端手動 yarn build 之後手動把整個 build 資料夾上傳到伺服器即可.配置 GitHub Action, 專案 push 上去後觸發 CI/CD, 讓 GitHub 處理建置和發佈.  第二種方式工作流程較為順暢方便. 且若偶爾在沒有 node.js 環境工作, 只要能 push 上 GitHub, 都可以持續發佈更新網站.  但因專案裡同時包含透過 Obsidian 所管理的個人資料, 好好配置 .gitignore 避免個人資料不小心放上 GitHub 是相當重要的.  依實際需求把 Obsidian 專案設定和重要個人資料和工作資料加入 .gitignore 即可.  # Obsidian folder .obsidian/ assets/ # Personal &amp; Working folder com.A/ com.B/ important/ project/ temporary.md   ","version":"Next","tagName":"h2"},{"title":"Obsidian exclude​","type":1,"pageTitle":"[Docusaurus] Obsidian Integration","url":"/lifehacker/obsidian/docusaurus/Integrate Obsidian and Docusaurus/#obsidian-exclude","content":" 上述配置, 是讓 Docusaurus 工作時不受 Obsididan 影響. 相對的, Obsidian 也需要設定來避免 Docusaurus 檔案的影響.  Obsidian 0.14.6+ 以後支援 Excluded files. 符合 pattern 的檔案將不會被納入 Obsidian 資料庫內.  Setting &gt; Files &amp; Links &gt; Excluded files 把 Docusaurus 相關檔案加入即可.    Ref: ignore/hide select files and folders,  ","version":"Next","tagName":"h2"},{"title":"Trick & Tips​","type":1,"pageTitle":"[Docusaurus] Obsidian Integration","url":"/lifehacker/obsidian/docusaurus/Integrate Obsidian and Docusaurus/#trick--tips","content":" ","version":"Next","tagName":"h2"},{"title":"docusaurus draft​","type":1,"pageTitle":"[Docusaurus] Obsidian Integration","url":"/lifehacker/obsidian/docusaurus/Integrate Obsidian and Docusaurus/#docusaurus-draft","content":" 隨著 Obsidian 的使用, 在 docusaurus 相關目錄下可能會建立讓 Obsidian 管理的檔案, 例如把 Obsidian 當 Task Mamanger 的話, 會建立 Kanban.md,TODO.md 之類的檔案.  這些檔案內容若不想跟著 docusaurus 一起發佈出去. 最簡單的方式就是在 front matter 的部分加上 draft: true. 讓 docusaurus 把這類檔案視為草稿, 發佈時會自動忽略.  ","version":"Next","tagName":"h3"},{"title":"See Also​","type":1,"pageTitle":"[Docusaurus] Obsidian Integration","url":"/lifehacker/obsidian/docusaurus/Integrate Obsidian and Docusaurus/#see-also","content":" 第一階段的整合算是完成, 後續隨著深入使用 Obsidian, 預計會再折騰一番, 以打造量身製作的知識平台.  ","version":"Next","tagName":"h2"},{"title":"Next Step​","type":1,"pageTitle":"[Docusaurus] Obsidian Integration","url":"/lifehacker/obsidian/docusaurus/Integrate Obsidian and Docusaurus/#next-step","content":"  support obsidian wikilink Wikilink in Docusaurus ✅ 2024-05-15 ignore Obsidian tags ","version":"Next","tagName":"h3"},{"title":"obs-core_properties","type":0,"sectionRef":"#","url":"/lifehacker/obsidian/noting/obs-core_properties/","content":"obs-core_properties","keywords":"","version":"Next"},{"title":"Wikilink in Docusaurus","type":0,"sectionRef":"#","url":"/lifehacker/obsidian/docusaurus/Wikilink in Docusaurus/","content":"Wikilink in Docusaurus 讓 Obsidian 與 Docusaurus 一起協作 | Flow state.","keywords":"","version":"Next"},{"title":"[Notion] 用 Notion 記帳","type":0,"sectionRef":"#","url":"/lifehacker/obsidian/notion/notion_accounting/","content":"","keywords":"","version":"Next"},{"title":"前言 / 廢言​","type":1,"pageTitle":"[Notion] 用 Notion 記帳","url":"/lifehacker/obsidian/notion/notion_accounting/#前言--廢言","content":" 會想用 Notion 是在 Youtube 滑到 我用 Notion 打通 iPhone 快捷指令，做了一个免费的记账 APP。 - YouTube 這影片. 仔細看完後覺得是個不錯的想法, 便著手打造自己的 Notion 記帳資料庫.  ","version":"Next","tagName":"h2"},{"title":"Why Notion​","type":1,"pageTitle":"[Notion] 用 Notion 記帳","url":"/lifehacker/obsidian/notion/notion_accounting/#why-notion","content":" 選用 Notion 而不用 Obsidian 主要兩點.  線上同步記帳需要手機隨時同步, 目前我的 Obsidian 使用以 local storage 加上雲端磁碟來作為裝置間同步, 若同步頻率過於頻繁偶爾會發生檔案衝突的問題. 這問題在單篇筆記還好手動排除, 若是記帳的逐條紀錄, 失誤率可能會過高.  累計加總計算雖然 Obsidian 有些外掛可以模擬 Notion Database 的功能, 但其背後仍以 Obsidian 文件作為資料庫來源. 每日的記帳的統計需求有效能低落的疑慮.  ","version":"Next","tagName":"h3"},{"title":"Requirement​","type":1,"pageTitle":"[Notion] 用 Notion 記帳","url":"/lifehacker/obsidian/notion/notion_accounting/#requirement","content":" 幾個個人需求如下:  ","version":"Next","tagName":"h2"},{"title":"Keep it simple​","type":1,"pageTitle":"[Notion] 用 Notion 記帳","url":"/lifehacker/obsidian/notion/notion_accounting/#keep-it-simple","content":" 如同 我用 Notion 打通 iPhone 快捷指令，做了一个免费的记账 APP。 - YouTube 影片中所提, 單純記帳其實很簡單, 不該放入太多投資理財功能進來. 雖然個人仍有其他帳務需求, 但仍會秉持 Keep it simple 核心概念來設計帳務資料庫與樣板.  ","version":"Next","tagName":"h3"},{"title":"分離帳戶​","type":1,"pageTitle":"[Notion] 用 Notion 記帳","url":"/lifehacker/obsidian/notion/notion_accounting/#分離帳戶","content":" 日前使用 AndroMoney 當記帳軟體時, 很喜歡裡面的帳戶功能. 可以建立錢包 / 信用卡 / 銀行 / ... 等多個帳戶, 記帳時紀錄從哪個帳戶支出開銷, 並紀錄帳戶間的轉帳資訊. 可以統計不同帳戶的支出狀況, 在信用卡的管理使用上很是方便.  ","version":"Next","tagName":"h3"},{"title":"預算管理​","type":1,"pageTitle":"[Notion] 用 Notion 記帳","url":"/lifehacker/obsidian/notion/notion_accounting/#預算管理","content":" 這部份是從 手機記帳💰 如何用 Notion APP 每日記帳 &amp; 預算法則 | Notion 分享 - YouTube 偷來的概念. 覺得有預算控管的分類, 的確可以更有效了解自己開支是否浪費.  ","version":"Next","tagName":"h3"},{"title":"總覽 / 檢視面板​","type":1,"pageTitle":"[Notion] 用 Notion 記帳","url":"/lifehacker/obsidian/notion/notion_accounting/#總覽--檢視面板","content":" ","version":"Next","tagName":"h3"},{"title":"Database​","type":1,"pageTitle":"[Notion] 用 Notion 記帳","url":"/lifehacker/obsidian/notion/notion_accounting/#database","content":" ExpenseIncomingTransferBudgetingAccounts  ","version":"Next","tagName":"h2"},{"title":"Dashboard​","type":1,"pageTitle":"[Notion] 用 Notion 記帳","url":"/lifehacker/obsidian/notion/notion_accounting/#dashboard","content":" Finance SummaryMonthly / Yearly Review  ","version":"Next","tagName":"h2"},{"title":"API Integration​","type":1,"pageTitle":"[Notion] 用 Notion 記帳","url":"/lifehacker/obsidian/notion/notion_accounting/#api-integration","content":" API to add an expense record  ","version":"Next","tagName":"h2"},{"title":"See Also​","type":1,"pageTitle":"[Notion] 用 Notion 記帳","url":"/lifehacker/obsidian/notion/notion_accounting/#see-also","content":" ","version":"Next","tagName":"h2"},{"title":"後記​","type":1,"pageTitle":"[Notion] 用 Notion 記帳","url":"/lifehacker/obsidian/notion/notion_accounting/#後記","content":" 這次的 reference 都為 Youtube 影片...  曾幾何時, Youtube 上 20 分鐘的影片已經成了長影片, 更多的是不知所云的三物而圖文為主的部落格幾乎完全失利了. 除了專業技術文章外, 稍微普羅大眾一點的資訊都只能從影片上找教學.  但老派如我, 仍覺得文章閱讀非但較清楚, 還能依自己的速度和需求快轉或停留, 就像個人仍比較喜歡漫畫甚過動畫, 小說勝過翻拍電影一樣.  ","version":"Next","tagName":"h3"},{"title":"Refs​","type":1,"pageTitle":"[Notion] 用 Notion 記帳","url":"/lifehacker/obsidian/notion/notion_accounting/#refs","content":" 手機記帳💰 如何用 Notion APP 每日記帳 &amp; 預算法則 | Notion 分享 - YouTube如何透過Notion記帳💰？免費記帳模板 - YouTube  ","version":"Next","tagName":"h3"},{"title":"TODO​","type":1,"pageTitle":"[Notion] 用 Notion 記帳","url":"/lifehacker/obsidian/notion/notion_accounting/#todo","content":" ","version":"Next","tagName":"h3"},{"title":"Notion document design​","type":1,"pageTitle":"[Notion] 用 Notion 記帳","url":"/lifehacker/obsidian/notion/notion_accounting/#notion-document-design","content":"  Database schema &amp; relationship 📅 2024-04-18 ✅ 2024-04-18 開支 summary dashboard 📅 2024-05-21 帳戶 summary dashboard 📅 2024-05-24 年 / 月報表 📅 2024-05-26  ","version":"Next","tagName":"h3"},{"title":"Notion accounting 文章​","type":1,"pageTitle":"[Notion] 用 Notion 記帳","url":"/lifehacker/obsidian/notion/notion_accounting/#notion-accounting-文章","content":"  Keep it simple 📅 2024-05-19 分離帳戶 / 預算控制 Dashboard  ","version":"Next","tagName":"h3"},{"title":"Next Step​","type":1,"pageTitle":"[Notion] 用 Notion 記帳","url":"/lifehacker/obsidian/notion/notion_accounting/#next-step","content":"  API integration Telegram bot ","version":"Next","tagName":"h3"},{"title":"Awesome Obsidian Resource","type":0,"sectionRef":"#","url":"/lifehacker/obsidian/obs_awesome/","content":"","keywords":"","version":"Next"},{"title":"Tutorial​","type":1,"pageTitle":"Awesome Obsidian Resource","url":"/lifehacker/obsidian/obs_awesome/#tutorial","content":" 玩转Obsidian的保姆级教程 - 知乎  ","version":"Next","tagName":"h2"},{"title":"簡睿隨筆​","type":1,"pageTitle":"Awesome Obsidian Resource","url":"/lifehacker/obsidian/obs_awesome/#簡睿隨筆","content":" Markdown工具[Obs＃111] 幾個最近使用的外掛：Surfing、Quiet Outline、Colorful Tag、Share as Gist、Commander - 簡睿隨筆  ","version":"Next","tagName":"h3"},{"title":"Personal Pack​","type":1,"pageTitle":"Awesome Obsidian Resource","url":"/lifehacker/obsidian/obs_awesome/#personal-pack","content":" My 3 Favorite Obsidian Themes and Plugins | ProduclivityObsidian plugins for 2023 - YouTube  ","version":"Next","tagName":"h2"},{"title":"Trick and Tip​","type":1,"pageTitle":"Awesome Obsidian Resource","url":"/lifehacker/obsidian/obs_awesome/#trick-and-tip","content":" ","version":"Next","tagName":"h2"},{"title":"See Also​","type":1,"pageTitle":"Awesome Obsidian Resource","url":"/lifehacker/obsidian/obs_awesome/#see-also","content":" Obsidian Forumr/ObsidianMD/ ","version":"Next","tagName":"h2"},{"title":"[Obs] Customize my Obsidian","type":0,"sectionRef":"#","url":"/lifehacker/obsidian/obs_customization-latest/","content":"","keywords":"","version":"Next"},{"title":"Theme & Main Layout​","type":1,"pageTitle":"[Obs] Customize my Obsidian","url":"/lifehacker/obsidian/obs_customization-latest/#theme--main-layout","content":" Theme: Blue-Topaz: A blue theme for Obsidian.  ","version":"Next","tagName":"h2"},{"title":"Left Sidebar​","type":1,"pageTitle":"[Obs] Customize my Obsidian","url":"/lifehacker/obsidian/obs_customization-latest/#left-sidebar","content":" ","version":"Next","tagName":"h2"},{"title":"Access Vault​","type":1,"pageTitle":"[Obs] Customize my Obsidian","url":"/lifehacker/obsidian/obs_customization-latest/#access-vault","content":" Toggle HotKey: ⌥ ←  Files​  Search​  Tags​  All Properties​  ","version":"Next","tagName":"h3"},{"title":"Current Note​","type":1,"pageTitle":"[Obs] Customize my Obsidian","url":"/lifehacker/obsidian/obs_customization-latest/#current-note","content":" Outline​  Local Graph View​  Backlink​  Outgoing link​  ","version":"Next","tagName":"h3"},{"title":"Right Sidebar​","type":1,"pageTitle":"[Obs] Customize my Obsidian","url":"/lifehacker/obsidian/obs_customization-latest/#right-sidebar","content":" Toggle HotKey: ⌥ →  ","version":"Next","tagName":"h2"},{"title":"Calendar​","type":1,"pageTitle":"[Obs] Customize my Obsidian","url":"/lifehacker/obsidian/obs_customization-latest/#calendar","content":" ","version":"Next","tagName":"h3"},{"title":"Quick Access​","type":1,"pageTitle":"[Obs] Customize my Obsidian","url":"/lifehacker/obsidian/obs_customization-latest/#quick-access","content":" ACTION​  BACKLOG​  IDEA-POOL​  TOGO​  ","version":"Next","tagName":"h3"},{"title":"See Also​","type":1,"pageTitle":"[Obs] Customize my Obsidian","url":"/lifehacker/obsidian/obs_customization-latest/#see-also","content":"","version":"Next","tagName":"h2"},{"title":"[Obs] Obsidian as task manager","type":0,"sectionRef":"#","url":"/lifehacker/obsidian/obs_task-management/","content":"","keywords":"","version":"Next"},{"title":"See Also​","type":1,"pageTitle":"[Obs] Obsidian as task manager","url":"/lifehacker/obsidian/obs_task-management/#see-also","content":" 我如何用 Obsidian 管理任務清單 - Jenny Liang (jsliang) ","version":"Next","tagName":"h2"},{"title":"[Obs] Why & How","type":0,"sectionRef":"#","url":"/lifehacker/obsidian/obs_why-n-how/","content":"","keywords":"","version":"Next"},{"title":"Obsidian V.S. ?​","type":1,"pageTitle":"[Obs] Why & How","url":"/lifehacker/obsidian/obs_why-n-how/#obsidian-vs-","content":" 工作上多個專案與代辦事項需統整, 多個臨時念頭需紀錄, 決定找個筆記軟體好好深入使用. 恰好遇上 Obsidian 1.0 發佈, 而無所不知的 Google 也在這段時間塞了一堆 logseq 的介紹. 筆記軟體的比較, 後來逐漸收斂:  ","version":"Next","tagName":"h2"},{"title":"Notion​","type":1,"pageTitle":"[Obs] Why & How","url":"/lifehacker/obsidian/obs_why-n-how/#notion","content":" 長期來看線上服務不穩定性還是偏高, 無論發展不錯被併購, 還是不如預期而收攤. 作為長期個人知識庫, 能使用本地端儲存是相當重要的.  Notion 的強大不用多說, 但卻是第一個被淘汰的, 主因就是 Notion 無法本地倉儲. 畢竟線上服務還是吸引人, 日後也可能透過 plugins 和 Obsidian 協同工作.  Day 02 : 你所知道的「筆記工具」，早就演化成不同的物種 | iT 邦幫忙::一起幫忙解決難題，拯救 IT 人的一天5 分鐘 Obsidian 與 Notion 資料庫整合設置教學 - YouTube數位筆記工具｜Notion &amp; Obsidian的使用心得｜方格子 vocusObsidian 入門- 8個基礎功能/ 從Notion 跨域必有的疑問 | by 有個 Alix | Medium  ","version":"Next","tagName":"h3"},{"title":"Logseq​","type":1,"pageTitle":"[Obs] Why & How","url":"/lifehacker/obsidian/obs_why-n-how/#logseq","content":" 從各方面來說, Logseq 和 Obsidian 是相當雷同的, 就連主要工程師也都是華人.  比較兩者之間優缺劣弊時, 同時了解因著 community plugins, Obsidian / Logseq 能有許多意想不到的用途. 而兩者之間功能特點上差異痛點, 也往往可以藉由 plugins 補齊.  考量還有 ChromeOS 的需求, 本來是想搬家有線上版的 Logseq, 最後決定還是落腳 Obsidian 主要兩個原因: 速度, 折騰  速度差異是主因原因, 透過折騰可彌補 Obsidian 罩門, 使其變成更好的選擇.  你们在Notion、Obsidian、Logseq三者中如何选择？将哪个作为主力笔记软件？为什么？ - 知乎Obsidian和Logseq对比 - SKYue's HomeLogseq 知識連結筆記教學，免費替代 Roam research、Obsidian优质筆記軟體评测与盘点（二）——Logseq、Obsidian、思源笔记、FlowUs 深度评测｜方格子 vocus使用logseq与obsidian共同管理你的笔记 - 知乎  ","version":"Next","tagName":"h3"},{"title":"How I Use Obsidian​","type":1,"pageTitle":"[Obs] Why & How","url":"/lifehacker/obsidian/obs_why-n-how/#how-i-use-obsidian","content":" ","version":"Next","tagName":"h2"},{"title":"Uni Markdown Editor​","type":1,"pageTitle":"[Obs] Why & How","url":"/lifehacker/obsidian/obs_why-n-how/#uni-markdown-editor","content":" ","version":"Next","tagName":"h3"},{"title":"Universal Noting​","type":1,"pageTitle":"[Obs] Why & How","url":"/lifehacker/obsidian/obs_why-n-how/#universal-noting","content":" ","version":"Next","tagName":"h3"},{"title":"Habit Tracking​","type":1,"pageTitle":"[Obs] Why & How","url":"/lifehacker/obsidian/obs_why-n-how/#habit-tracking","content":" ","version":"Next","tagName":"h3"},{"title":"Task Management​","type":1,"pageTitle":"[Obs] Why & How","url":"/lifehacker/obsidian/obs_why-n-how/#task-management","content":" ","version":"Next","tagName":"h3"},{"title":"Project Management​","type":1,"pageTitle":"[Obs] Why & How","url":"/lifehacker/obsidian/obs_why-n-how/#project-management","content":" ","version":"Next","tagName":"h3"},{"title":"Around me​","type":1,"pageTitle":"[Obs] Why & How","url":"/lifehacker/obsidian/obs_why-n-how/#around-me","content":" ","version":"Next","tagName":"h2"},{"title":"Trick & Tip​","type":1,"pageTitle":"[Obs] Why & How","url":"/lifehacker/obsidian/obs_why-n-how/#trick--tip","content":" Integrate Obsidian &amp; DocusaurusSyncing Vault  ","version":"Next","tagName":"h3"},{"title":"Plugin​","type":1,"pageTitle":"[Obs] Why & How","url":"/lifehacker/obsidian/obs_why-n-how/#plugin","content":" Daily notesKanbanTrackerTemplater    See Also: Awesome Obsidian ","version":"Next","tagName":"h3"},{"title":"[Obs] Syncing Obsidian Valut","type":0,"sectionRef":"#","url":"/lifehacker/obsidian/obs-howto_sync/","content":"","keywords":"","version":"Next"},{"title":"See Also​","type":1,"pageTitle":"[Obs] Syncing Obsidian Valut","url":"/lifehacker/obsidian/obs-howto_sync/#see-also","content":"","version":"Next","tagName":"h2"},{"title":"[Obs] Daily Notes","type":0,"sectionRef":"#","url":"/lifehacker/obsidian/obs-core_daily-notes/","content":"","keywords":"","version":"Next"},{"title":"Date Format​","type":1,"pageTitle":"[Obs] Daily Notes","url":"/lifehacker/obsidian/obs-core_daily-notes/#date-format","content":" 喜歡 My Obsidian Daily Note Template | Dann Berg: blog, newsletter, shop, and more中分年月資料夾的樹狀結構, YYYY/MM-MMM/YYYY-MM-DD-dddd  ","version":"Next","tagName":"h3"},{"title":"Template​","type":1,"pageTitle":"[Obs] Daily Notes","url":"/lifehacker/obsidian/obs-core_daily-notes/#template","content":" src: DAILY_NOTE_TEMPLATE.md  隨著 Obsidian community plugins 越蓬勃發展, Daily Notes 扮演角色也越建多元.  ","version":"Next","tagName":"h2"},{"title":"IDEA Pool​","type":1,"pageTitle":"[Obs] Daily Notes","url":"/lifehacker/obsidian/obs-core_daily-notes/#idea-pool","content":" ","version":"Next","tagName":"h3"},{"title":"Task & Reminds​","type":1,"pageTitle":"[Obs] Daily Notes","url":"/lifehacker/obsidian/obs-core_daily-notes/#task--reminds","content":" ","version":"Next","tagName":"h3"},{"title":"Todo & Routing​","type":1,"pageTitle":"[Obs] Daily Notes","url":"/lifehacker/obsidian/obs-core_daily-notes/#todo--routing","content":" ","version":"Next","tagName":"h3"},{"title":"Today Review​","type":1,"pageTitle":"[Obs] Daily Notes","url":"/lifehacker/obsidian/obs-core_daily-notes/#today-review","content":" Notes created &amp; modified today,Task finished successfully  ","version":"Next","tagName":"h3"},{"title":"See Also​","type":1,"pageTitle":"[Obs] Daily Notes","url":"/lifehacker/obsidian/obs-core_daily-notes/#see-also","content":" 【Obsidian 使用教學】應用篇 03 — 如何使用 Obsidian 進行每日復盤？使用 Daily note 建立寫筆記的好習慣 | by 朱騏 | MediumMy Obsidian Daily Note Template | Dann Berg: blog, newsletter, shop, and moreMy Obsidian Daily Note Template 2022 | Michelle MacObsidian Daily Note Implementation v2 – AgileAdam.com ","version":"Next","tagName":"h2"},{"title":"[Obs] Properties","type":0,"sectionRef":"#","url":"/lifehacker/obsidian/obs-core_properties/","content":"","keywords":"","version":"Next"},{"title":"YAML front matter​","type":1,"pageTitle":"[Obs] Properties","url":"/lifehacker/obsidian/obs-core_properties/#yaml-front-matter","content":" YAML front matter 雖然不是 Markdown 文件的標準, 但因常被以 Markdown 作為文件格式的部落格 / CMS / 筆記 / ... 程式廣泛使用, 常見的 Markdown 編輯器幾乎都支援 YAML front matter 的編輯, 或是至少不會報錯.  Obsidian 過往對 front metter 支援算是友善, 除了不會因 front metter 報錯外, 也原生支援部分 Key 如下:  tags 标签的使用 - Obsidian 中文帮助 - Obsidian Publishalias 为笔记添加别名 - Obsidian 中文帮助 - Obsidian Publishcssclasspublish 发布 - Obsidian 中文帮助 - Obsidian Publish  ","version":"Next","tagName":"h2"},{"title":"Plugin support​","type":1,"pageTitle":"[Obs] Properties","url":"/lifehacker/obsidian/obs-core_properties/#plugin-support","content":" YAML front matter 可以用來對文章添加屬性資訊, 有些 plugin 會利用 YAML front matter 來作事, 熱門 Plugins - DataView 就是把文件 front metter 裡的資料當資料庫來搜尋使用. 可以說每份文件中 front metter 裡的資料就像是 NoSQL 的一份 document.  ","version":"Next","tagName":"h3"},{"title":"Properties​","type":1,"pageTitle":"[Obs] Properties","url":"/lifehacker/obsidian/obs-core_properties/#properties","content":" Obsidian 自 1.4.5 之後, 強化 YAML font metter 區塊, 推出 Properties 屬性欄位 的支援, 帶來許多特點.  ","version":"Next","tagName":"h2"},{"title":"Look & Feel​","type":1,"pageTitle":"[Obs] Properties","url":"/lifehacker/obsidian/obs-core_properties/#look--feel","content":"   最明顯的改變首先是外觀, 原本 Obsidian 的 front metter 區塊並沒有特別樣式, 和文件內容一致. 自己就曾經要修改內文卻編輯到 front metter 區塊的資訊. 而改版後則明顯看得出 front metter 和文件區塊有所區別, front metter 區塊除了顯示 UI 不同外, 還有提示每個欄位的資料屬性.  ","version":"Next","tagName":"h3"},{"title":"Data Type​","type":1,"pageTitle":"[Obs] Properties","url":"/lifehacker/obsidian/obs-core_properties/#data-type","content":"   發文當下 Obsidian (1.5.3) 的屬性支援以下幾種資料  Text: 一般的文字資料List: ArrayNumber: 數字格式, 可被其他 plugin 用以計算Checkbox: 適合當作 TODO 使用Data / Date &amp; Time: 日期時間欄位, 適合用來標示筆記日期, 或 TODO due day 等等.  ","version":"Next","tagName":"h3"},{"title":"Search by Properties​","type":1,"pageTitle":"[Obs] Properties","url":"/lifehacker/obsidian/obs-core_properties/#search-by-properties","content":" ...TBD...  ","version":"Next","tagName":"h3"},{"title":"Memo​","type":1,"pageTitle":"[Obs] Properties","url":"/lifehacker/obsidian/obs-core_properties/#memo","content":" YAML front metter 配合一些 plugin 就可以玩出許多花樣, 讓 Obsidian 不再只是單純的筆記工具, 從個人 TODO 管理到團隊/中大型專案管理都有諸多案例分享可查. Obsidian Properties 的支援更是讓 front metter 編輯變得簡單容易, 是個有感的功能.  2023.12.28 updated  Obsidian 1.5 的更新中, 針對 Properties 支援再更進一步, 其中最有感的大概是全域更改欄位名稱這個功能吧.  Properties can now be renamed globally. Renaming will cause the property to be modified in each corresponding file and the search is case-insensitive.Global Search: Search now works with non-string property values. Search for boolean values property:TRUE or property:FALSE or empty values property:EMPTY. You can also use inequality operators to search for things like some_property:&gt;10.Global properties view can now be filtered.  ","version":"Next","tagName":"h2"},{"title":"See Also​","type":1,"pageTitle":"[Obs] Properties","url":"/lifehacker/obsidian/obs-core_properties/#see-also","content":" Obsidian 的 YAML Front matter 介绍 by Bon - Obsidian中文教程 - Obsidian PublishYAML front matter - Obsidian 中文帮助 - Obsidian PublishObsidian 推出 Properties 應用教學，解救混亂筆記、追蹤遺漏任務【搭建你的日记本】使用 Properties 与 templates 实现一个日记模板 - 经验分享 - Obsidian 中文论坛Obs133 | Properties (Obsidian 1.4)! 視覺化YAML編輯，讓Frontmatter可用性又向上一階 – 簡睿隨筆 ","version":"Next","tagName":"h2"},{"title":"[Obs] Kanban plugin","type":0,"sectionRef":"#","url":"/lifehacker/obsidian/obs-plugin_kanban/","content":"","keywords":"","version":"Next"},{"title":"Trick & Tip​","type":1,"pageTitle":"[Obs] Kanban plugin","url":"/lifehacker/obsidian/obs-plugin_kanban/#trick--tip","content":" ","version":"Next","tagName":"h2"},{"title":"Todo checkbox​","type":1,"pageTitle":"[Obs] Kanban plugin","url":"/lifehacker/obsidian/obs-plugin_kanban/#todo-checkbox","content":" ","version":"Next","tagName":"h3"},{"title":"Tag​","type":1,"pageTitle":"[Obs] Kanban plugin","url":"/lifehacker/obsidian/obs-plugin_kanban/#tag","content":" ","version":"Next","tagName":"h3"},{"title":"Date​","type":1,"pageTitle":"[Obs] Kanban plugin","url":"/lifehacker/obsidian/obs-plugin_kanban/#date","content":" ","version":"Next","tagName":"h3"},{"title":"Template​","type":1,"pageTitle":"[Obs] Kanban plugin","url":"/lifehacker/obsidian/obs-plugin_kanban/#template","content":" How to Develop Your Career Plan on a Kanban Board  ","version":"Next","tagName":"h2"},{"title":"See Also​","type":1,"pageTitle":"[Obs] Kanban plugin","url":"/lifehacker/obsidian/obs-plugin_kanban/#see-also","content":" How to Turn Obsidian Into a Personal Kanban Organizer My Obsidian-Based Kanban Writing Workflow – The Sweet Setup kanban——自定义任务流程【玩转Obsidian的保姆级教程】 - 知乎 Kanban Made Easy in Obsidian - Kanban Plugin - YouTube Intro to Obsidian Kanban - YouTube Trello-Like Kanban in Obsidian - YouTube 在obsidian中如何使用QuickAdd和Kanban插件来管理日程_哔哩哔哩_bilibili Colorful tags for Obsidian Kanban is available now! (Link in comments) : ObsidianMD ","version":"Next","tagName":"h2"},{"title":"[Obs] Templater plugin","type":0,"sectionRef":"#","url":"/lifehacker/obsidian/obs-plugin_templater/","content":"","keywords":"","version":"Next"},{"title":"Trick and Tip​","type":1,"pageTitle":"[Obs] Templater plugin","url":"/lifehacker/obsidian/obs-plugin_templater/#trick-and-tip","content":" Paste clipboard into list of wikilinks  ","version":"Next","tagName":"h2"},{"title":"See Also​","type":1,"pageTitle":"[Obs] Templater plugin","url":"/lifehacker/obsidian/obs-plugin_templater/#see-also","content":"","version":"Next","tagName":"h2"},{"title":"obs-plugin_tasks","type":0,"sectionRef":"#","url":"/lifehacker/obsidian/obs-plugin_tasks/","content":"obs-plugin_tasks","keywords":"","version":"Next"},{"title":"[Obs] Link to block","type":0,"sectionRef":"#","url":"/lifehacker/obsidian/obs-tip_block-link-n-embed/","content":"","keywords":"","version":"Next"},{"title":"Case study​","type":1,"pageTitle":"[Obs] Link to block","url":"/lifehacker/obsidian/obs-tip_block-link-n-embed/#case-study","content":" ","version":"Next","tagName":"h2"},{"title":"See Also​","type":1,"pageTitle":"[Obs] Link to block","url":"/lifehacker/obsidian/obs-tip_block-link-n-embed/#see-also","content":" Link to blocks - Obsidian Help[Obs#14] 簡單的區塊引用測試(Block References)與自訂區塊代碼說明 – 簡睿隨筆 ","version":"Next","tagName":"h2"},{"title":"[Obs] Tracker plugin","type":0,"sectionRef":"#","url":"/lifehacker/obsidian/obs-plugin_tracker/","content":"","keywords":"","version":"Next"},{"title":"See Also​","type":1,"pageTitle":"[Obs] Tracker plugin","url":"/lifehacker/obsidian/obs-plugin_tracker/#see-also","content":" Building a USEFUL Habit Tracker in Obsidian - YouTube ","version":"Next","tagName":"h2"},{"title":"大稻埕 七夕花火節","type":0,"sectionRef":"#","url":"/lifehacker/photography/chinese-valentines-day-fireworks/","content":"大稻埕 七夕花火節 北上工作近四年，第一次的煙火拍攝！ 對於花火，始終停留在第一次花火節那次，和杏旻坐在河堤草地上，欣賞煙火配合音樂演出。 第一次覺得花火除了爆開那瞬間的美麗外，也是很撼動人的表演藝術！ 近年來因單眼售價親民，攝影風氣普及，熱門景點、節慶、花季總不缺攝影人取景。 一方面為台灣的四季風情、人文留下不少美麗的影像， 一方面卻也龍蛇雜處發生許多攝影人的爭議糾紛。 煙火一向是熱門的攝影題材，101 跨年煙火，總前三天就有人進駐象山卡位 這次大稻埕七夕花火節亦然，前一晚就可看到橋墩上鎖了許多隻腳架 攝影人的風靡，往往讓我不願去跟拍 一者大多人拍的大同小異，一者容易不小心擦槍走火、無謂糾紛 這次在蔡易霖的邀約下，到他軍中同袍家頂樓觀賞 「球場第一排」視野果然一流，無需豔陽下辛苦卡位，可自由取景，還可一旁喝喝啤酒再繼續。 而另一個重點是，因取景角度不同，相片也比較「不一樣」！ 致高點非但可更完整拍到水面煙火的全貌，高空煙火也不易因透視變形而過於扭曲 感謝 collin 提供 VIP 包廂級私房基地，我滿足了，明年拍攝任務交給你了！ 我有疊片！！！其中某幾張！ 或換個說法，數位重曝。 並不覺得攝影不該後製，攝影除了記錄外，其實有更多「創作」的成份 廣角變形、長焦壓縮、焦外散景，長曝光軌，都不是肉眼可見的影像 拍攝煙火，不知下一發會在哪個位置、什麼形狀顏色 這次刪掉不少張因為煙火過多、過雜、過曝的相片 拍攝過程中多次已經有取得滿意的高空煙火，遮著黑卡等候水面煙火 一等又是好幾發精采的花火，一放棄就一朵在水面上綻放 其賭運氣等候，不如多拍幾張各式煙火當素材，事後疊片 最後，來張忘了數 120 秒的合照","keywords":"","version":"Next"},{"title":"Atomic Habits","type":0,"sectionRef":"#","url":"/lifehacker/reading/atomic-habits/","content":"","keywords":"","version":"Next"},{"title":"How to create a good habit:​","type":1,"pageTitle":"Atomic Habits","url":"/lifehacker/reading/atomic-habits/#how-to-create-a-good-habit","content":" The 1st law (Cue): Make it obvious. The 2nd law (Craving): Make it attractive. The 3rd law (Response): Make it easy. The 4th law (Reward): Make it satisfying. ","version":"Next","tagName":"h2"},{"title":"[Obs] 快速鍵","type":0,"sectionRef":"#","url":"/lifehacker/obsidian/obs-tip_hot-key/","content":"","keywords":"","version":"Next"},{"title":"Default​","type":1,"pageTitle":"[Obs] 快速鍵","url":"/lifehacker/obsidian/obs-tip_hot-key/#default","content":" 功能\t快速鍵\t備註打开控制面板\t⌘ P 打开快速启动器\t⌘ O\t  ","version":"Next","tagName":"h2"},{"title":"My Setting​","type":1,"pageTitle":"[Obs] 快速鍵","url":"/lifehacker/obsidian/obs-tip_hot-key/#my-setting","content":" 功能\t快速建打開左側 Sidebar\t⌥ ← 打開右側 Sidebar\t⌥ →  ","version":"Next","tagName":"h2"},{"title":"See Also​","type":1,"pageTitle":"[Obs] 快速鍵","url":"/lifehacker/obsidian/obs-tip_hot-key/#see-also","content":" ","version":"Next","tagName":"h2"},{"title":"Key Map​","type":1,"pageTitle":"[Obs] 快速鍵","url":"/lifehacker/obsidian/obs-tip_hot-key/#key-map","content":" ⌘ Command (or Cmd)⌥ Option (or Alt)⌃ Control (or Ctrl)⇧ Shift ↑ ↓ → ← on your keyboard?  ","version":"Next","tagName":"h3"},{"title":"Refs​","type":1,"pageTitle":"[Obs] 快速鍵","url":"/lifehacker/obsidian/obs-tip_hot-key/#refs","content":" 快捷键 - Obsidian-docs ","version":"Next","tagName":"h3"},{"title":"2014.03.09 雙溪櫻花 重回初心","type":0,"sectionRef":"#","url":"/lifehacker/runner/cherry-blossom-blvd-marathon/","content":"","keywords":"","version":"Next"},{"title":"See Also​","type":1,"pageTitle":"2014.03.09 雙溪櫻花 重回初心","url":"/lifehacker/runner/cherry-blossom-blvd-marathon/#see-also","content":" 網路上滿滿櫻花馬心得，看了會感動，跑過就懂！  雙溪櫻花初馬~終點的感動初馬-聽說櫻花馬很硬!!!2014北馬雙溪櫻花初馬完賽人生初馬-雙溪櫻花2014北馬雙溪櫻花初馬在自己的馬年拿到人生第一隻初馬-櫻花馬很弱的櫻花馬初馬關門組櫻花馬 15.8k水站處照片 &amp; 志工心得 ","version":"Next","tagName":"h2"},{"title":"2013.11.10 米倉田中馬拉松","type":0,"sectionRef":"#","url":"/lifehacker/runner/changhua-tianzhong/","content":"2013.11.10 米倉田中馬拉松","keywords":"","version":"Next"},{"title":"2014.02.08 大甲好神 開運罩 新春第一跑 行運繞境財匯路跑","type":0,"sectionRef":"#","url":"/lifehacker/runner/dajia-activate-good-luck/","content":"2014.02.08 大甲好神 開運罩 新春第一跑 行運繞境財匯路跑 這是為了獎牌有特色而報名參加的一場活動。 一直很喜歡用心有特色的獎牌，看到和活動主題相互輝應的滿月金鎖造形獎牌， 加上後續網路上看到主辦單位和跑友的密切互動，覺得是個用心的主辦單位，因而報名。 在會場首先遇上摸彩卷排隊人龍，和補發晶片排隊搞混，引來跑友批評。 其實摸彩卷真的該事先和報到物資一同寄發，忘了帶是跑友自己過錯，任何現場發放東西都要排隊，不小心就會引來不快。 開跑前不久慢慢走向起跑點，眼看著開跑時間到了還在表演，一頭霧水中等了一會兒才慢慢前進。 因隔天還有場丹大林道超半馬，第一次連日跑，就把這場當作 LSD 來跑，放慢腳步玩，出發時跑在中後段班。 不久後到有名的大甲鎮瀾宮，我和不少跑友都進去拜拜拍照，果然志不在跑步阿！ 台一省道清水大甲段沿途風景很漂亮，以前單車環島時也曾在這停留拍照好一會。 天候涼爽很適合跑步，就是風大了點，去程順風跑得很爽，折返後逆風很涼快。 遇上最酷、最強的裝扮：西遊記師徒四人和拉拉熊。 朋友看了 FB 的相片後留言：看到這種照片都覺得台灣還是走在進步的道路上～ 市區繞了一小段，有些路口有工作人員協助指揮，有些路口則無，由跑者自己停等紅綠燈。 離開市區不久在大甲溪橋的補給站，聽到工作人員說水不夠了！！ 而補給站上滿滿一桌水，不少跑友橫跨馬路到對岸取水。 在車速頗快的台一省道上，頗為危險，還好後來有些工作人員協助作交管。 整場路線多沿著台一省道行進，以台一線的車流量和行駛速度來說，並不是活動路跑的好選擇。 交管至少該確保前段班選手全程順利行進，中後段班選手可以安全行進、不需時常閃躲車輛。 這兩點在這場都沒做好，甚至聽聞有得獎機會的選手因路線標示不清而跑錯的。 大會預備流動廁所不足，沿途相當多跑友進加油站廟宇上廁所； 補給站補給品短缺，跑友自行進超商補給，還有進保養場商借飲水機喝水的。 就這樣沒有里程標示、沒有行進路線指示、空有補給站沒有水的狀態下跑完全場。 很慶幸天氣陰涼不炎熱，自己配速也慢，沒喝水還能輕鬆完賽。 進終點後沒看到金牌，有點訝異！說好的金牌呢？怎麼不是在進終點時領？ 在工作人員指示下前進，看到還有踏氣球、爬樓梯、水霧門等關卡，傻眼。 自己其實不反對由廣告、公關、行銷公司主辦路跑活動，讓路跑活動多些創意激盪是好事。 但有些創意請留給 10k 以下的活動來玩。 半馬以上的距離，跑者完賽後只想順利領完獎牌、證書、紀念品、扮手禮、餐點，在一旁好好用餐休息、拉筋緩和。 在這兩年路跑活動盛行下，經驗不足實在不該再是主辦單位的藉口。 從官網和網友互動、紀念品設計等方面來看，不能說主辦單位不用心。但是__方向錯誤__！ 運動筆記上有太多賽事的跑者心得分享，馬場的重點不在大會活動舞台，而在賽道。 究竟跑者想要的是什麼：被照顧到的感受。 能輕鬆以自己步伐在賽道上前進，不用擔心交通、不需煩惱補給，若不幸身體不適還能享有第一時間的照護。 半馬以上的活動，如果不能提供跑友最基本的安全，再多創意也沒用。 所謂的安全，至少包括路線、交管、補給！ 馬拉松活動，紀念品、扮手禮、獎牌、抽獎或其他的創意活動再多，不過是一串0；安全才是最前面領頭的1。 本末倒置，可惜了規劃的用心。","keywords":"","version":"Next"},{"title":"2014.02.23 旗鼓相當報馬盃","type":0,"sectionRef":"#","url":"/lifehacker/runner/cishan/","content":"2014.02.23 旗鼓相當報馬盃 會報名這場__旗山天后宮第一屆 旗鼓相當報馬盃__，是在跑者廣場上看到主辦單位和跑友的熱情討論。 過往經驗，會在跑者廣場上和跑友對話的賽事都不錯，加上由口碑極佳的大腳丫主辦，立馬報名。 後來出現台北渣打公益馬拉松，著時猶豫了好一會兒。 費用上，高雄往返的交通跟放棄報名費改參加渣打馬差不多， 而渣打馬有大半路程在河濱公園跑，總希望能安排更多市區路線，來個名副其實的城市馬，而非河濱馬。 決定如期參加旗鼓相當報馬盃。 6:30 在旗山體育場起跑後往楠梓仙溪方向前去，陽光從旗尾山後漸露曙光，配上旗山橋斜張橋索，專屬跑者的美景。 旗尾山是和美濃鎮的交界點，形勢高聳，秀麗嫵媚，和面對的鼓山遙遙相對，形成所謂的「旗鼓相當」，遠遠望去好像很多的旗子飄搖，以前被列為「台陽八景」之一。 跑過旗美高中，繞了義民廟一圈，鄉間風情十足。然路徑也是鄉間小徑，在這塞車了好一會。 沿著義民廟跑回旗美高中遇上第一個補給站，學生熱情的為跑友加油著。喝杯水後身子也暖開了，稍微放開來跑。 回到大馬路後沿著楠梓仙溪左岸上朔約 4k 的距離到 9k 的折返，這段山路略有起伏，兩旁樹木林立，為第二圈提供良好庇蔭。 這往返 8k 多的距離安排了兩個補給站，平均每 2k 就會遇上補給站，很貼心的補給安排。 回程不走旗山橋，而走旁邊的單車道。第一圈跑到這時會遇上健康組，雖有工作人員協助分流，但仍是略為塞車。 第二圈只剩全馬跑者，一路順暢，反到有些孤單笑 末段跑上中山公園那段讓不少跑友叫苦連天，許多人都慢下來當步兵了~ 和一位大哥邊走邊喘邊聊，「這坡度走起來都很吃力了，怎麼跑得動！」 之後跑進旗山市中心，沿途都有三角錐隔出跑道給跑友，並有相當多熱心志工協助交管，還會給跑者打氣加油，很感謝所有工作人員！ 市中心這段在馬路正中間跑著，感覺很像北港馬的紅地毯那段，旁邊商家民眾也不時鼓舞跑者，鄉下地方的賽事就是這般人情味富足。 第一圈跑完看到全馬右轉時，很想假裝自己是半馬選手跟著進終點站。 喜歡藉由跑步看看不同的風景，相同路線跑兩圈個人不愛，不過終究全程 42k 的路線並不是那麼好安排，這場的路線安排也算精彩，只好右轉繼續完成下半場。 這段時間練習不足，後來太陽也炎熱，後半場爆掉，保五失敗，最終以 513 完賽。 完賽後在旗山老街逛了逛，看看旗山一些老房子，順便挑了些伴手禮給幫我照顧靠么和供我住宿的朋友。 喜歡這類的地方賽事，帶選手進來體會鄉鎮特色，也促進觀光吧。 覺得旗山臨近應該挺好玩，期待明年能帶上靠么、三五好友一同前來，跟著馬拉松玩遍台灣！ 趁著跑馬回高雄一趟，和幾個好友閒聊一下午，開著網頁討論暑假旅遊行程，完賽後帶著丹丹上車，完美的週末！","keywords":"","version":"Next"},{"title":"2014.02.28 三太子東京馬返台跑","type":0,"sectionRef":"#","url":"/lifehacker/runner/dajia-santaize/","content":"2014.02.28 三太子東京馬返台跑 第一次接觸三太子跑步，是去年 remy 帶著三太子跑步環島時，元旦當天陪同跑了台東鹿野段～ 中間一度 remy 背著三太子開四分速狂奔，完全跟不上啊！ 看到真武山三太子要出發跑東京馬，返台後一路從桃園跑回新店， 看了行事曆，取消預定的三芝櫻花馬改和三太子一起跑一段。 228 這天從鶯歌出發，一路經過三峽、土城跑到板橋。 先到了鶯歌陶瓷文化館、三峽歷史文物館、三峽老街、三峽祖師爺廟、臺北大學、土城清水祖師廟…等。 出發後一直跑跑停停，四處停留拍照休息補給。 一路以相當輕鬆的速度前進，邊跑邊聊天邊拍照邊玩耍，相當歡樂的練跑。 一路上一直有民眾加油打氣，在北大附近巧遇 Mine Chen，跑一半被叫住的感覺很有趣。 抵北大時林會長準備了相當豐富的土產補給，請了大家吃北海道霜淇淋～ 知道便利商店霜淇淋近來很夯，而我卻當天才第一次吃… 相當感謝林會長如此破費，藉由跑步慢慢擴展人脈、和跑友交流，暢快！ 北大出發後換我背負三太子跑，從三峽到土城中間，約背著三太子跑了 3k。 第二次背著三太子跑，和去年相比，這次跑得更為順暢，不像去年一度僅能快走～ 三太子雖為佛教和道教裡的人物，但三太子的信仰以及表演次文化，似乎僅在台灣發跡。 三太子是否足以代表台灣，意見分歧，但我覺得他絕對是台灣文化其一重要表現。 覺得運動也是種文化，除了運動家精神外，不同運動接有其獨特思考風格，也吸引著不同族群的人投入。 和三太子一起跑步，並不是噱頭或譁眾取寵，而是不同文化的刺激結合。 還要趕車回南部，到土城永寧捷運站時就搭車先行離開了。 看行程後來還往林家花園等地方去，錯過了很可惜，希望以後還有機會一同跑步。","keywords":"","version":"Next"},{"title":"2014.02.09 丹大林道 峽谷馬拉松","type":0,"sectionRef":"#","url":"/lifehacker/runner/danda-forest-road/","content":"","keywords":"","version":"Next"},{"title":"See Also​","type":1,"pageTitle":"2014.02.09 丹大林道 峽谷馬拉松","url":"/lifehacker/runner/danda-forest-road/#see-also","content":" 有趣的是，上網觀看這場馬拉松的心得分享時，挖到不少山友對七彩湖的回憶～  跑友心得 來去「丹大林道峽谷」跑馬 @ 老米塗抹跑在野性的丹大溪畔 - 跑者留言版丹大林道，適時的讓自己RESET的一場路跑消失的農場-丹大林道峽谷馬拉松丹大林道峽谷馬拉松 丹大林道 遺失的福爾摩沙樂章。丹大 @ sya(賽亞)的旅遊部落格未貫通的橫貫公路－台16線 @ 新南極轉運站 ","version":"Next","tagName":"h2"},{"title":"2013.12.01 阿公店漁鄉風情馬拉松","type":0,"sectionRef":"#","url":"/lifehacker/runner/gangshan/","content":"2013.12.01 阿公店漁鄉風情馬拉松 阿公店馬拉松，前幾屆評價都很好，又看到在跑者廣場上的討論， 尤其關於獎牌設計的部份，令我這獎牌控二話不說就報名了。 近來路跑活動的盛行，半夜驅車前往會場時只需知道哪個交流道下，接著就跟著跑友車陣前進即可。 清晨五點，鄰近會場的路邊已停滿車。停車後往會場走，路旁已架好交管圍欄。 六點半準時開跑，路線繞著市區，先往空軍官校、一路往南在往西跑到海邊、 沿著海堤魚塭往北跑至興達火力發電廠、折返後回到阿公店溪、沿著溪畔接回台一省道，右轉進會場。 開跑約 3k 時看到跑友 Moogoo，一起跑空軍官校拍照，蘑菇這場要拼 sub4，就先行離去。 我仍維持七分速上下慢慢跑著。 南部路跑場次民眾真的比較熱情，沿著市區跑的時候，路旁有不少非官方補給站。 杯水、水果、巧克力等，不少民眾就在家門口歡迎跑者一起造訪。 約 18k 時聽到前面幾個大哥在聊天，談及某位跑友住家門口設補給站，準備了很多好料等著大家。 話一說完，轉個彎就看到擺滿魚頭、炸魚肉、魚丸、魚湯、鮮蝦的補給站！！！ 南部人不擔心跑友跑不完，只擔心跑友吃不飽！ 後來繞進火力發電廠，很喜歡這樣的路線安排。 無論空軍官校和發電廠，都是平時難以進去的地方，為了馬拉松活動特別開放，跑友福氣啊。 回到阿公店溪時太陽漸大，沿途都沒什麼遮蔽物，很是炎熱，速度也降到約七分半左右。 此時又看到傳說中的啤酒車，一大杯一大杯倒給跑友暢飲，尚青尚解渴！ 全程陸續都有看到民眾提供的非官方補給，留下很好的印象。 最後 3k 因天氣炎熱，手機沒電無法聽音樂而停下腳步行走。 終場成績 517，sub5 對我仍是遙遠的目標啊！ 獎牌質感很好，從今年開始分別以岡山、彌陀、永安三個阿公店溪流經的鄉鎮特產， 配合大岡山地區的主要產業－螺絲工業為主題設計，三年的獎牌可以組合而成一片鐘面， 這，意圖使人連跑三年啊！！！","keywords":"","version":"Next"},{"title":"2014.03.15 東馬出任務．十馬達陣","type":0,"sectionRef":"#","url":"/lifehacker/runner/east-coast/","content":"2014.03.15 東馬出任務．十馬達陣 報名這場，一部分因為太魯閣被迫改為半馬，留有殘念；一部分因為籌劃主辦是東華戴教授。 星期五起床時覺得頭疼、鼻塞、喉嚨略不適，感冒了，我想。 摸摸額頭、量量體溫，狀況可以，依原定計畫，搭中午的火車前往花蓮， 完成報到先去買炸蛋蔥油餅，等候同時邊找住宿。 搞定住宿後在花蓮晃了一圈，還特地殺到新城買檸檬汁～ 晚上回民宿後感覺病情加重，昏昏沉沉。 猶疑著隔天該不該繼續參賽，都來到花蓮了，又逢十馬，總想拼一下。 和幾位法國來台旅遊的室友打招呼後沈睡， 四點鬧鐘響時，頭疼好多了，身子也不酸痛，應該可以跑跑看。 仍一直賴床，感冒是個棄賽的好理由啊，總比__開趴喝掛沒去跑__來得理直氣壯！ 跑步，迎戰對手的確是意志力！ 不容易還是出門，會場在岸邊的停車場，不太醒目，不少人在詢問到哪寄物等。 起跑前拉筋暖身時慢慢後悔了，鼻塞嚴重導致呼吸不順暢。 心想這場號稱有無敵收容車，能跑多遠是多遠，頂多就上收容車吧~ 起跑後沒多久，太陽緩緩升起。左方海面上掛了一顆紅蛋。 我在人龍後段出發，站在這起跑的多是花時間享受馬場風光勝於追求速度的跑友， 身旁不少跑友就停了下來猛拍照~ 剛起跑前3k身子相當不順，要大口呼吸才能換氣。 抵達第一個補給站，同時也是迷你馬折返點時一度想折返，又覺得沒搭上收容車實在很不甘心，於是繼續跑。 過了 5k 後呼吸竟然較為順暢，但仍止不住鼻涕狂流，頓時覺得這場帶著袖套跑真是明智之舉。 就這樣跑到半馬折返點，喝了幾口熱湯、休息了好一會。 在這撤退，或跑到全馬折返點搭收容車回去，我選擇後者。 往前跑沒多久，一旁有志工遞上冰毛巾，好貼心！這冰毛巾大大救了我！ 後半段的路線略有山路，風景和前半段單純海岸有所不同，沿途山稜起伏，風景相當漂亮。 開車走過這個路段幾次，雖明瞭東海岸很美，但一晃而過和一步一步感受的心情大不相同。 速度放慢了，感動卻放大了！ 補給站停留休息一會兒、路邊美景停下拍照，就這樣慢慢地也跑到了折返點。 在折返點停留了好久，一看時間還不到三小時，「走」回去也可以完賽。 另一點則是愈接近折返點，身體狀況愈佳。鼻塞、呼吸不順、身子暖不開的感覺全消散~ 回頭走了幾步、拍了些照片、拉拉筋骨後重新上路。 21k~28k 多為緩下坡，跑起來很順暢；沿途風景很漂亮，跑起來不枯燥。 而跑在我前面的馬尾妹更是怎樣都追不上！ 回半馬折返點時看了看時間，保持七分速的話 sub5，頓時信心大增，拿了一條冰毛巾擦汗後再度上路。 最後轉進終點前看到計時 4:58:xx，趕緊加速，大會時間壓在 4:59 完賽！ 以第一次舉辦馬拉松的團隊來說，東馬算辦得很好的。 台11線風景很棒，倒是沿途全無遮蔽物，若天氣太好會相當曬，感謝老天給了適合跑步的天氣。 全線封閉給跑者，跑起來相當爽！沿途也有不少交管志工協助當地村落居民的進出，很用心。 補給站眾多、補給品也多樣。不過全程沒運動飲料倒是少見，個人喜歡運動飲料勝過水果加鹽巴。 證書領取是個敗筆，選手抵達終點時馬上列印的立意很好，但尋找證書常會花過久時間。 多數賽事都改為拿晶片到成績組感應並列印晶片，同樣數量的工作人員，當場列印的效率好多了。 這點就是初次舉辦活動單位的經驗不足了。 此外，東馬一切都很令人滿意。 和海洋公園結合促進不少觀光，雖有些跑友跑完當天回去，但也不少人留在花蓮玩樂。 完賽時心情興奮，尚未覺得疲累。回台北的車上，則身心俱疲。 連四週跑馬，似乎有些操過頭了，身體強度尚無法支持如此運動量。 累積百馬的這過程，跑馬初衷似乎改變了。 本為了減肥而運動，現在跑步後總習慣自我犒賞一番； 本為了健康而跑步，如今生病了還硬了頭皮挑戰。 似乎，本末倒置了，十馬有感。 後記： 跑完當晚和友人用餐時，才說五場連週馬最後一場海科馬應該會放棄，寫心得時又覺得體能已恢復，應該會去跑。 人啊！犯賤！不見棺材不掉淚！","keywords":"","version":"Next"},{"title":"2012.02.05 高雄國際馬拉松 x 外拍回憶","type":0,"sectionRef":"#","url":"/lifehacker/runner/kaohsiung-marathon/","content":"2012.02.05 高雄國際馬拉松 x 外拍回憶 第一次的高雄國際馬拉松，狀況比預期得好。天氣不冷不熱，正是跑步的好天氣。 而在自己相當熟識的城市跑步，對於每一段路遠近較清楚，配速上也比較能掌握。 若非最後5k多時抽筋，也許有機會跑進兩小時內，大破自己成績。 沿途邊跑，三四年前在高雄打滾的記憶邊湧上，曾跟某某某來這吃飯，那次是誰誰誰的外拍結束。 這次從世運大道開始，先往東跑到翠華路，宏毅社區旁右轉 沿著翠華路往南，在大中路口左轉，再右轉博愛路，沿途先到三兄弟、漢神巨蛋 瀾灣 愛河之星 上博愛路橋接中山路，路過傻妞她家，在美麗島捷運站右轉中正路。 沿著中正路直行到愛河，右轉河東路，直行接同盟路。 經過中都窯廠與重劃區後，左轉中華路，繞非主要道路經過美術館特區 後來接上九如四路，沿著九如四路一直往北跑，先到果貿社區 繞過圓環，看到海青後 沿著舊城牆 續行至蓮池潭 最後接軍功路、軍校路回到世運主場館。 實話說，跑出世運地下道進入主場館時，看到終點線跟滿滿的人潮，很是感動！","keywords":"","version":"Next"},{"title":"百馬之行 始于足下","type":0,"sectionRef":"#","url":"/lifehacker/runner/marathon/","content":"百馬之行 始于足下 13.03.10 新北 [初馬] 北馬雙溪櫻花馬拉松 42k / 5:31:0813.03.31 雲林 北港媽祖盃全國馬拉松 42k / 5:03:0013.07.20 台南 安平仲夏夜 星光馬拉松 42k / 5:59:2813.10.06 南投 信義葡萄馬拉松 42k / 5:58:5013.11.10 彰化 台灣米倉田中馬拉松 42k / 5:09:2613.12.01 高雄 阿公店盃漁鄉風情馬拉松 42k / 5:17:4014.02.23 高雄 旗鼓相當報馬盃馬拉松 42k / 5:14:5714.03.02 台南 南科生態人文馬拉松 42k / 4:4814.03.09 新北 北馬雙溪櫻花馬拉松 42k / 5:35:0414.03.15 花蓮 [十馬] 東海岸馬拉松 42k / 4:56:1614.10.05 台南 草山月世界馬拉松 42k14.10.18 台北 真武山玄武盃超級馬拉松 45k14.10.26 台北 艋舺盃全國馬拉松 42k14.11.01 屏東 阿里港國際馬拉松 42k14.11.09 彰化 台灣米倉田中馬拉松 42k14.11.30 日本 (海外) 第三屆富士山馬拉松 42k","keywords":"","version":"Next"},{"title":"2013.11.17 屏東單車國道馬拉松","type":0,"sectionRef":"#","url":"/lifehacker/runner/pingtung-bike-way/","content":"2013.11.17 屏東單車國道馬拉松","keywords":"","version":"Next"},{"title":"2013.07.20 府城安平仲夏夜 星光馬拉松","type":0,"sectionRef":"#","url":"/lifehacker/runner/starlight-marathon/","content":"2013.07.20 府城安平仲夏夜 星光馬拉松 去年底忘記報名古都馬，看到古都馬賽事缺失連連而在跑者廣場、Mobile01 上被慘批之餘， 有人淡淡地回了七月星光馬絕對會滿足跑者，也不少跑者很期待星光馬，於焉對星光馬大感興趣。 加了星光馬 Facebook 社團，社群討論上， 充份感受到主辦單位和參賽者互動的熱烈氣氛及以跑友角度在籌畫賽事的精神。 主辦單位ㄚ南把星光馬定調為馬拉松嘉年華，不強調速度、時間， 期望跑者一步步體驗安平港區美麗景致與人文，這平地馬限時放寬到七小時。 想起櫻花初馬花了五個半小時，七小時完賽簡直易如反掌。 又看到前兩年的佳評如潮，不多想就報名參賽了～ 台南的太陽和民眾一樣熱情，四點起跑時準時露臉和跑者打招呼。 才跑到魚光島就熱得受不了，路旁的冰水大把往身上沖，舒暢！ 第一個補給站就感受到志工熱情和主辦單位豐盛的準備，源源不絕的豆菜麵、土豆粿～ 此後每過補給站，就看到一堆跑者撐著肚子散著步～ 天氣炎熱加上補給太豐盛，第一圈時就已經邊走邊跑了； 中途點成績 3:01，很久沒跑 時看來單走路還來得及完賽，於是繼續走第二圈， 日落後氣溫下降，第二圈身體較舒暢，但雙腳慢慢僵硬抽筋，緩步走跑也總算完賽。 繞過水景橋時聽聞身旁不少跑友喊著保六保六，勉強跟著跑友的腳步； 走過安億橋後路旁不少民眾喊著加油聲，硬撐起小腿跑了起最後一段； 最終晶片成績 5:59:28，保六成功～ 和櫻花馬相較，除了天氣炎熱外，近來過於放縱，身材走樣是成績下滑的主因。 鹽水溪畔堤防是個美麗回憶 第一圈時夕陽西下，陣陣海風配著落日餘暉，邊啃著古早味枝仔冰，一點也不像在跑馬； 第二圈經過已日落，螢光棒排滿賽道、排著加油標語，偶有螢火蟲陪伴，最浪漫的賽道！ 一直期待台灣能有像東京馬、波士頓馬...一樣有特色、具代表性的馬拉松賽事， 星光馬受限於場地或許無法舉辦如此大型賽事，但是個完全展現安平特色的活動， 而沿途民眾的熱情打氣與賽事外的配套活動，真有種馬拉松嘉年華會的氣氛～ 這樣的賽事和十大馬拉松各有特色，持續耕耘或許能在國際馬場上闖出名聲。 感謝主辦單位的用心規劃以及所有志工的付出，也感謝府城民眾的熱情， 很高興見到台灣各角落有人默默地為這土地付出，明年若搶不到名額，就來當志工！ 星光馬. 2013.07.20, 3rd 42k / 5:59:28.","keywords":"","version":"Next"},{"title":"2013.11.16 達標愛跑社 團練","type":0,"sectionRef":"#","url":"/lifehacker/runner/power-goal-trainning/","content":"2013.11.16 達標愛跑社 團練 Power Goal! 達標愛跑社是由白蘭氏和運動筆記共同成立的跑步社團， 由運動筆記或白蘭氏提供專業資訊，並安排相關課程與團練。 達標愛跑社不像一般路跑團體每週的固定團練，而以年度行事曆安排活動。 愛跑社的團練除練跑外，亦會請教練、講師介紹跑步相關知識。 大學時期所以跑步，為了登山的體能訓練與維持；上研究所後又重新跑步，則是為了減肥！ 第一次湊熱鬧跑了台北馬拉松 10k 健康組，看到半馬和全馬有獎牌而我沒有，心有不甘，決定此生至少完成一次半馬，拿個獎牌過癮。 在太魯閣馬拉松完成初半馬，此後才愛上了跑步。 受限時間因素須縮減登山活動，僅需半天時間的馬拉松成為主力戶外活動。 所以加入愛跑社除了想更了解跑步相關知識外，主要仍希望多結交些一同跑步的朋友。 平時可以一起練習、馬場可以相約前往。 台北團練這天，集合後簡單說明本日行程後，先由郭教練帶領熱身。 郭教練講解為避免運動傷害，也為了逐漸提升身體機能，熱身〉伸展〉運動〉緩和〉__伸展__一個完整循環的重要性， 原來不管什麼運動，前後戲都很重要。 郭教練帶領從頭往下活動每個關節和伸展肌群，真是不錯的方法，這樣就不怕有所遺漏。 團練沿公館河濱公園來回共跑10K，和 PTT BM 團練路線相同，中途折返點有白蘭氏準備的豐盛補給。 （其實跑 10k 吃那麼多補給有點罪惡～ XD） 團練後亦有豐盛的餐點、飲品，然後陸續進行跑友自我介紹及相關課程。 聽聞不少前輩和專家經驗的分享，收穫不少。 現場也提供貼紮介紹與服務，很用心的一場活動。 相對於一般路跑團體多為跑友自發組織而來，Power Goal! 達標愛跑社難免較商業氣息些。 個人倒從不反對商業活動，因著商業的介入，愛跑社的團練確實和一般團練更為精進。 白蘭氏以非運動品牌廠商切入運動社群的經營，在 FB 上和跑友互動回應與團練的安排，看得出白蘭氏的用心。 然社群終究不單是網路上的互動即可，運動社群平時的交流更為重要。 愛跑社團練次數較少，多靠網路上的互動，個人覺得是相對不足的。 其實除了年度團練與課程的安排外，平時也可以多舉辦固定的團練，讓愛跑社跑友互相聯繫感情。 加入愛跑社後認識幾個跑友，偶爾馬場上相遇會打招呼閒聊，還不賴！","keywords":"","version":"Next"},{"title":"2013.08.31 Sweet Run 馬卡龍盃路跑試辦賽","type":0,"sectionRef":"#","url":"/lifehacker/runner/sweet-run/","content":"2013.08.31 Sweet Run 馬卡龍盃路跑試辦賽 這週末，接連跑了馬卡龍盃試跑和Seiko 城市路跑，加起來差不多半馬的距離，相當暢快～ 是場邪惡的團練，大佳河濱團練班長 Q 爸發起，8km 的練跑中，在多方贊助下 吃不完的馬卡龍、瞌不完的西瓜、喝不完的水果啤酒，及歡樂的氣氛中，跑步原來可以讓人那麼幸福～ 甜庄集合後，Q 爸簡單說明了這次試跑的路線，以及沿途補給點 這次路線是劍南路來回，傳說中的劍劍美路線，不過沒有跑到至善路口 在郭老師講解完跑上下坡的技巧後，隨即出發～ 劍南路約 2k 的上坡後是第一個補給點，有水、香蕉、點心，還有喝不完的水果啤酒！！！ 過了鄭成功廟後是一連串的下坡，輕鬆跑沒多久就看到這次活動折返點 同時也是邪惡帝國重心，馬卡龍補給！ 甜庄大力支援了本次練跑的馬卡龍，果然如少女酥胸般銷魂～ 享用過西瓜、馬卡龍，稍事休息後原路折返，也有部分跑友繼續跑到至善路 緩上坡後抵鄭成功廟旁的涼亭，又喝了一瓶水果啤酒 最後一段下坡時和一位大姊邊跑邊聊天，交換跑步心得 聽著大姊聊些人生哲理、以及她老公的跑步經驗，收穫頗多～ 跑步可以很簡單、很快樂！ 不單跑步，任何運動都皆然，關掉電腦、電視、冷氣，外出走走吧～ ＢＤＮＦ（Brain-derived neurotrophic factor，腦衍生神經滋長因子）的活化，它會帶動幾種荷爾蒙的分泌，如：第一類型胰島素生長因子（IGF-I）、血管內皮生長因子（VEGF），和纖維母細胞生長因子（FGF2），它們會和ＢＤＮＦ合作，啟動學習的分子機制，並促使幹細胞分裂。如ＢＤＮＦ會幫助大腦增加IGF-I，啟動神經元，製造出跟記憶有關的血清張素和 胺酸，這兩種神經傳導物質會刺激更多的ＢＤＮＦ受體出生，增加神經元之間的連接，形成長期記憶；VEGF會在大腦中建造更多的微血管，因應運動時細胞對血液的需求，FGF-2在運動時大量分泌，促進組織生長、增加記憶的長期增益效應。 當我們年紀漸大時，這三個生長因子和ＢＤＮＦ會自然下降，神經新生的情況也慢慢減少，假如我們持續不斷運動就能增加ＢＤＮＦ、IGF-I、VEGF、FGF-2的含量，減緩老化。所以現在歐美各國都儘量鼓勵老人運動，因為可以節省阿滋海默症、巴金森症、憂鬱症及老人失智症等慢性疾病的社會成本。韋海浪 從226k超鐵到12h超馬的省思 最後，感謝 Q 爸的辛苦規劃，很開心的一場活動！ 也感謝甜庄、超馬協會、許多熱心人士的贊助，以及所有志工的付出。 有你們真好，大家都是 No.1 的跑友！！！","keywords":"","version":"Next"},{"title":"2012.11.03 太魯閣峽谷馬拉松","type":0,"sectionRef":"#","url":"/lifehacker/runner/taroko-gorge-marathon-2012/","content":"2012.11.03 太魯閣峽谷馬拉松 Taroko gorge marathon 太魯閣峽谷馬拉松，挾太魯閣峽谷美麗景緻，以及秋高氣爽的天候，是個熱門的馬拉松路線。 今年比往年更搶，開放報名後路協網站呈現DDOS的情景，以現代雲端技術如此普遍之下，這類情況實不該發生！ 一度以為沒報名到，又報了台灣大道路跑。 直到後來收到通知才知道有報成功，但台灣大道的報告費跟名額似乎只能浪費了。 這次是第三次的太魯閣馬拉松。四年前的太馬是個人初半馬，之後整整隔了兩年，去年的太馬則是第二場半馬。 直至今年才比較熱衷於跑步。 成績上，去年的成績還比第一次參加還差，而這次則破了個人半馬最佳成績。 天氣上是個人參加這三次來最舒服的一次。 08年飄著小雨又有鋒面，好冷！熱身不夠下怎麼跑身體都熱不起來，撞牆期就沒撐過了。 去年則是太熱，水泥廠折返就熱昏了，體力消耗過多。 今年不冷不熱，有太陽也有雲，好舒暢！ 今年路線有所更改，跑到水泥場後過太魯閣大橋繞行舊台九線，繞一圈回太魯閣排樓處已約7km了。 個人比較喜歡這樣的路線安排， 一來跑在太魯閣大橋上好舒服，立霧溪加上水籃圓拱造型的太魯閣大橋很漂亮。 二來起跑時雙向都可以跑，不像之前的路線對向要留折返跑者用，人潮較能舒解； 以往過了感應區還需走上一小段路才跑得起來，今年過感應區後就可以小跑步了。 三者，前段的距離變長，後面相對縮短，上坡路少了一小段。 往年半馬要跑到燕子口隧道折返，今年則在溪畔就折返了。 當然路線更改也有缺點，半馬折返點基地不夠大， 全馬直行跟半馬折返路線有些打架，折返後跟尚未折返的跑者也有衝突。 而負責交管的工作人員似乎資訊傳遞有問題，跑者一下子被趕到左邊一下又被趕靠右， 這點實在另人難以接受！ 不過，在太魯閣美麗峽谷風景下，氣候宜人的溫度，這太馬仍另人相當滿意。 總結來看，似乎不滿的都是跟主辦單位較相關的部份，有點期待明年太馬換人辦辦看。 這次趁著太馬，也來個花蓮兩日遊。該去的廟口紅茶、公正包子、明新冰果室都去了。 口袋名單中的黎明紅茶、Giocare cafe 也嚐了，還遇見一隻阿牛喵咪！ 這趟要特別感謝志偉的熟門熟路，花蓮山是個美麗的三角點。 而花生糖、奶油酥條、起司蛋糕等伴手禮頗獲好評啊！ 明年，還是要來搶太馬名額，而且我要挑戰全馬！ （當然，不會把初馬傻傻地奉獻給路協賽事的）","keywords":"","version":"Next"},{"title":"2014.03.02 南科生態人文馬拉松","type":0,"sectionRef":"#","url":"/lifehacker/runner/tainan-stsp/","content":"2014.03.02 南科生態人文馬拉松 剛看到南科馬消息時，在南科馬和萬金石之間猶豫了許久。 念念不忘萬金石的美景，時間點又剛好在櫻花馬前一週，萬金石的緩坡是個練習的好機會。 但從南科馬官網、Facebook上來看，籌劃過程令人興奮，感覺會是場好賽事。 最後，因原本農曆年間打算出國旅行，心想該在農曆年前後各回家一趟， 故排了新營三太子半馬和南科馬兩場家鄉賽事。 大會特別協調台鐵加停與加開火車班次，清晨四點多在月台等車的，幾乎人人一個大紅衣保包。 主會場很大：主舞台、攤商區、慢跑社團休息帳篷、衣保區、餐飲區、盥洗區，空間很大，即使是一萬多人的賽事卻一點也不壅塞。 過去並不特別注意主會場，參加多場賽事後發覺腹地大小對活動品質也有影響。 六點準時起跑，大會報名時需填預估完賽時間，依號碼布的分區排隊出發。 報名時自以為可以 sub5 ，故選了 4:30~5:00 完賽的 C 區。 當天自覺狀況不如報名時那麼樂觀，本來想混入 530，不過人潮洶湧，故排在 C 區最後面出發。 分區排隊立意很好，不過排隊時各區前後距離太短、過於擁擠，應該可以拉長一點。 目標主要是下週的櫻花馬，這場當個 LSD 訓練，起跑後一直慢慢跑，每個補給站都會進去喝杯水。 後來發覺補給實在太豐富了，在補給站停留的時間愈來愈長~ 前 3k 跟著 500 的兔子跑，身體暖開後跟上 430 的兔子跑。 他說他大約配六分速，預留進補給站和調整的空間。 在 15k 醫護站遇到國中同學，合照後兔子就跑掉了~ 後來雖有追上，再因吃補給、上廁所等因素又被跑走~ 這場天氣佳、道路平緩、補給豐富、志工熱情，經過鄉鎮時民眾也很親切為跑者打氣，跑起來相當舒服。 可惜沿途沒什麼風景可看，有些無趣。中途有一段特別安排繞了迎曦湖一圈，景色不錯，不少跑友都在這停下來拍照~ 約跟著 430 兔子跑了 25k，麥當勞那補給站吃得太開心就再也跟不上，完成 30k 時不到 330。 後來雖然身體狀況還不錯，心境卻覺得一定可以 sub5 而過於鬆懈，開始邊走邊跑邊玩。 最後完賽成績 4:48，意外破了個人最佳紀錄。 能破個人紀錄我想除了感謝上天給了個不冷不熱的跑步好天氣外，主辦單位規劃真的很棒。 總在稍微開始累的時候就遇上補給站，補給品多樣又豐富。 除了破 PB 外，另高興的是這場跑完並沒有任何不適。 過往跑完全馬多少會有些疲勞過度或痠痛，這次完賽後彷彿只跑了場半馬一樣，體能狀況良好。 該是跑馬以來體能的小小成長吧~ 獎牌很精美，賽後領取各項物資都很順暢，規劃的不賴！ 和星光馬一樣，選手憑號碼布可免費參觀台南古蹟；不少跑友問：賽後餐點的粽子好吃，哪買的？（品香肉粽） 用心舉辦的活動，確實可以為地方增進觀光收入。 南科馬、星光馬，滿滿台南味的馬拉松！","keywords":"","version":"Next"},{"title":"Our 老房子咖啡屋","type":0,"sectionRef":"#","url":"/lifehacker/taiwan/Hualien/hualien_our/","content":"Our 老房子咖啡屋 跟著家銘繞著社區打掃了一圈，在市場吃了碗玉里麵，回到咖啡屋裡窩著看書； 平常日下午店內沒有客人，王靜靜地享受一個人的空間。 這是王在 Our 老房子打工換宿的第七天，這些天讓王深深體驗了不同的生活。 王是個韌體工程師，碩士畢業時搶到了相當頂尖公司的研發替代役名額； 在公司待了三年後，研發替代役畢業當天，王拎起背包，騎上車就往花東跑。 每天加班、趕進度、會議報告等壓力下，這三年間王的週末幾乎都貢獻給床鋪； 總以為週末徹底睡了兩天，星期一上班時卻是更加勞累。 主管開了不錯的條件要王留下，王沒馬上接受，「我想先休息一陣子。」主管似乎也很能理解。 第一天在花蓮教師會館落腳，相較台北，花蓮落後得多，然充斥觀光客的市區仍煩雜； 第二天一早前去太魯閣走走，新城吃碗麵、買了罐檸檬汁後，繼續南行。 七星潭、鯉魚潭、光復糖廠、馬太安溼地、鳳林菸房……王在台九線沿路景點停靠逗留； 近黃昏時來到玉里，吃了碗玉里麵，拿起手機尋找玉里住宿的地點。 「Our 老房子？」王一臉疑惑來到老房子前，不相信這地方提供住宿，「請問……」…… 「不然，你就住一陣子，打工換宿好了。」聊完，主人家銘得知王這趟旅程的緣由，建議著。 打工換宿？新奇的字眼在王腦中打轉。「不然，我先住一天看看好了……」 Our 老屋子咖啡屋，日治時期留下來的日式木構房。電影「盛夏光年」裡張孝全的家在此取景拍攝。 主人未做大幅度整修，僅略作整理清潔與補強，並在角落擺放些個性或古意的家飾、小物， 全棟建築彷彿停在日本時代，在這純樸的玉里小鎮上，更讓人有舊時光的感覺。 王躺在通舖上，一把電扇、一條睡袋、一片蚊香，王睡得沉穩； 沒有恆溫冷氣、沒有柔軟彈簧床、沒有蓬鬆枕頭，簡單的環境，一晚好眠。 隔天近午，家銘來到咖啡屋。「今天沒什麼事情，我們四處走走好了。」 打工換宿竟然是陪主人四處玩？兩人穿過玉長隧道，在長濱海邊閒晃。 又往安通溫泉跑，那有個公用的露天泡腳池，水質還乾淨，偶爾也有當地居民直接在裡面泡。 跑了一天，王問了家銘關於 Our 的事情。 「這鄉下地方也沒什麼花費，週末的營業收入勉強可維生。住宿不是經營重點，交交朋友為主。」 「另外就是協助推廣公平交易咖啡以及當地茶葉，若能打出點名聲，也算幫助到辛苦的茶農。」 星期五早上，一箱舊運動鞋送到，王跟著家銘整理、清潔與分發。 小朋友收到運動鞋那興奮雀躍的表情洋溢臉上，王也跟著開心了起來。 有不少運動鞋狀況都還很好，也許過流行了被主人淘汰吧，而在此地卻被視為寶貝般珍惜。 下午過後陸續有散客前來 Our 老房子，緊接週末兩天生意都不錯。 小小一間店，沒有固定座位，三五成群前來的朋友喜歡坐在和室內，散客則多拉了椅子在庭院自行找位置就坐。 一兩杯飲品，坐上好一段悠悠時光。 Our 有咖啡、茶、比利時啤酒、簡單調酒…等飲品選擇。 王拿了本書在庭院裡看著，當客人離去時幫忙整理環境。 週五、六兩天有個背包客入住，晚上打烊後王和這位陳姓室友聊天著。 「怎麼會知道這地方？」王很好奇，陳似乎對這裡好熟識的感覺。 「過年環島時曾經路過，那時錯過沒有來這住宿，只在這喝了啤酒、看了電影。 很喜歡這裡的環境，特地安排這週末前來休息。」 兩人同行，話題不斷，一直聊到深夜兩點多才就寢。 星期天隔天一早，陳約去晨跑。「不了，你去吧！」 ………… 這些天對王是相當新奇的體驗，打工換宿並不盡然都在做些民宿或店內的工作，社區服務的事也做了不少。 想想也該繼續上路了，過去不曾接觸過背包客棧的王，上網查了台東的背包客棧。 夜裡，王輾轉難眠。明天即將前往下一站，滿是不捨，短短七天的體驗，王卻覺得這兒就是自個家。 Our 老房子咖啡屋，一個以舊時代生活方式存在的小屋。 原來，生活不只有一種方式！","keywords":"","version":"Next"},{"title":"十三咖啡．難找但值得一找的三合院咖啡","type":0,"sectionRef":"#","url":"/lifehacker/taiwan/Taichung/taichung_13cafe-a-sanhoyuan-cafe/","content":"十三咖啡．難找但值得一找的三合院咖啡 If you are looking for the love of your life, stop; they will be waitting for you when you start doing things you love. 對於日前看到的這話，戚戚焉。 大雅麥香路跑賽前一天到中部走走，該是無目標的漫遊，卻在出發前一天看到十三咖啡的介紹，整個對味！ 最近愛上有味道的空間，老屋重新整理或特色商店的佈置，主人有心的空間就會散發出味道。 市區不乏有著典雅、設計、懷舊佈置的咖啡廳，但常不經意透露著商業氣息。 或許是過去從未注意，也可能物以類聚，這般的空間一一跳了出來，開始點綴生活。 傳統的三合院，隨意擺了些桌椅。天氣寒冷，院子裡起了盆火取暖。 很原始的方式，卻能最直接帶給人溫暖！ 老闆先給了一杯肯亞AA 「聞起來有淡淡的碳焙味，喝下去會有可可味」 「旁邊正起了一大盆火，怎麼聞得出碳焙味？」心中如此OS著 細聞，還真有不同於火盆的碳燒味湧現。然入喉後的可可味倒是沒那麼明顯。 想起一句對話 「嚐嚐這酒，能喝出巧克力味來」 「那幹嘛不直接喝巧克力呢？」 咖啡、紅酒、威士忌，都有各自奧妙的地方 深入鑽研也好，像我這樣廣泛淺嚐似乎也沒啥不好 稍稍放冷後再喝，味道變得清新，連不太喝黑咖啡的老姐都忍不住多喝了兩口。 十三號咖啡只要想喝好咖啡就到13號.咖啡主人堅持直火手焙 一次只焙1KG堅持做到最好呈現最真實的原味給愛好咖啡.音樂.油畫.陶藝的朋友感受文藝氣息深厚的13號 跟老闆聊天著，老闆說一直以來都從事咖啡業，越是深入，越愛上單品咖啡的奧妙。 覺得好咖啡該像好酒一樣細細品嚐，不該是拿來提神、解膩或是午茶配點心的飲品。 因此老闆堅持僅提供單品咖啡，不提供義式咖啡，也不販賣點心； 來這，就好好品味咖啡，或是好好享受這悠閒的空間。 大哥！ 大哥，好久不見！ 待在這的一點時間，不少熟客跟老闆問候聲大哥好，就各自做事去了。 有待在屋裡玩吉他的，也有拿本書一旁靜靜閱讀的。 話題聊到，拿起筆電放了哥本哈根車站的樂團快閃族影片，老闆也很有興致一起觀看 這邊不少老音樂，也不少樂器，應該有不少喜愛音樂的同好常聚在此吧 畢竟，這是個懂得生活的人，會愛上的地方 十三咖啡，難找但絕對值得一找的咖啡","keywords":"","version":"Next"},{"title":"十三咖啡．感官的多重饗宴","type":0,"sectionRef":"#","url":"/lifehacker/taiwan/Taichung/taichung_13cafe-cafe-ensemble/","content":"十三咖啡．感官的多重饗宴 「十三哥，今天三位。」 陳走進庭院，熟識地跟十三哥打了招呼，找了位子就要入坐。 「先等等，我幫你們把桌椅擦乾。」 下午的一場大雨，庭院內露天擺置的桌椅全打溼 雨後，暑意消散，雲開見月 藍月高掛天空，月暈打亮了移動中的雲朵。 對面田園，蟋蟀窸窸、青蛙喀喀； 十三庭院，爵士悠悠、人聲雜雜。 入坐後，陳靜靜待著 兩位初次前來的好友仍在門口拍照 孩子般興奮與驚訝著十三每個角落 十三粗礦、未細雕磨 十三原始、未經歷練 然，十三卻有最精雕細磨的咖啡 「今天是瓜地馬拉，花神… 些許花果香、微酸，入喉苦甜到甘的層次很溫和卻明顯………」 兩位好友仍在十三裡探險 野薑花和檜木的香味飄散屋中 和工作室傳過來的咖啡味混成重奏 奔放、清香的野薑花像小喇叭，高亢的聲響喚起關注 沈重、濃厚的檜木香是定音鼓，低沈的縈繞穩定節奏 而隨著烘焙、烹煮，味道也跟著改變的咖啡香 是主奏提琴，它的聲調起伏與節拍，演奏重心！ 三合院的房間中，有幾間擺了椅子，亦提供客人使用 有幾間是十三哥玩木頭的工作室 還有個十三哥和朋友一同玩音樂的角落 幾把吉他、提琴…幾張CD、音響…… 「這是個獨立音樂工作者自己錄製的非主流音樂，偏民族爵士風………」 十三哥換了張 CD ，同陳介紹著 幾桌散坐過客、三兩好友湊著 聊工作、聊感情、聊投資、聊旅遊、聊音樂、聊夢想… 咖啡台前吧台，獨行旅人待著 想行程、想事業、想戀情、想功課、想電影、想未來… 聊的、想的話題五花八門，不外人生！ 「又是從台北下來？這次要去哪？」 「是阿，中午出門。這次當天來回，晚上就得回台北了。」 「十三哥，我老家也是三合院耶，她也是！」 兩位老家在中南部的好友，對這空間異常興趣 三合院，也成了聊天話題了………","keywords":"","version":"Next"},{"title":"Ash manna coffee","type":0,"sectionRef":"#","url":"/lifehacker/taiwan/Taichung/taichung_ash-manna-coffee/","content":"Ash manna coffee 找個位子、點杯咖啡、拍張照片！ 市府今早兒有活動，舞台從深夜開始搭設測試，忙了一整夜總算把舞台、音響等弄好，防雨套也擺置定位以備萬一。 主持人清晨來到會場預演後，在活動結束前，一行工作人員暫且沒事，卻也不能走遠。 「少年捏，道陣來去鬆一下啦。」幾位年紀略長的同事邀約前去「按摩紓解」，郭不好此道而婉拒了。 印象中中港路和河南路口有個老舊的汽車旅館，收費便宜，離會場也近。 郭沿著中港路走去，需要好好休息一下。 找一個屬於你的位子，點一杯屬於你的咖啡，拍一張屬於你的照片 你好，歡迎光臨！ 明亮的庭園咖啡廳，取代了老舊陰暗的汽車旅館。郭疑問著，邊朝著那一大片落地窗走近、走入。 「這兒，以前是不是汽車旅館？」 「現在還是旅館阿！」店員指著角落小門，上頭標示著非住宿客人請勿進入。「這兒提供住宿客人早餐，同時對外營業。」 一樓車庫、二樓住宿房、一進一出兩車道間是住宿辦公室，總讓人覺得裡頭黑沈沈的，餐廳總要穿過不對外的密道，某個角落的小房間內。傳統的汽車旅館實難以和眼前的明亮感有所聯想。 這庭園咖啡廳不但光亮透明，附屬於旅館餐廳對外營業，大型飯店、商務旅館的經營方式。 郭點了杯咖啡，拿出筆電，算著今天的收入，看著設計圖。 畢業一年多了，平日任職於一間小建築和室內設計公司，下班後又在展場公司兼職。 郭夢想留學日本念建築與空間設計，學生時代就在展場設計公司打工。從現場搭設勞力工作做起，現在也參與設計討論。 選擇這份打工，現場勞力工作薪資一般服務業高，且可以實際了解設計案如何被施作成形。 工作時間多在深夜或假日，時間上亦可和學業配合。 郭的認真漸漸獲得賞識，見他學業表現不錯，老闆漸漸讓他參與設計。 畢業後，老闆開了不錯的條件錄用，郭的目標仍在建築設計，推掉老闆的好意。 礙於人情，郭仍常幫前老闆分攤過重的工作。而多了這份接案的兼職收入，錢存得更快了。 兩口咖啡下肚，環顧周圍。挑高的空間、大面落地窗、開放式餐點工作區圍繞著有一圈吧檯面。 那大面的落地窗真的搶眼，有趣的是大多店面設計會在窗前擺座位，那往往也是最搶手的位子， 而 Ash manna coffee 只留了吧台的座位。 「所以，當滿座時，從外往內瞧，會看到一排屁股。」 職業病，郭在腦中構建這空間從早晨、下午、夜晚隨著陽光的變化，客人來去的動線，人潮滿座的各種情景。 「那排燈，夜裡會對這空間帶來很棒的視覺焦點。」 郭看著吧台內那和自己年齡相仿的員工，幻想不知道他們又是為了什麼夢想而在此工作。","keywords":"","version":"Next"},{"title":"十三咖啡．熟悉又新鮮的老味道","type":0,"sectionRef":"#","url":"/lifehacker/taiwan/Taichung/taichung_13cafe-familiar-way/","content":"十三咖啡．熟悉又新鮮的老味道 「明明是他們亂搞，憑什麼叫我不要管？ 「就是看不下去才管啊！我那麼閒喔？誰願意花費自己時間心力在這狗屁倒灶的事上？ 「當然放不下啊！我之前花了多少時間心力？！」 電話這頭，汪連珠砲地同好友抱怨著。 多年前，草創的工作室漸露頭角時，團隊三位夥伴也漸分身乏術； 在老客戶介紹下，接受增資也引入專業經理人，從個人工作室轉型成小型軟體公司。 同時，原創團隊一位夥伴亦因小孩新生，想多陪陪小朋友而退出。 是個多事之秋，汪擔任首席工程師，不斷和新手工程師磨技術交流； 身為創辦人，不時得和新上任的專業經理人討論公司未來； 創業夥伴離開，又一手接下他的業務，和客戶社交往來。 過渡時期，汪的意見和專案經理人多有磨擦。 多頭馬車，公司氣氛黯淡不明，人力流動大、專案執行多有窒礙。 在另一位創辦人何的協調下，汪全力專注在專案控管與技術開發上， 業務、發展等工作，由何與經理人負責。 好不容易熬過難關，股東們一致覺得是何和經理人的功勞，也一致肯定汪對於技術團隊的掌握。 組織幾經擴展變更，汪勝任技術長，在經營團隊上發言的地位與力道卻愈來愈小。 這回，經理人決定放棄長期合作老客戶的案子，把技術人員調往新客戶案件的開發。 再度引起汪的不悅，會議上大力反對，卻引來一句「你憑什麼？」 邊講著手機、邊熟悉地往13走去。 煩悶時分，汪習慣往這兒跑，連想喝什麼咖啡都無需思考。 巧克力、煙燻、礦石、花香、果酸，不同單品有其不同風貌，而十三哥總能恰如其分做出最佳表現。 空敞三合院庭院中，不規則地散落幾組門不當戶不對的桌椅。汪從一旁書架上拿了本書，就近坐了下來。 書翻了兩頁，沒心情，放回桌上；咖啡喝了兩口，這壺帶干果風味。 品嚐著咖啡，激昂心緒也略略平緩。 空空地望著吧台，不同風格的氣味逐漸飄出。 「你好久沒來了，來，這杯和你分享。」 十三哥走近，遞上一杯咖啡，初韻清淡，入喉微酸，久久不散。 「我這兒年底會有個作品展，大部份木作都會展售，有空的話歡迎過來。」 十三的木作質樸，廢棄木材、傢俱組合重生的傢俱特別、有味道。 十三哥和幾位好友閒暇時的喜好，動手付與這些材料新的生命，江一直很喜愛。 走進廳堂，逐一欣賞、打量那些木作，思考著該帶哪個回去、該擺哪裡？ 「十三哥，把這些木作賣掉，你捨得嗎？」 離開十三時，江滿腦回想著，十三哥的答覆。","keywords":"","version":"Next"},{"title":"Forro Cafe 呼嚕咖啡","type":0,"sectionRef":"#","url":"/lifehacker/taiwan/Taichung/taichung_forro-cafe/","content":"Forro Cafe 呼嚕咖啡 「為什麼就不能說愛我就好？」 這句不能再平凡的話，深深打入心中。 想起一個朋友的近況及她在網路上分享的點點心緒，這句應該是她滿腦的想法吧！ 拿了另一本尚未開封的「氧氣」，前往櫃台結帳。 這結合民宿、餐飲、藝文、手創複合經營的呼嚕咖啡，空間舒服外， 這本「微小說」倒是意外收穫。 -x-x-x-x-x-x- facebook 無遠弗界，葉看到陳的動態後，得知陳也在台中，第一時間傳了訊息來。 兩人約了在這間巷弄間，難找卻顯眼的呼嚕咖啡碰頭。 葉喜歡這兒的咖啡，但更愛附近另一間的風味； 陳也喜歡這兒的咖啡，但更愛呼嚕的空間與它的複合經營。 呼嚕咖啡，一樓的隔間全打通，配上開放吧臺、大面落地窗，一個明亮通透的空間。 散落幾個木箱，一台老電視播放60年代無聲黑白影像。一些手作、文創商品置放其中。 空間不小、坐位不多，是個另人舒適的環境。 「所以，一間咖啡店，究竟咖啡重要還是空間重要？」 兩人天南地北聊著，面對一個無解的話題，討論了許久。 似乎，在不同情境下，會有不同結論；但共識是，咖啡若無基本水準，其餘都是白談！ 葉從背包拿起書看著，陳隨身的書剛看完，在書架上尋覓新歡。 「氧氣」，一本好薄的書引起興致。隨意翻閱，那寫作風格和他好像！ 「為什麼就不能說愛我就好？」 陳為這句話買帳！一本書，有一段故事引起共鳴，有一句話打入心坎，值得！ 結帳時，陳意外發現那服務生，神似一個共同朋友。他指給葉看，兩人竊竊私語著要如何偷拍。 -x-x-x-x-x-x- 「你知道嗎？我超愛氧氣這首歌的！那天看到書皮，覺得應該不是那首歌，沒想到真是！」 陳把書連同伴手禮給了蔡，幾天後兩人再度碰面時聊起裡頭情節。 「氧氣，是你！」","keywords":"","version":"Next"},{"title":"宮原眼科 Miyahara","type":0,"sectionRef":"#","url":"/lifehacker/taiwan/Taichung/taichung_miyahara/","content":"宮原眼科 Miyahara 區了區手指，李發覺十指不夠數數；超過十年了吧，大學畢業後，就從未踏上台中火車站。 舊市區在求學時代就沒落了，商圈漸西移後交通樞紐也跟著轉移。 偶爾往來台中亦多在東海、逢甲等商圈逗留，回味求學時期點滴。 鮮少進到市區，更遑論火車站周圍。 昔日同窗好友婚宴，餐廳位於後站附近，考慮打算小酌兩杯，李刻意搭了火車前來。 雖訝異站前廣場可真是截然不同，然對面的台中客運、右手邊的國光客運、右前方的統聯客運，則和印象中景致一樣。 學生時總沿著中山路往電子街竄，買遊戲、升級電腦、看產品發表秀…回憶湧起。 一陣雜亂聲打亂了李的思愁，尋著聲源望向柳川、中山路口轉角，一棟盞新建築豎立眼前，宮原眼科。 「這兒，以前是個鐵皮圍牆包起來的廢墟……」李看著平板電腦上找到的資料，邊打量著這棟似曾相識的建築。 建造於一九二七年的宮原眼科，曾是日治時台中規模最大的眼科診所，日本戰敗，眼科變成台中衛生院，位於台中市雙十路的「台中市長公館」，原是日籍醫師宮原武熊所興建的別墅住宅，在其3樓可遠眺水源地公園及台中一中校園，是當時台中市區相當著名的豪宅。在戰後，雖然包括林獻堂在內的台中仕紳曾向國民政府陳情，但宮原武熊還是遭到遣返日本的命運，而其住宅及醫院則視為「日產」而遭到沒收，成為台中市政府的財產。 宮原醫師為留德眼科博士，曾任公立醫院的院長職務，在1926年辭官之後即自行開業，並在1930年在台中市創辦「宮原醫院」，主要以眼科為主，而其醫院位於目前台中火車站前的綠川一帶，擁有30張病床，是當年台中市私立醫院中最具規模者。 台中歷史建築-宮原眼科-賦予古蹟營運新風貌 - 本心堂~以人為本 從心出發 落沒廢棄已久的昔日眼科診所、台中衛生局，現變成了鳳梨酥展售店，熱門的觀光地點。 隨著人潮進入店內，無處不讓李訝異。 已是危樓的歷史建築，不刻意原貌翻修，而運用大量現代建材與之結合，部分保留、部分融合、部分新構。 內裝大氣華麗，似在述說曾經的光榮歷史； 大量中國風元素妝點下，讓人意外，原來中國風是可以如此時尚； 視覺主體的巨大書櫃上擺的不是書籍，而是裝修期間不得不拆下的老舊建木，腐蝕斑剝的木頭，是城市發展見證。 想起曾參觀過的許多整修後古蹟，像是依原貌建的仿古新建築。 眼前這日出新打造的展售中心，嶄新結構下還保留了原建築元件，歷史建築在商人手下活化利用，重新述說另一段故事。 是否該完整重現歷史建築的樣貌？或保衛其精神後另覓出路？李沒有答案。 然眼前這建築新增結構，似是在保護陳危歷史建構，必要之惡。 李努力回憶求學時期這兒樣貌，波波人潮湧入，四處攝影留戀、試吃產品、提了幾盒伴手禮離去。 這兒不只賣日出鳳梨酥及沿生產品，一旁還賣珍奶、冰淇淋，遊客喧嘩不斷打斷李的思緒。 「可惜了這般硬體設計，若軟體服務、遊客控管能跟上水準，是個值得再訪的點。」 李輕輕按摩太陽穴，走出喧鬧的店門，轉身朝後站走去～","keywords":"","version":"Next"},{"title":"魚麗人文主題書店．共同廚房","type":0,"sectionRef":"#","url":"/lifehacker/taiwan/Taichung/taichung_yuli-bookstore-and-reaturant/","content":"魚麗人文主題書店．共同廚房 「聊了那麼多，所以呢？你們對服貿的看法如何？」 幾位友人難得相聚，閒話家常難免談及近來喧騰一時學生霸佔國會殿堂一事。 多已是為人母的人了，平日忙於工作、小孩，壓根不清楚服貿究竟是怎麼回事。 熱血憤青－蔡則長篇大論侃侃而談，還拿出 iPad 秀出 g0v 網站，把相關資訊一一告知這群婆婆媽媽們。 又聊到警力驅離學生一事，蔡順便把馬英九與江宜樺在上任前的言論找了出來。 「唉，換了位置就換了腦袋！」 「還敢說別人哩，你不也一樣，你媽媽叫你弟在家要穿室內拖鞋，你就覺得你媽很愛唸。 「結果你看到你兒子沒穿拖鞋，還不是叫他拖鞋穿上。」 換了位子換了腦袋，人之常情阿～ 幾個婆婆媽媽，又從國家大事聊回日常瑣事。 「所以服貿對台灣真的不好嗎？」 不同觀點的切入吧。 經濟學者普遍認為自由貿易是經濟成長必然的趨勢，全球化的時代台灣不能鎖國； 社會學者會考慮面對外資、中資等強勢資金主導，貧富差距與勞工就業權益； 政治學者更加入兩岸關係因素，中資背後的國家機器又是如何對我國有非分之想。 各種不同立場前提下，每個人心中優先順序不同霸了。 經濟優先？社會正義優先？國家安全優先？甚至於黨團優先！ 這不是聯考，沒有標準答案，所有政策只能留待歷史來驗證。 也許二十年後我們下一代會知道，學生是錯的；但也可能相反。 「這間店你們覺得如何？」 「不錯啊！食材新鮮，料理簡單好吃，把食材特色表現的很好。」 「對啊，而且佈置好特別。怎麼會和二手書店一起經營！」 「這有好多童書，下次帶我家小孩過來」 有沒有發現，小時候學校附近總能找到間小書局，賣賣參考書、文具外也賣小說、漫畫等。 而現在這類的書店很難看到了，要買書只能到市區的金石堂、墊腳石等連鎖書店， 文具則往金玉堂、九乘九、久大這類大型連鎖文具行找。 獨立書店的經營困難，要不走向特色化來鎖定特定群眾，或是走向多元化的複合經營。 全球化自由貿易下，財團、連鎖店佔競爭優勢，傳統商家勢必走出自己的特色才能存活。 ECFA也好、TPP、RECP也罷，台灣社會不可能在全球化缺席，產業升級走出台灣自己的路才是生存之道。 「怎麼感覺你不反服貿？」 「我沒說過嗎？我反的不是服貿，服貿對錯要交給歷史證明。我堅決反對的是黑箱作業與執政傲慢！」 外頭持續著紛擾 魚麗這小小天空，充斥著多樣不同心緒 一如手創、二手書店和無菜單餐廳的混搭，各自協調。","keywords":"","version":"Next"},{"title":"61 Note 同步進行的瑣事","type":0,"sectionRef":"#","url":"/lifehacker/taiwan/Taipei/taipei_61note-concurrency-process/","content":"61 Note 同步進行的瑣事 二訪 61note。 少了上回好久不見的熱鬧，一個人，似乎更適合這空間。 不變的是那 簡單的小小展覽 平凡的文字、插畫、影像，構出富含趣味的表現 不變的是那 簡單的小小餐點 菜色樣式少而美味 是阿，何須過多變化，口味是留住顧客的重點 不變的是那 簡單的小小角落 起司蛋糕柔滑清淡，淡淡的奶香餘韻無窮 配上一點佶醬 恰如那空白的牆面，掛了幾篇文章 互相宣奪卻互不相斥 這令人心動的空間，還有三訪、四訪 在任何可能的時間點 一頓餐、一杯酒、一個甜點、一杯咖啡 一個人、一點閒、一絲愜意、一份滿足","keywords":"","version":"Next"},{"title":"衛屋茶室 / 衛屋 Sputnik-Lab","type":0,"sectionRef":"#","url":"/lifehacker/taiwan/Tainan/tainan_sputnik-lab/","content":"衛屋茶室 / 衛屋 Sputnik-Lab 「哇～～～」看著介紹，勇輕聲但驚訝地讚嘆「台灣竟然有這樣個地方～～～」 走出繁忙車站，經過川流的馬路，雖覺得這兒人們很熱情，但公務差旅的沈重仍逼得勇難以喘息。 費勁跟上友人的腳步，轉彎，一個莫不起眼的地方，勇雙眼亮了起來。 推開沉黑大門、脫鞋、踏上玄關、推開房門… 友人小聲的和店家打招呼後，回頭帶著勇入坐… 「這樣的房子，就連日本都少見了」 勇駕輕就熟的跪坐在榻榻米上，還無時四處張望 差旅任務總算告一段落，前兩週在客戶熱情帶領下，品嚐了不少道地美食 然公務的壓力卻讓勇始終提不起勁，台灣人的親切招呼，反讓勇覺得困擾 工作結束後，撥了電話給曾在日本工作結識的台灣友人 然只想好好在飯店休息的勇，對友人邀約卻是連聲拒絕 「麻煩給我宇治玄米茶跟季節和果子」 拗不過友人的邀請，勇答應一起喝杯午茶敘舊，卻對衛屋大感訝異 不大的空間裡，店家還保留了前後庭、玄關等空間 毫無隔間，五六張矮桌擺在榻榻米上，僅能容納十來個客人吧 黑框木、白牆壁，老舊矮櫃擺了些插花，一幅日本掛廉點綴整體彩度 客人不多、店內寧靜，簡單的日式庭院造景更讓人放鬆 「看看你，坐沒多久就心浮氣躁」 勇的煩躁逐漸消散，心情也沉穩下來 對著不習慣跪坐的友人，輕聲笑語著 就這般，一坐、一聊，就是一個下午 店長看這對客人有趣，邀請他們到一旁皮革工作室參觀 我們都喜歡京都 不能常去 就自己造一個 於是衛屋茶事就這樣出現了 木造房子好好的都一直在這裡 找了很多構件適合它的原來的模樣 木門木窗和漆器 還有塌塌米 我們在這裡喝京都的日本茶 吃和果子的時候 看看襯著黑瓦白牆的枯山水 沒有特別的目的 只是為了找一個地方過安靜的時光 特地保留了十席給你 在漸漸接近秋日的八月底 尋著木造黑牆走進衛屋茶事。 9月整修好了，也開始開放了，先找了一個白天過來，從門口進去後，再從右邊門後，拉開木門進去，進去後&gt; 是個玄關，在這裡脫鞋後，登上階梯，再拉開一道木門，裡面就是茶事了。 「明天，再帶我去吃吃道地台南美食吧！」 再衛屋門口穿鞋時，勇主動對友人說！","keywords":"","version":"Next"},{"title":"61 Note 南西累了、煩了，請來此尋覓靜縊","type":0,"sectionRef":"#","url":"/lifehacker/taiwan/Taipei/taipei_61note-silent-place/","content":"61 Note 南西累了、煩了，請來此尋覓靜縊 一直都以為拍下了寫下了 記憶就會被好好保存著 2011年夏台北 散步的 造訪的 停留的 經過的 那些跟這些 總之 我以為我有好好記下了 用各種方式收藏 停留在台北的痕跡 籃筱涵 影像。文字 展 籃筱涵 一個在法國唸書的小女生 問她為什麼只拍椅子 她開玩笑說：「因為發覺自己拍人會有障礙」 「因為每張椅子都是一個停留」 「看到這張沙發就想起上次和朋友去民宿的回億」 雖然每個人擷取回億的片斷並不相同 在來去之間 什麼是留下的？ 什麼是失去的？ 筱涵的照片看似簡單卻很耐人尋味~ 跟老友的聚會時恰是這個展的最後一天 花了點時間品味一下這小小的 影像。文字 展 也感受這個空間的味道 越來，我越喜歡極簡 於我，冷冰冰的水泥，已成最溫暖的溫度 水泥、幾張無關的桌椅、鐵扶手，這看似冰冷、剛硬的空間 卻讓人感覺到溫暖、親切與活力 那偶然展出的作品，不僅為這空間帶來生氣，也帶來偶爾造訪的驚喜 意外的是，這兒的餐點還好吃！ 喜歡這樣的下午 一個讓人樂意再訪的店家 一齣值得細細品嚐的展覽 一群永遠十年如故的好友 在南西累了、煩了，不妨來此 轉個彎就到的小巷內 也許有個令你動心的展出正等著你","keywords":"","version":"Next"},{"title":"看山小 望海大 La'mer","type":0,"sectionRef":"#","url":"/lifehacker/taiwan/Taipei/taipei_lamer/","content":"看山小 望海大 La'mer 海風灌入車內，幾絲寒意～相較於淡水大雨，三芝一帶意外毫無雨勢。 被上司狠狠訓了一頓的張簡，開著車，獨自在北海岸騁馳。 車燈在北海岸彎道閃爍，耀過一個又一個彎道～ 轟～轟～轟～轟～轟～～～ 一群重機玩家從對向靠近後呼嘯而過，喚醒了心不在焉的張簡 並未刻意飆高速度，但車速也拉到近 100km～ 想找個地方坐坐，想起曾和朋友去過的看山小望海大，位於潛水灣旁的複合式餐飲 張簡繞回頭後降低速度，和緩地續行在北海岸 經過石門、白沙灣、三芝、淺水灣，涼爽空氣捎去許多煩悶 走進店內，平常日的夜晚，淺水灣這樣偏遠的地方，竟還有不少客人。 長桌上散坐著六個客人，桌上各一頂絢麗圖樣的全罩安全帽，連想起門口停放的那排重機。 「或許是這晚和這群人的第二次交身而過。」張簡往戶外走去，邊自言自語著。 鄰近窗戶那桌，一男兩女帶了瓶粉紅酒，說說笑笑，時而乾杯，時而拍照，似在慶祝什麼。 紗簾圍起來的那座位，四個女孩喝著飲料，笑語不斷………… 獨自坐在面海的座位上，張簡點了份漢堡套餐，這是上回朋友推薦的餐點。 文火慢烤的漢堡麵包，表皮微焦酥脆、內層溫熱鬆軟 大口咬下，先是「哐吱」麵包皮應聲而碎，「喀吱」咬斷萵苣葉 鬆軟的麵包、鮮脆的萵苣、飽實的漢堡肉，配上番茄、洋蔥等漢堡基本元素 這兒的漢堡並無獨家的特別配料，但份量十足、蔬菜鮮脆、漢堡多汁 配上烘烤火候得當的漢堡麵包，美味！ 上回是一群愛攝影的同好出遊拍照，在基隆近郊跑了一整天後來此用餐。 周六的淺水灣熱鬧的很，店內人聲鼎沸，三五好友配些酒歡笑暢談； 在樂團演奏更炒熱現場氣氛，顧客隨著阿逗仔不標準的台語起哄，很是竟興！ 這天烏雲密佈，海浪陣陣，不若上次那般星光密佈； 面海，張簡用了餐點，抽了幾跟菸。 這樣肅靜疾寥的氛圍、不斷呼嘯的海風，倒也把張簡的不悅思緒吹散了； 心情卜輕鬆下來，便感受這天的海有點冷。 張簡移動到室內的座位，那群重機玩家已經不在，店內客人也少了大半。 那兩女一男年輕人已不在窗邊，倒在店內四處拍照，隨後看到牆上的標把，興奮玩著~ 「蛤~這很難吧！」 「看吧，我厲害哩！」 待酒意稍退，張簡離開時，那三個年輕人仍在射標。 看山小望海大，一個適合群聚歡樂，也可以獨自發愁的空間！ 有著不錯的餐點、迷人的裝飾、輕快的氛圍～ 週末有樂團哄吵氣氛、平日有繁星靜靜陪伴！","keywords":"","version":"Next"},{"title":"秘氏咖啡 cafe chamber","type":0,"sectionRef":"#","url":"/lifehacker/taiwan/Taipei/taipei_cafe-chamber/","content":"秘氏咖啡 cafe chamber 他從口袋拿出一個禮物遞給楊「我們復合吧。」 這句話，楊等了三個月了… 三個月多前，男友在朋友介紹和邀約下換了工作，新工作負責上海地區業務擴展。 那是個挑戰大、壓力沉的工作，伴隨不小的報酬，但需做得出色！ 雖有熟人照料，但面對陌生的環境以及新工作的不確定，他其實害怕。 害怕難以達到對自己的期許、害怕比不上別人、害怕無法承擔家庭… 「我們分手吧，我不想耽誤你。」前往上海前夕，他提出了分手。 一顆徬徨無助的心境、一個充滿問號的生活，人在低潮時更容易被現實打垮。 不願一段感情就此結束，既使充滿疑問，楊仍默默守護男友、靜靜等待他回頭。 這段期間，其實多次難過地想放棄 等待不會擊垮人 會讓人放棄的，是不知要等多久、不知等待有沒有結果 孤單不會傷害人 會讓人難過的，是只能將孤單下嚥，微笑著陪伴、守護 賭著一口氣，告訴自己，陪他撐過去就可以獲得幸福………… 這三個月來，秘氏變成楊最常造訪的店鋪，求個心境上的慰藉； 是否，躲在這裝潢擺設比上海還上海的地方，可以離他近一些。 上海藉前輩攝影家秦凱曾說：「上海人不習慣開小店，要開就要開到大馬路上去。」 然師大商圈邊陲，沒沒無聞巷弄內，大台北市區，躲了這樣一間老上海咖啡館。 一部留聲機，一張皮沙發，一張小桌，一盞檯燈，一片華麗鏡面 楊習慣來杯單品，阿俊挑的豆子、烘焙、手沖精品咖啡，不同層次的香氣口感； 楊喜歡坐在入門左邊的座位，拿本書沉思。面壁的位子更適合孤單，偶然落淚。 三個月過去，他初次從上海回來，相約在師大商圈用餐，飯後來到秘氏。 這回，楊挑了窗邊小桌子，和男友面對坐著； 這次，楊請阿寐挑了威士忌，今晚似乎該微醺。 男友說了許多工作上的事、感激她的支持… 「沒有你的支持我撐不下去，」 他從口袋拿出一個禮物遞給楊「我們複合吧。」 這句話，楊等了三個月了… 拆開包裝紙，相當典雅精緻的項鍊，盒子點出品牌。 知道他在上海的工作僅在及格邊緣、非相當順遂，對這所費不貲的禮物很受寵若驚。 再度落淚，這次意義不同。 楊曾在秘氏見證一個好姐妹的求婚，這回獲得幸福的，是她。 秘氏咖啡，一個比上海還上海的存在，一個和上海一樣傳遞幸福的地方。 -x-x-x-x-x- 一個秋高氣爽的午後，游來到祕氏。同子洋、華華打聲招呼、背包放角落、拿出相機。 台北鬧區一個轉角，存在如此獨特違和空間，一扇門，就是一世紀之隔。 游驚訝著秘氏在 facebook 公告即將暫告段落的消息， 幾個年輕人堅持的夢想，在多方努力經營下，似乎將有所成果； 一紙行政公文，抹去一切。或許違法在先，無奈之外也沒有出口。 而這紙公文，背後是多少財團利益。 在師大商區的都更價值被注視後，多少「個案」處理的法令快遞給商家。 游點了瓶 iki, 這樣爽朗的天候適合清爽的啤酒， 拿出筆電，上傳相片，把最近掛念的事情寫了下來。 -x-x-x-x-x- 送男友搭機回上海後，楊和好姊妹來到秘氏，點杯調酒，述說從頭～～～ 「你怎麼都沒跟我說！」 這三個月來，揚並未告知他人。習慣快樂、堅強的她，不知道該如何示弱。 好多次想跟姊妹們提起，卻始終縮手。不是不想說，而是不敢說。 怕，一旦說出口，分手這件事就成了事實。 真正痛苦的人，都在笑臉的背後，流著別人無法知道的眼淚， 生活中我們笑得比誰都開心，可是當所有的人潮散去的時候，我們比誰都落寂。 「所以，你們現在復合了？」 「嗯，這是他送我的禮物…… 「你們的婚禮到底準備的如何？何時拍婚紗阿？」 兩人的話題轉到好姐妹的婚禮上，好姐妹在秘氏答應求婚，一對羨煞旁人的鴛鴦。 ………… 漫長的等待有了結果，男友回台這些天兩人總睨在一會，好不快樂。 如熱戀期一般激情，小別勝新婚其來有自。那幸福過頭的不真實，夢一般。 而，男友一離台，莫名的安定自在感竟油然而生， 楊不願承認，但這些時間下來，已然習慣一個人。 楊多次想詢問好姐妹的意見，直至離開前，仍沒說出口的是： 「復合後，迷惘了。這，真的是我想要的嗎？」 轉身，盞盞燈光點綴一室奢華、面面鏡子反映一身庸擾。 離去，繁華一世、庸嚷一生。 夢迴上海夜來香。 誰的台北，誰的上海? -x-x-x-x-x- 游其實質疑，不曾一同走過難關，靠單方情感拘絆而維繫的感情，該如何長久。 然，發表前，把最後一段拿掉了。 他曾允諾，會給楊一個幸福的結局。 點點心事、絲絲疑問，讓它沈澱在這老上海的穠華如夢。 秘氏咖啡，交流著多少秘密心事，終將降下謝幕，一如十九世紀的上海灘頭。 華陽初上鴻門紅，疏樓更迭，龍麟不減風采； 紫金簫，白玉琴，宮燈夜明曇華正盛，共飲逍遙一世悠然。","keywords":"","version":"Next"},{"title":"好丘 good cho's","type":0,"sectionRef":"#","url":"/lifehacker/taiwan/Taipei/taipei_good-chos/","content":"好丘 good cho's 出發前日，林約了羅與葉在好丘吃飯，詢問旅遊平安險和意外險等訊息。 這趟旅程至少兩個月，林僅安排了頭三週的行程，其餘在旅途中依情況調整規劃。 「如果有豔遇，那我就不回台灣了；」林笑著說。 「或是掛在 K2 上，那我也回不了台灣了。」林笑得更開心了。 林和羅、葉曾在某個偷閒的平常日在好丘用餐； 那次林一早在 101 洽公，會談提早結束，想起羅與葉公司也在不遠處，臨時約了來個早午餐約會。 時近秋初，部分夏季餐點供應結束；部分餐點也限假日供應。 即使菜單上仍玲瓏滿目不知從何點起，三人仍覺得可惜，懊惱沒先做功課。 那次的餐點令三人印象深刻，好丘招牌貝果真名不虛傳， 餡料搭配得宜、口味豐富，尤其嚼勁十足卻不過硬，嘴中越是咀嚼越是香甜。 三人惡作劇的同時傳相片給苦苦上班中的幾個好友， 「你們很過分！」「賤！」……… 好吃的餐點與朋友的回應讓三人更加開心，相約找個假日來此，享用假日限定的餐點。 一年多前的事情了……… 三人邊用餐，邊聊上次在此的情景，那時說好要來朵貽的餐點也換了。 林打開平板，熟練地點擊地圖、相片、網站，同兩人說著這次旅行。 「主要第一站是印度，在新加坡轉機，利用轉機空檔在新加坡停留兩天走走， 「新加坡我找沙發客，那兩晚的沙發主是個辣妹喔！！！ 「接著和朋友會合去印度，印度行程都朋友規劃，以中印大壺節為主， 「再一起前往尼泊爾加德滿都，朋友玩完加德滿都後就回台灣。 「我會停留尼泊爾，去走走 ABC 或 EBC……」 「這樣的行程規劃，好像不適合一般旅平險吧？ 「我想把重點放在國外醫療和意外的部份…………」 三人先轉回正題，針對林的需求討論著保險內容。 「怎麼會想去尼泊爾、緬甸？」 「日本、歐洲等地很美，十年後再去，一樣美，跟現在不會有太多改變。 「這些地方也許髒亂、落後，但十年後絕對會是不同風貌， 「每天都在改變的地方，能早點去就早點去吧。 「你不覺得好丘擺的書、環境，就令人想去流浪嗎？」 轉身，林指著角落的書籍，同羅、葉說著～ 三人又聊了好一會，這兒的環境、餐點，讓一間不小的空間總塞滿人。 眷村、老房子能如此重生再利用，實是好事。 建設，不該總架構在破壞之上！ 離開前，三人相約等林回國後，再來這聚聚。 「該不會，又是一年後吧？！」羅笑著問 「當然要一年後，我要多流浪一點時間！」林笑著答。 「她最近如何？」趁葉前去廁所時，林向羅詢問著 「你這次出國沒和她見面？」 「嗯，只在網路上互相留言，都沒約。」 她是羅的好姐妹，林心動的對象……… 林沒說出的心事是 希望往後的旅途，有她相伴 屬於一個人的冒險，這次體驗後暫告段落吧。 登機前，林寄了張明信片 &quot;Every body has his word to say LOVE. &quot;Someone stay with you, someone take you away to see the world. &quot;Yes, I know I am second one. &quot;Every body has his way to response to LOVE. &quot;Someone wait for you, someone go with you. &quot;Just waitiing for me this time. I'll take you away all my life. &quot;If you say Yes!&quot;","keywords":"","version":"Next"},{"title":"StayReal Cafe by GABEE","type":0,"sectionRef":"#","url":"/lifehacker/taiwan/Taipei/taipei_stayreal-cafe-by-gabee/","content":"StayReal Cafe by GABEE 「先生，請問幾位？」 「ㄜ... 我朋友應該已經到了。」 望著空無一人的店面，我如是說... 「我們目前沒客人耶！」 「那... 我聯絡一下朋友好了。」 邊回答，邊默默的走出店門口... 門口擺了一些個性商品販售，google 地址看到的也是商品的展覽， 要不是裡面有擺了幾張桌椅，我是認為我走錯店的。 這類特色商品跟咖啡廳結合的空間，似乎越來越多了。 61note、好丘、有時散步... 等空間，都有其擺販的商品區域。 只要商品挑選得當，彼此是有加乘作用的。 點了杯橙酒拿鐵，這兒的咖啡，是師法 GABEE 的技術 GABEE 是福華飯店旁巷子內的一家知名咖啡店，拿過不少花式咖啡的獎項 既使如此，還是喝不慣橙酒咖啡 可能沒有攪拌均勻吧，口味並不相融，有點相嗆。 好友說「他的鬆餅很有名！」 偷吃了一小塊，不賴！扎實的口感、濃郁的味道！ 好友帶了 NB 在這耗了一個下午，卻總無法上網。 「我下次不會再來了！」 她抵制的是這間店的磁場不合，而非這兒的餐飲跟空間。","keywords":"","version":"Next"},{"title":"那一夜 那群人 那些話","type":0,"sectionRef":"#","url":"/lifehacker/taiwan/Taipei/taipei_village-cafe/","content":"那一夜 那群人 那些話 夜深著。 『框啷、框啷、框啷…』像在水面上投了顆小石子般，漣漪般慢慢擴散，再慢慢消散～ 男人靜靜坐在吧台前、高腳椅上，寂靜的空間中僅聽到冰塊撞擊酒杯的聲響。 雙手枕著吧台的桌子，桌面上留著冰酒杯緣的水痕。吧台另一面是酒保的工作檯面，各式大小不同的調酒器皿看似雜亂又有秩序的散落著。該是酒保站立活動的地方空無一人，上一波酒客離開後酒保也跟著走了出去，站在門外抽著煙。酒保身後是層層的酒櫃，最下層是各式的酒杯，啤酒杯、威士忌杯、高腳紅酒杯、白酒杯…往上則是一層一層不同的酒。 男人手中的酒杯搖晃著，眼睛平直往前看，目光在酒櫃後方無限遠處有了交集。男人身後是多張空蕩的桌子，上頭擺了瓶水，擺了個小蠟燭。 『框啷、框啷、框啷……』的聲響迴響在酒吧中，漸漸被喧擾的人聲湮沒了，男人身後的的人漸漸多了。 有個男人早早來到，坐在一角，不安的看著手錶、玩著手機，眼光總無法安定下來四處張望。等人，他等的人遲遲未到。 有對小情侶初上台北參加聚會，『我朋友說這家餐廳不錯，離車站也近，推薦我們來這裡吃……』兩人環顧環境一番，又沈溺於兩人世界細聲輕語。 有個男人忙進忙出，『你就沿著忠孝東路往101的方向走，經過行政院的時候左轉，左轉第一個路口就可以看到了……』。才轉身，『對不起，我們再等一下，小實迷路中』 有個女人氣沖沖的來到，透過手機抱怨著工作上的聯絡不清，讓她白跑一趟。『他明明跟我說星期六，還指責我沒仔細看簡訊內容……』 有對朋友開心聊著圈子內的八卦，『我已經找到接班人了，他的八卦消息真是靈通……』 有個男人興致勃勃著想融入朋友之間的話題，可惜他們聊遠了，男人只能感興趣的聽著，卻無法插話。 『我來為大家介紹，這位是lingo、這是小實、這是kido……』那迷路的朋友到了，男人一樣忙著，忙招呼著大家。眼前這群人唯一相互有聯繫的就是他了。 那個男人仍然興致勃勃坐著，在朋友間的聊天中偶爾提出一些疑問，偶爾發表一些意見。 『12月12號嗎？等等喔，我看一下行事曆……』女人手機來電不斷，女人邊喝著酒邊聊著手機，三不五時還得從包包中拿出記事本討論行程『嗯，那天可以……』 『她整形看得出來阿！整個下巴都尖了起來，很明顯吧……』那對好友仍交換著友人間的八卦。 『我們待會吃完先去士林逛逛夜市、明天去淡水玩好不好……』隨著周圍聲音越來越大，情侶之間的對話也逐漸放大。 那男人默默坐在一角，不安的看著手錶、玩著手機，眼光總無法安定下來四處張望。等人，他等的人應該不會來了。 『kido，你的 iphone 借我玩玩……』 『那，今天先到這好了，改天再約大家見面……』 『明天早上你要去哪？』『不一定耶，可能去資訊展看看吧』『好吧，明晚熱炒店見』 『lingo，你能不能給我一下你的msn』『好阿，我寫給你……』 …… 那群人，為著不同的目的而來，為著不同的原因而去。 那一夜，只是平凡的一日，依它該走的步調消逝著。 那些話，或隨風散去，或留下漣漪，一句還接著一句。 那人、那夜、那話，都在尋找各自的獨特、各自的天空。 『框啷、框啷、框啷……』的聲響仍迴響在酒吧中，漸漸又清晰了起來，男人身後的人陸續離開了。 人來人去，男人仍坐在那吧台前、高腳椅上。那不影響任何人的座位，那不被任何人影響的空間。靜靜地搖晃手上的酒杯，動作不大不小，在酒吧中交融成保護色。男人不理會他人，他人也沒發現男人。彼此只是存在於相同的時空，但分屬不同的世界。 男人手中的酒杯仍搖晃著，眼睛平直往前看，目光在酒櫃後方無限遠處有了交集。男人身後只留下多張空蕩的桌子，上頭擺了瓶水，擺了個小蠟燭。 『結帳』 夜深著。","keywords":"","version":"Next"},{"title":"45 區公寓 Urban 45","type":0,"sectionRef":"#","url":"/lifehacker/taiwan/Taipei/taipei_urban-45/","content":"45 區公寓 Urban 45 「Hi, Maiko. 一樣，特調，水果酸、酒味濃一點。」陳隻身前來，吧台坐了下來。 「怎麼那麼久沒來？……」…… 和幾位店員寒暄後，陳默默拿起手機，打著簡訊。 「其實希望我們能退一步，留點空間、留點幻想、留點可能發展成情侶的機會， 別發展成『適合當朋友』的關係。」 往日總習慣在週三小週末，看完電影後小酌一杯，總開朗和店員、散客扯淡； 今日看來心事重重，Maiko、店員看他眉頭深鎖，留了自個兒發想的空間，招呼著其他客人。 「甜一點，酒味別太重。」「水果口味，偏酸，酒味濃一點」 吧台前的另一對男女，男生的口味喜好和陳相近，令陳有些好奇，Maiko 會調怎樣的酒給他。 那兩人開懷聊天，不時和 Maiko 說笑著，看來也是熟客。 「這是密瓜甜酒，義大利傳統的家常甜點。把哈密瓜去籽，倒入甜白酒後，冰鎮兩天…… 白酒混些哈密瓜汁，酸甜外帶密瓜香，口味更豐富。 而密瓜果肉沁入白酒，微酸的白酒亦讓哈密瓜更加香甜……」 男生帶了顆哈密瓜來，原來裡面有甜白酒。 「恭喜！乾杯！」看來女生有什麼好事，Maiko 同那男生一同向她祝賀。 陳觀察了好一會，兩人的互動看來不像情侶，是很要好的朋友。 身旁也有好些個這樣的朋友，一向直來直往、不扭捏作態的個性特質，他很容易成為值得信任親近的好友。 然對於心儀的對象，卻始終難踏上最後那一步。 陳再度低頭，望著眼前的手機，依然沒有回應。 等待的過程，比失望的結果，更令人難受； 難以決定下一步，整個人懸在空中，進退兩難。 「諾，喝吧！幹嘛那麼悶悶不樂。」Maiko 送上一杯 shot，打破沉思。 「那桌客人，酒量跟你有得拼喔。這是第二杯《魚雷》了！」店員走近，指著後方一桌拼酒的客人。 先純飲一杯 Vodka shot，Absinth shot 落入調和啤酒中，再一飲而盡！ 比深水炸彈更強大的發作與後勁。 陳的目光穿過那桌拼酒中的客人，落在後方兩個女生上； 一者頻頻落淚，喝醉心碎的樣貌，另一位則在一旁招呼。 觸景傷情，陳再度感傷了起來。 「Happy birthday to you~~~」樓下傳來生日快樂歌。 一群好友在地下室慶生，好不熱鬧～ 「Hi！聽說你錄取啦，恭喜！」身後傳來聲音，陳楞了一會。 轉頭，原來是在向吧台前那兩人打招呼，三個朋友前來慶祝那女孩找到滿意的工作， 一群人離開吧台，移在那對拼酒的客人鄰桌。 順眼望去，女孩仍在落淚、拼酒中有一位已不勝酒力、樓下仍傳來派對的嬉鬧聲…… 就這樣，吧台前剩下毫無生氣的陳， 不再意氣風發，沒有主見地隨著店內的氣氛高低起伏著。 45 區公寓，不單是餐點美味、調酒迷人的複合餐飲店， 更是個喜怒哀樂、談心傾述的深夜食堂。","keywords":"","version":"Next"},{"title":"Vapiano Taipei","type":0,"sectionRef":"#","url":"/lifehacker/taiwan/Taipei/taipei_vapiano-taipei/","content":"Vapiano Taipei 暮日時分天色靛籃，華燈初上的信義區依然霓虹閃耀，攝影人管這當下叫魔幻時刻。 坐在 ATT4FUN 十樓窗邊，店內是時尚連鎖義大利麵店，窗外是川流不息的都市節奏。 前方那棟聳立的大樓，楊的男友上班地點。 還想跟男友當面溝通，未告知下獨自前來這不適合一個人的店，等候男友下班； 拿起餐具，楊吃著桌上那盤義大利麵，看著男友工作的大樓，心飄得好遠好遠～ 店內氣氛仍然浪漫，多的是情侶對對，兩人點一份義大利麵，配個沙拉、飲品剛好。 店內氣氛充滿歡樂，好友的三兩聚會，披薩、沙拉、主食，再來兩份麵分食，愉快！ Vapiano Taipei, 創立於德國柏林的連鎖義式餐廳，為歐美時尚圈平價用餐首選之一。 這兒義大利麵依舊美味；多樣選擇的麵條、新鮮的義式香料、濃郁鹹淡適中的醬汁…… 但楊卻覺得無味～ 和男友再度吵架，近來兩人間的不愉快遠比開心來得多。 楊是個朝九晚六，規律的上班族； 男友則在服務業工作，排班輪休，中午上班，十點過後下班。 兩人作息不同，碰面的機會不多，僅剩夜晚的熱線； 配合著男友時間，等到十二點多才通上電話，卻常換來男友工作疲累的冷淡。 兩人假期不同，星期六日男友鮮少放假； 配合著男友時間，把難得的特休排在男友輪休日，也常因男友想休息也難以出遊。 楊懂！也體諒！不願讓男友分心傭擾，兩人間若有不快，楊開始退讓； 知道男友沒時間陪伴，也習慣週末假日和同學、同事、家人外出聚會。 楊越來越退讓，男友也越來越懶散。碰面時間已經不多，平日噓寒問暖也減少～ 慢慢地，楊難以感受到男友的心意；漸漸地，楊開始埋怨男友的不用心。 「要的不是真的撥空陪我，只希望能更重視我、關心我的心情、生活... 要的不就是一種感覺，一種快樂且被在乎的愛。」 在一次次期望落空中自責，一次次地告訴自己平常心、卻又一次次的滿心期待...... 楊想起第一次和男友約在 vapiano，她提前到來等候男友下班， 他因客戶連絡上出了點問題，又讓楊多等了一會。 男友匆匆趕來，滿臉歉意，兩人討論著菜單，一份義大利麵、一份沙拉、一份開胃菜 又在點菜台前摸索了些許時間，才弄清楚醬汁、麵條的不同，及這兒獨特一格的晶片點菜。 兩人也在窗邊，看著窗外景致，邊討論著工作點滴、朋友八卦、計畫旅遊... 那時，好不幸福～ 簌簌地落淚，楊難以自己。 鄰桌男士走過身邊，輕輕留下了一包面紙，即使桌上擺著一疊餐巾紙； 楊卻卻地抽了張面紙，嘴中呢喃著謝謝，小小的感謝那陌生好意。 楊想起朋友曾在 facebook 上的一篇貼文：「如果在捷運上看見別人哭，你會怎麼辦？」 那串回文中，另一個好友寫了「拍照打卡」。 小動作四處望了一下，心想或許現在某處有人正在拍照打卡吧。楊不禁破啼，笑了。 笑出來後，楊突然放下了執著。一次次的爭吵中，楊不只一度想放棄。 「懂了，痛了，該醒了。」 楊這般告訴自己，決定不等待男友下班，決定不再因他起伏，決定放手～ 下樓後，看著對街男友工作的大樓， 會不會他正巧走出來？…………………","keywords":"","version":"Next"},{"title":"193 cafe","type":0,"sectionRef":"#","url":"/lifehacker/taiwan/Taitung/taitung_193-cafe/","content":"193 cafe 藍先和店員寒暄，拿出一疊「eTag 不爽裝」的貼紙給店員， 「這你們留著吧，後山居民想用 eTag 還沒機會呢～」 上了 193 cafe 二樓，小房間內喳喳聊天聲中，一群朋友慶祝著大埔案的法院判決。 「遲來的正義！」大伙相望著電腦上貼的「今天拆大埔 明天拆政府」貼紙，有感而發。 開發與否總有許多不同聲音，然不公道、不正義的政策行徑， 網民自發性的力量，讓環境保護、社會公義、弱勢公益...等公共議題， 在公民意識覺醒與網路串連發酵下，持續發揮著監督作用，不因媒體離去而失焦。 「媒體只在有新聞價值時過來嗜血，膚淺吸飽後隨之離去～ 「身為第一線記者，並非我們願意如此，環境如此又如何～」 朋友向藍吐露著辛酸～ 沒回應朋友，藍看出筆記簿，看著反核旗地圖，兀自說著～ 「這幾年，這樣著重生活、空間、人文的小店家越來越多， 「有沒有發覺，那些掛著反核旗的店家，已經成為我們的聚會指標了～ 「我們的聚會地點，似乎都掛著反核旗？」 「物以類聚吧～」 「支持反核的店家許多想法和我們比較相近，許多也是支持贊助我們行動的成員。」 「這些店家往往有個性、理想，臭味相投啊！」 「...... 藍意外的一句話，轉移了大伙對於政治的無情批判， 藍喜歡這群人個性地聊著理想的樣貌，喜愛和他們一起為議題發聲，但卻不愛參與政治批判～ 「社會環境需要監督的力量，更需要正向的力量。」 悠遊國王子，朋友看完 Legal High 2 後這樣虧著藍～ 享用完精緻的午茶，望著 193 cafe 的空間，藍心想著 「如果這樣有味道的老房子，都能夠被好好對待，而不是拆除破壞。台灣經濟，也許可以走出不同的路。」","keywords":"","version":"Next"},{"title":"藍色日出","type":0,"sectionRef":"#","url":"/lifehacker/taiwan/Taitung/taitung_blue-sunrise/","content":"藍色日出 這兩個月來，藍第三次來到台東。 這個交通遙遠，過去僅為了去綠島、蘭嶼而短暫路過、和台北對角遙望的地方，而未來還會頻繁到訪。 為了心中的理念，藍參與一些公共議題，網路上結識一群志同道合的人。 近來，從網路活動進一步規劃設計實體活動，需輪流來到台東勘查探訪。 藍喜歡這樣奔波。 很累，但每次和當地聯絡人討論後，總有空餘的時間四處走走看看； 每次的探訪總可以結識一些新朋友，了解一些新的私房景點。 藍喜歡這樣看世界！ 在朋友的介紹下，藍來到這間難以發現的早餐店。 點了份什錦蔬果貝果，配杯紅茶豆漿。 藍左手拿起昨晚的會議記錄看著，右手拿著筆在另一張白紙上畫起心智圖。 餐點了送上來，老闆看了心智圖：「這有一個常客跟你一樣，喜歡一邊看資料一邊畫蜘蛛圖～」 桌面不大，藍收起會議資料和筆記，打開記事本確認今日行程後，拿本漫畫配著早餐～ 餐畢，拿著相機拍起店內小品、相片，喜歡手作味道濃厚的角落，喜歡簡單有味道的擺飾。 離開前，藍拍著藍色日出外觀，老房子的獨特魅力、歲月的痕跡充斥著故事，難以仿造。 意識到身後一個人走近，他想拍下那人走近店內瞬間。單眼凝視著觀景窗，靜靜等候。 女孩動作迅速，忡忡地從藍身旁擦身，一轉眼走進店內了。 藍從觀景窗內看到熟悉的身影，一晃而過，放下相機，楞著。 「是她嗎？她不是在台北工作嗎？！」 -x-x-x-x-x- 「是他嗎？他應該在澳洲阿？！」 黃瞥眼看到，那拿著相機猛拍照的觀光客，放下相機的瞬間。 「老闆，一樣！」 「是！紅茶豆漿加鮪魚三明治是吧～都吃那麼多次了，不膩阿？ 「就跟你說我們的牛奶都是初鹿新鮮牛奶高溫處理，營養健康，不試試看阿！？」 老闆一邊收拾桌面，一邊招呼黃入坐。 「這麼巧，剛剛我還在說有一個常客也喜歡畫蜘蛛圖呢，你就來了！」 工作因素，黃派駐台東已好幾個月。 專案剛開始時，多是來台東出差兩三天、開完會勘查完就回台北；隨著專案進行，黃常駐台東了。 黃習慣每週六固定來藍色日出，她不愛改變，週一到週日都有固定去的店家和餐點。 有時遇到星期二要買的早餐臨時公休或餐點已經賣完，黃甚至會驚惶上一整天。 週六早上來藍色日出，可享受這兒小巧迷人的居落感、享受美好的週末上午，又可避開週日的遊客潮。 悠然地，偶爾聽聽店內音樂、偶爾帶上耳機自我沈醉、偶然凝耳偷聽旁桌人的私語。 輕輕然，呆著～ 清晨，金色陽光照亮天際 露珠薄霧壟罩大地 一如人們臉上還掛著的睡意 淡淡憂鬱 藍色日出","keywords":"","version":"Next"},{"title":"胡弄青年民宿 Who Knows Hostel","type":0,"sectionRef":"#","url":"/lifehacker/taiwan/Taitung/taitung_who-knows-hostel/","content":"胡弄青年民宿 Who Knows Hostel 「楊越來越退讓，男友也越來越懶散。碰面時間已經不多，平日噓寒問暖也減少～ 「慢慢地，楊難以感受到男友的心意；漸漸地，楊開始埋怨男友的不用心。 「………」 雙手在鍵盤上飛舞，一篇以 Vapiano 為背景的文章中，楊哭泣著～ ……………… 游是個小有名氣的部落客，以美食跟旅遊為主的部落格。 多次拿到部落客十傑、年度百大部落格…等大大小小各式獎項。 記錄吃喝玩樂心得的部落格，漸出名後收到不少體驗邀約，也有出版社詢問出書意願。 廣大的瀏覽量帶來一點點廣告收入；而在體驗邀約下，許多住宿、用餐也都省了些。 名氣帶來了小小收益，然訪客的留言卻越來越多爭論。 獲邀撰寫的體驗文，容易顧及店家感受，對小缺失置之不提，重心放在滿意的環節， 顯而易見的缺點也常輕描淡寫地帶過，成了報喜不報憂的文章。 陸續有讀者看到文章後前往消費，卻未如預期，而在部落格回文反應。 有些理性回應著店家的退步、有些批評指責部落主拿人手短……… 筆戰蔓延，楊不堪其擾，發表了篇公告不再接受體驗邀約以及回應相關文章。 人氣先是爆紅後急轉直下。網路事件就是如此，一夕成名爾後曇花一現。 近來游的部落格又開始引起關注與討論。 文章不再著重在店內陳設、食物、服務等等的評論，倒像一篇篇的小故事。 第三人稱立場寫著某客人在店內的活動，訴說人生百態。微電影一般。 偶然看到一篇《衛屋茶室》的文章。 不著墨於衛屋的環境、幽靜的日式庭園僅三言兩語帶過，對於衛屋的茶點更是毫無評論。 讀完後游仍不知衛屋究竟是怎樣的環境、餐點評價如何，卻對衛屋產生興趣。 陸續看了該部落格幾篇文章，重心皆不在放店家，而以客人為主。 好奇心使然，游和該部落主聯絡， 「你曾不曾在喝咖啡時，豎直耳朵凝神偷聽後桌客人的對話？ 「每組客人都有他們的故事，每個人都有其口味喜好， 「與其強迫推銷我個人喜好的口味給你，不如告訴你一則故事。 「有興趣，自個兒前去那兒，述說屬於你的故事…」 從該部落主得到這樣寫遊記、食記文章的想法，有趣！ ……………… 游在胡弄交誼廳用筆電寫著楊的故事，五分真實。 虛構的主角，往往取材自己或身邊朋友； 杜撰的故事，常常穿插真實經歷與感受。 偶爾，游對裡頭的人物起了移情心理； 楊是一個好友的縮影，也許該給與楊一個圓滿的結果，游希望楊是永遠快樂的！ 交誼廳另一頭，民宿主人和另外三個房客玩著迷你麻將。 「該進入正題了，先來點 Tequila 吧！」 「Tequila? 是這邊提供的還是？」 胡弄這組客人和主人熟識的關係讓游摸不清頭緒，誤以為這背包客棧還兼作酒吧。 「我們帶來的，你也要來一杯嗎？」 游尚未回應，男生已經斟了一杯送來。 在熱情邀約下，游闔起筆電，和這些素眛平生的旅人 打起 UNO、喝著 Tqauila shot，輸的還有真心話大冒險的處罰伺候！ 「胡弄，看來真的是個相當胡弄的青年民宿！」 睡前，游滿腦想著， 該用什麼故事來記錄這充滿驚奇的一晚，該怎麼來呈現這個有趣的青年民宿。","keywords":"","version":"Next"},{"title":"The WALL 賣捌所 UriSabakiJo","type":0,"sectionRef":"#","url":"/lifehacker/taiwan/Yilan/yilan_the-wall/","content":"The WALL 賣捌所 UriSabakiJo 找個咖啡廳吧，不同的時代感，角落堆積著故事 喀茲作響的木頭地板叫喊著菸草買賣 老舊沙發上隱約情人相擁的身影 塵埃隨獨立創作音樂聲浪起伏 穿梭時代聚集一起的元素，各自協調在這居所 賣捌所 鄰近落地窗旁座位上，潘望著窗外，賣捌所的員工在中庭逗弄著兩隻小狗兒。 鋪滿木板的中庭，空間寬敞，僅簡單擺了兩副桌椅，依賣捌所的簡介來看，假日常有獨立音樂演出。 午後，天色陰晴不定，涼爽無雨的天氣，其實適合在外頭走動遊玩， 潘只想找個角落，也許放空、也許閱讀、也許工作、也許，隨遇而安～ -x-x-x-x-x-x-x-x- 「今天組內的 skype 聊天室，同事發訊息說昨晚工作到四點… 「結果組長竟然回：太優秀了！ 「我實在無法接受這種誤把加班熬夜當常態，工時長卻效率不彰的方式… 「決定明天出門，找個空間窩著，有建議的地方嗎？」 潘在 Line 上和好友抱怨著… 近來團隊工作目標和時程的漂移不定，工作量與壓力本不該如此沈重， 該是十分鐘解決的每日例會，總是拖了近一小時～ 潘喜歡早到早退，卻老是被無效率的會議耽擱下班時間。 「你也還不確定方向，一直在修正。這倒不是問題，好團隊是該有及時調整的能力。 「但你還沒拿準目標前就叫我們一直衝，然後又不斷調整， 「一鼓作氣、再而衰、三而竭，現在這個團隊就是如此，你沒發現罷了！ 「我明天請假！」 週四會議後，潘和組長大吵了一架！ -x-x-x-x-x-x-x-x- 「小姐，請問可以坐這裡嗎？」 「喔，好～」 恍神中的潘以為有人需要併桌，連忙低頭整理桌上的杯盤狼藉，一旁的王笑出聲～ 「幹嘛嚇人！疑，你怎麼會來！？」 「你都從台北來到宜蘭了，身為地主沒道理不撥空陪伴啊～怎麼想來宜蘭？」 怎麼說呢，總覺得遮裡最恰當吧～ 無須舟車勞頓，卻可以和台北、西部城市有截然不同的感受。 交通也處於方便和不方便的折衷，接到同事的電話，可以自己決定要不要回公司。 「反正雪隧老在塞車，不想回去的話就拿那當藉口吧！ 「這樣漫無目的的瞎忙，誰受得了！」 「突然覺得我好像卡夫卡～」 「變形記？」 「不，村上春樹的《海邊的卡夫卡》 「也沒有非得逃避的原因，但就是突來的衝動，一個人去到另個地方獨自待著 「也沒有非要去那的原因，但就是覺得那個地方合適 「你不覺得這日式老建築，和海邊的卡夫卡裡的甲村圖書館很像嗎？」 潘兀自說著，王倒端詳起這建築 日式空間內堆雜著各個時代的物品，因著年份不同風格各異。 牆上張貼了許多獨立創作音樂人展演訊息 四處落腳的書籍、手作物品 落地門窗流漏光線，雜湊的物件，在這日式空間內卻各自相處圓融 「呵，這文青聚集的空間也讓你變的文藝啦？！那你看過法蘭茲．卡夫卡的作品嗎？」 「還真的只看過《變形記》，還是兒童繪本版～」 「或許你可以讀讀《流放記》可能會更有感觸。」 潘走出中庭，和員工一起逗弄著小狗兒… 前些日子被遺棄的狗兒，在員工的照料下恢復元氣 「牠們明天就不在這兒了，有新家庭要收養牠們～」 出入中庭的人變多了，幾個年輕人， 有的拉線、有的在一旁彈著吉他、貝斯、有些不斷進出搬著東西打點環境， 看來似乎在為晚上的表演準備… 「走吧～」 「要離開了？不聽點音樂？想再去哪走走？夜市、公園？」 「嗯，心情疏鬆了就好了～沒有特別想去那，還有其他建議嗎？」 「看《大亨小傳》吧，你喜歡的村上春樹最為推崇的一本小說，聽說這部拍的很棒！」 離去前回頭望了一眼，暮色下這建築更顯獨特 賣捌所，因著圖書、手作、音樂，老舊歷史感配上新創音樂，豪不衝突。","keywords":"","version":"Next"},{"title":"way-2-kywk","type":0,"sectionRef":"#","url":"/lifehacker/way-2-kywk/","content":"way-2-kywk","keywords":"","version":"Next"},{"title":"TOGO","type":0,"sectionRef":"#","url":"/lifehacker/TOGO/","content":"","keywords":"","version":"Next"},{"title":"Hiking w/ Pet​","type":1,"pageTitle":"TOGO","url":"/lifehacker/TOGO/#hiking-w-pet","content":" 新完工~ 陽明山紫明溪步道, 順遊陽明書屋 (中興賓館) by Tony的遊記 - 旅聯網奼紫嫣紅新綠【紫明溪步道秘徑】—期待眾人共愛護 - ■♀醫ㄉ♬♪♬♪ - udn部落格八斗子環保公園+七斗山+望幽谷步道8字走 by 山影狐蹤Fuli的遊記 - 旅聯網壯觀大岩壁，輕鬆健行獅山古道 獅頭山 - Mobile01  ","version":"Next","tagName":"h3"},{"title":"Trail Hiking​","type":1,"pageTitle":"TOGO","url":"/lifehacker/TOGO/#trail-hiking","content":" 宜蘭古魯林道之大元國小。原始山徑二訪。 - Mobile01  ","version":"Next","tagName":"h3"},{"title":"Trip to...​","type":1,"pageTitle":"TOGO","url":"/lifehacker/TOGO/#trip-to","content":" 我在彰化一個 Google Map 上找不到，卻宛如南法的地方，體驗了至今難忘的玫瑰純露手作課 - A Day Magazine ","version":"Next","tagName":"h3"},{"title":"角烙日式庭園咖啡","type":0,"sectionRef":"#","url":"/lifehacker/taiwan/Yilan/yilan_corner/","content":"角烙日式庭園咖啡 李的朋友多、邀約不少，這週末則隻身來到角烙。 推開了幾個邀約，帶了筆電來到角落工作著，忙的其實不是自己工作，而是友情幫朋友的網頁程式設計。 李喜歡雨天的角烙，這週末總人滿為患的日式庭園咖啡，雨天卻空出近半的座位。 角落空間不小，座位也不少。總希望這兒能再少個 1/3 的座位，就是個很舒服的空間了。 映入眼簾的是一棟傳統的日式建築，是日本設計師建造，已於有七十餘年的歷史，以前是大戶人家的豪宅呢。 咖啡館裡面空間挺大的，陳設也古意盎然，感覺有刻意保留這房子原始的樣貌。 第一次前來角烙是被這段文字吸引，卻從此成為常客。 細雨紛飛的秋日午後、日式建築的空間，很舒服的組合。 點了杯曼特寧和鬆餅，帶上耳機，邊看手上的規格書和草擬的架構圖，邊寫著程式… 雙手不停歇地飛舞鍵盤，文思泉湧般進行著。 寫程式和寫作一樣，靈感來時進度飛快；而沒頭緒時怎麼樣也毫無進展。 左手在編輯和瀏覽視窗間切換，邊寫新功能邊測試； 右手在鍵盤和筆桿間交換，邊畫架構邊實作； 雙眼在筆電和桌面遊走，邊看結果邊比對規格。 李被閃光燈打擾了思緒，李討厭店內有人用閃光燈。 轉頭望去，三個年輕人拿著拍立得拍著，看在拍立得面子上，李倒也不計較了。 工作也差不多到一段落，索性放鬆身子、摘下耳機、闔上筆電， 請店員續了杯咖啡，細細品飲，邊觀賞店內百態。 窗邊併桌的位子，大人小孩各半，也各自佔據桌面一半的位子；桌面左邊擺滿杯盤餐點，右側則是玩具、平板電腦。 角落一位少女，淡紫色的毛帽下清秀臉龐認真低頭看著書，好一會不見她抬頭。 那三個剛拿拍立得的年輕人現在拿起單眼拍著。鄰桌兩位女孩看來心事重重。 角烙的曼特寧不若一般印象中的酸，滑順入喉時帶些許果酸，倒是苦味後韻重些。這口感說不上喜愛，但也不討厭就是。 才想著該如形容這口味，該是什麼景色來表現。思緒再度被打斷，鄰桌兩位女生偶爾的激勵，李豎直耳朵聽了會。 「嗯，又是死心眼的情感問題。」 「其實有時候真的不想再去找新的對象，重頭把自己人生交待一次。」 李想起些什麼，從背包裡翻出張CD，那是個熱愛音樂的朋友的創作曲。 拿張簡籤寫了些字，走到櫃臺和店員溝通許久。 店內音樂換了，簡詩敏的歌聲甜美柔和、偶爾迷離。 她的歌詞總是正向，即使是失戀的回憶，大哭一場、拭乾淚、轉身前行。愛要痛快、灑脫！ 結帳離開，李站在角烙遮雨棚下，抬頭看著點點雨滴落下，掀起的漣漪。 「Jasmine 嗎，我要再買三張你的CD! 「你送我那張？送人了！ 「送給一位需要療癒的青春女孩，陌生人！」 兩個女孩結帳時，店員請她們等等，轉身忙了會，找錢時， 另外拿給她們一張CD「剛剛客人說要留給你們的」 便籤抄寫了《一首紀念你的短詩》的歌詞 一首紀念你的短詩 詞/曲 簡詩敏 推開思念記憶裡，蹣跚游絲的塵埃。 推開你愛我想逃開的懦弱。 推開沒有人的那段空洞。 推開我愛你卻不愛我的撕心苦痛。 推開兩個人想貼近彼此，卻又無心傷害的無助。 推開我不懂事，沒有珍惜你的時光。 推開我不懂事，沒有照顧你的時光。 再往前看，往好久好久以前看。 我依稀看見了... 你好愛我，而我也好愛你，曾經的幸福。 但是歲月，它一刻不停留。 我們的愛，就這樣溜走。 而你的手，離開了我的肩膀。 就這樣，消逝在光陰的塵埃之中... 及一句： 「當你遇到對的人，他會牽起你的手，帶你去任何你想去的地方，輕輕地陪伴你。而你們，有一輩子的時間來訴談過去！」","keywords":"","version":"Next"},{"title":"CowiMD","type":0,"sectionRef":"#","url":"/moco/52projects/hedgedoc/","content":"CowiMD","keywords":"","version":"Next"},{"title":"52 Projects","type":0,"sectionRef":"#","url":"/moco/52projects/","content":"","keywords":"","version":"Next"},{"title":"Project Setting​","type":1,"pageTitle":"52 Projects","url":"/moco/52projects/#project-setting","content":" gitignoregitconfiggitmessageEdirotConfig  ","version":"Next","tagName":"h2"},{"title":"01-10​","type":1,"pageTitle":"52 Projects","url":"/moco/52projects/#01-10","content":" 01 - gRPC client / server in go about gRPC |dev notes  ...TBD...  ","version":"Next","tagName":"h2"},{"title":"11-20​","type":1,"pageTitle":"52 Projects","url":"/moco/52projects/#11-20","content":" ","version":"Next","tagName":"h2"},{"title":"See Also​","type":1,"pageTitle":"52 Projects","url":"/moco/52projects/#see-also","content":"","version":"Next","tagName":"h2"},{"title":"github/gitignore","type":0,"sectionRef":"#","url":"/moco/52projects/pm/gitignore/","content":"github/gitignore","keywords":"","version":"Next"},{"title":"Editor Config","type":0,"sectionRef":"#","url":"/moco/52projects/pm/editorconfig/","content":"","keywords":"","version":"Next"},{"title":".editorconfig​","type":1,"pageTitle":"Editor Config","url":"/moco/52projects/pm/editorconfig/#editorconfig","content":" .editorconfig 是 INI 格式的檔案, 由 section 跟 properties 組成的設定格式:  section 被套用的檔案路徑跟副檔名, 例如 .py .jc .java 格式檔舉例來說若要指定專案目錄底下的所有 .js 檔與 .py 檔可以輸入 [*.{js,py}] properties 適用於相對 section 的規範範設定常見的設定如後  ","version":"Next","tagName":"h2"},{"title":"Properties​","type":1,"pageTitle":"Editor Config","url":"/moco/52projects/pm/editorconfig/#properties","content":" The values are case insensitive. They will be lowercased by the core library.  indent_style tab | space Indentation Style indent_size an integer | tab Indentation Size (in single-spaced characters) tab_width a positive integer width of a single tabstop characterdefaults indent_size when indent_size is a number end_of_line lf | crlf |cr line ending file format (Unix, DOS, Mac)if you want to use native line endings between different operating systems it is better not to set this option and leave that task to the VCS! In the future we might add a value like native for this scenario (cf #226). charset latin1 | utf-8 | utf-16be | utf-16le | utf-8-bom file character encodingsee Character Set Support trim_trailing_whitespace true | false whether whitespace is removed from the end of linestrue: remove any whitespace characters preceding newline charactersfalse: ensure the editor keeps whitespace characters insert_final_newline true | false whether file should end with a newline  除了上列常見的屬性外, 語言或編輯器還有許多額外的規範設定, 詳情可見:  EditorConfig Properties /.NET 程式碼樣式規則選項 - .NET | Microsoft Docs /EditorConfig | IntelliJ IDEA  ","version":"Next","tagName":"h3"},{"title":"Example​","type":1,"pageTitle":"Editor Config","url":"/moco/52projects/pm/editorconfig/#example","content":" .editorconfig # http://editorconfig.org root = true [*] indent_style = space indent_size = 2 end_of_line = lf charset = utf-8 trim_trailing_whitespace = true insert_final_newline = true # Use 4 spaces for the Python files [*.py] indent_size = 4 max_line_length = 80 # The JSON files contain newlines inconsistently [*.json] insert_final_newline = ignore # Minified JavaScript files shouldn't be changed [**.min.js] indent_style = ignore insert_final_newline = ignore # Makefiles always use tabs for indentation [Makefile] indent_style = tab # Batch files use tabs for indentation [*.bat] indent_style = tab [*.md] trim_trailing_whitespace = false   ","version":"Next","tagName":"h3"},{"title":"Editor Support​","type":1,"pageTitle":"Editor Config","url":"/moco/52projects/pm/editorconfig/#editor-support","content":" 常見的編輯器幾乎都有支援, 簡單列出部份如下:  JetBrain’s IDEs, including PhpStorm, and WebStormAtomSublime TextEmacs &amp; VimgEdit, jEdit, &amp; Notepad++textmateVisual Studio / VS CodeXcode  ","version":"Next","tagName":"h2"},{"title":"小結​","type":1,"pageTitle":"Editor Config","url":"/moco/52projects/pm/editorconfig/#小結","content":" 其實該不該用 EditorConfig 其實也有各自支持者, 有一派認為使用 EditorConfig 能讓專案維持一致編排效果, 管理上較為方便.  另一派卻覺得每個人有自己習慣喜好的配置, 強迫每個人都用一樣配置過於王道. 要維持專案的一致性, 可以透過 Git Hook 來作到 commit 前的檢查與轉換, 工程師仍可用自己習慣的配置來編輯.  各有對錯好壞, 專案開始前團隊先確認協調好管理方式才是正解.  GitHub 有針對各語言, 編輯器, 環境系統整理了 .gitignore template. 仿效 .gitignore, 開了個 .editorconfig collection 專案來整理各語言常用的 .editorconfig  ","version":"Next","tagName":"h2"},{"title":"See Also​","type":1,"pageTitle":"Editor Config","url":"/moco/52projects/pm/editorconfig/#see-also","content":" Projects Using EditorConfig[Day-15] Editor Config自訂編輯與設定 - iT 邦幫忙::一起幫忙解決難題，拯救 IT 人的一天EditorConfig 快速使用指南 | How-To | Editor 編輯者 #8 | by Aaron Huang | Medium ","version":"Next","tagName":"h2"},{"title":"gitmessage","type":0,"sectionRef":"#","url":"/moco/52projects/pm/gitmessage/","content":"gitmessage","keywords":"","version":"Next"},{"title":"Git config","type":0,"sectionRef":"#","url":"/moco/52projects/pm/kywk gitconfig/","content":"Git config","keywords":"","version":"Next"},{"title":"Awesome Algorithm Resources","type":0,"sectionRef":"#","url":"/moco/bootcamp/algorithm/awesome/","content":"Awesome Algorithm Resources visualising data structures and algorithms through animation - VisuAlgo","keywords":"","version":"Next"},{"title":"[DS] Graph","type":0,"sectionRef":"#","url":"/moco/bootcamp/algorithm/graph/","content":"","keywords":"","version":"Next"},{"title":"Definition​","type":1,"pageTitle":"[DS] Graph","url":"/moco/bootcamp/algorithm/graph/#definition","content":" ","version":"Next","tagName":"h2"},{"title":"Simple graphs​","type":1,"pageTitle":"[DS] Graph","url":"/moco/bootcamp/algorithm/graph/#simple-graphs","content":" In a simple graph, there is no (self-)loop edge (an edge that connects a vertex with itself) and no multiple/parallel edges (edges between the same pair of vertices). In another word: There can only be up to one edge between a pair of distinct vertices.  The number of edges E in a simple graph can only range from 0 to O(V2).  Graph algorithms on simple graphs are easier than on non-simple graphs.  ","version":"Next","tagName":"h3"},{"title":"connected graph​","type":1,"pageTitle":"[DS] Graph","url":"/moco/bootcamp/algorithm/graph/#connected-graph","content":" An undirected graph G is called connected if there is a path between every pair of distinct vertices of G.    In a directed graph, we define the concept of Strongly Connected Component (SCC). In the currently displayed directed graph, we have {0}, {1, 2, 3}, and {4, 5, 6, 7} as its three SCCs.  ","version":"Next","tagName":"h3"},{"title":"acyclic graph​","type":1,"pageTitle":"[DS] Graph","url":"/moco/bootcamp/algorithm/graph/#acyclic-graph","content":" A cycle is a path that starts and ends with the same vertex.  An acyclic graph is a graph that contains no cycle.  In an undirected graph, each of its undirected edge causes a trivial cycle although we usually will not classify it as a cycle.    A directed graph that is also acyclic has a special name: Directed Acyclic Graph (DAG), as shown above.  ","version":"Next","tagName":"h3"},{"title":"Special Graph​","type":1,"pageTitle":"[DS] Graph","url":"/moco/bootcamp/algorithm/graph/#special-graph","content":" ","version":"Next","tagName":"h2"},{"title":"Tree​","type":1,"pageTitle":"[DS] Graph","url":"/moco/bootcamp/algorithm/graph/#tree","content":" ","version":"Next","tagName":"h3"},{"title":"Complete Graph​","type":1,"pageTitle":"[DS] Graph","url":"/moco/bootcamp/algorithm/graph/#complete-graph","content":" ","version":"Next","tagName":"h3"},{"title":"Bipartite Graph​","type":1,"pageTitle":"[DS] Graph","url":"/moco/bootcamp/algorithm/graph/#bipartite-graph","content":" ","version":"Next","tagName":"h3"},{"title":"Directed Acyclic Graph (DAG)​","type":1,"pageTitle":"[DS] Graph","url":"/moco/bootcamp/algorithm/graph/#directed-acyclic-graph-dag","content":" ","version":"Next","tagName":"h3"},{"title":"less frequently used​","type":1,"pageTitle":"[DS] Graph","url":"/moco/bootcamp/algorithm/graph/#less-frequently-used","content":" Planar GraphLine GraphStar GraphWheel Graph  ","version":"Next","tagName":"h3"},{"title":"Data Structure​","type":1,"pageTitle":"[DS] Graph","url":"/moco/bootcamp/algorithm/graph/#data-structure","content":" ","version":"Next","tagName":"h2"},{"title":"Adjacency Matrix (AM)​","type":1,"pageTitle":"[DS] Graph","url":"/moco/bootcamp/algorithm/graph/#adjacency-matrix-am","content":" Adjacency Matrix (AM) is a square matrix where the entry AM[i][j] shows the edge's weight from vertex i to vertex j. For unweighted graphs, we can set a unit weight = 1 for all edge weights. An 'x' means that that vertex does not exist (deleted).   type AM struct { matrix [][]int edgeList []Edge }   ","version":"Next","tagName":"h3"},{"title":"Adjacency List (AL)​","type":1,"pageTitle":"[DS] Graph","url":"/moco/bootcamp/algorithm/graph/#adjacency-list-al","content":" Adjacency List (AL) is an array of V lists, one for each vertex (usually in increasing vertex number) where for each vertex i, AL[i] stores the list of i's neighbors. For weighted graphs, we can store pairs of (neighbor vertex number, weight of this edge) instead.   type AL struct { list [][]int edges int }   ","version":"Next","tagName":"h3"},{"title":"Edge List (EL)​","type":1,"pageTitle":"[DS] Graph","url":"/moco/bootcamp/algorithm/graph/#edge-list-el","content":" Edge List (EL) is a collection of edges with both connecting vertices and their weights. Usually, these edges are sorted by increasing weight, e.g., part of Kruskal's algorithm for Minimum Spanning Tree (MST) problem. However in this visualization, we sort the edges based on increasing first vertex number and if ties, by increasing second vertex number. Note that Bidirectional edges in undirected/directed graph are listed once/twice, respectively.   type EL struct { edgeList []Edge vertex []int }  ","version":"Next","tagName":"h3"},{"title":"[DS] AVL Tree","type":0,"sectionRef":"#","url":"/moco/bootcamp/algorithm/avl/","content":"","keywords":"","version":"Next"},{"title":"Feature​","type":1,"pageTitle":"[DS] AVL Tree","url":"/moco/bootcamp/algorithm/avl/#feature","content":" A balanced BST is a BST that h = O(log N). AVL Tree (Adelson-Velskii &amp; Landis, 1962) that is named after its inventor: Adelson-Velskii and Landis.  ...detail TBD ...  ","version":"Next","tagName":"h2"},{"title":"extends BST​","type":1,"pageTitle":"[DS] AVL Tree","url":"/moco/bootcamp/algorithm/avl/#extends-bst","content":" AVL Tree 亦是一種 BST, 所有對 BST 的操作都適用於 AVL Tree. 適合類別界面封裝概念, 操作時無須考慮是由那一種 Tree 實作, 透過類別封裝界面操作即可.  另一點則是實作上 AVL Tree 中許多函式都可以直接沿用 BST 界面, 也適合用繼承以利程式重複使用與維護.   type AVLNode struct { value int height int left *AVLNode right *AVLNode } func newAVLNode(v int) *AVLNode { return &amp;AVLNode{ value: v, height: 1, left: nil, right: nil, } } class AVL extends BST { constructor(data) { super() this.root = null if (typeof(data) === 'number') { this.root = new AVLNode(data) } else if (Array.isArray(data)) { this.root = new AVLNode(data[0]) for (let i = 1; i &lt; data.length; i++) this.insert(data[i]) } } } class AVLNode extends BSTNode { constructor(data) { super() this.value = data this.left = null this.right = null this.height = 1 } } export class AVL extends BST { constructor(data: number | Array&lt;number&gt;) { super(null) this.root = null if (typeof (data) === 'number') { this.root = new AVLNode(data) } else if (Array.isArray(data)) { this.root = new AVLNode(data[0]) for (let i = 1; i &lt; data.length; i++) this.insert(data[i]) } } } export class AVLNode extends BSTNode { left: IAVLNode right: IAVLNode height: number constructor(data: number) { super(data) this.left = null this.right = null this.height = 1 } } class AVL(BST): def __init__(self, data): self.root = None if isinstance(data, int): self._root = AVLNode(data) elif isinstance(data, list): self._root = AVLNode(data[0]) for i in range(1, len(data), 1): self.insert(data[i]) class AVLNode(BSTNode): def __init__(self, data): self.value = data self.left = None self.right = None self.height = 1   ","version":"Next","tagName":"h3"},{"title":"height(v)​","type":1,"pageTitle":"[DS] AVL Tree","url":"/moco/bootcamp/algorithm/avl/#heightv","content":" height(v): The number of edges on the path from vertex v down to its deepest leaf. This attribute is saved in each vertex so we can access a vertex's height in O(1) without having to recompute it every time.  v.height = -1 (if v is an empty tree) v.height = max(v.left.height, v.right.height) + 1 (otherwise) // Balance Factor v.bf = v.left.height - v.right.height   ","version":"Next","tagName":"h3"},{"title":"Method​","type":1,"pageTitle":"[DS] AVL Tree","url":"/moco/bootcamp/algorithm/avl/#method","content":" ","version":"Next","tagName":"h2"},{"title":"rebalance​","type":1,"pageTitle":"[DS] AVL Tree","url":"/moco/bootcamp/algorithm/avl/#rebalance","content":" AVL Tree needs to check if still balance after modified  check balance factor of this and its children case1: this.rotateRight case2: this.left.rotateLeft, this.rotateRight case3: this.rotateLeft case4: this.right.rotateRight, this.rotateLeft this is balanced    func (n *AVLNode) rotate() *AVLNode { left := n.left.getHeight() right := n.right.getHeight() bf := left - right if bf &gt; 1 { if n.left.left.getHeight() &lt; n.left.right.getHeight() { n.left = n.left.rotateLeft() } return n.rotateRight() } else if bf &lt; -1 { if n.right.left.getHeight() &gt; n.right.right.getHeight() { n.right = n.right.rotateRight() } return n.rotateLeft() } else { n.updateHeight() return n } } // class AVLNode static _rotate(node) { let left = AVLNode._heightHelper(node.left) let right = AVLNode._heightHelper(node.right) let bf = left - right if (bf &gt; 1) { if (AVLNode._heightHelper(node.left.left) &lt; AVLNode._heightHelper(node.left.right)) node.left = AVLNode._rotateLeft(node.left) return AVLNode._rotateRight(node) } else if (bf &lt; -1) { if (AVLNode._heightHelper(node.right.left) &gt; AVLNode._heightHelper(node.right.right)) node.right = AVLNode._rotateRight(node.right) return AVLNode._rotateLeft(node) } else { node._updateHeight() return node } } static rotate(node: IAVLNode): IAVLNode { let left = AVLNode.heightHelper(node!.left) let right = AVLNode.heightHelper(node!.right) let bf = left - right if (bf &gt; 1) { if (AVLNode.heightHelper(node!.left!.left) &lt; AVLNode.heightHelper(node!.left!.right)) node!.left = AVLNode.rotateLeft(node!.left) return AVLNode.rotateRight(node) } else if (bf &lt; -1) { if (AVLNode.heightHelper(node!.right!.left) &gt; AVLNode.heightHelper(node!.right!.right)) node!.right = AVLNode.rotateRight(node!.right) return AVLNode.rotateLeft(node) } else { node!.updateHeight() return node } } @classmethod def rotate(cls, node): left = AVLNode.height_helper(node.left) right = AVLNode.height_helper(node.right) bf = left - right if bf &gt; 1: if AVLNode.height_helper(node.left.left) &lt; AVLNode.height_helper(node.left.right): node.left = AVLNode.rotate_left(node.left) return AVLNode.rotate_right(node) elif bf &lt; -1: if AVLNode.height_helper(node.right.left) &gt; AVLNode.height_helper(node.right.right): node.right = AVLNode.rotate_right(node.right) return AVLNode.rotate_left(node) else: node.update_height() return node   ","version":"Next","tagName":"h3"},{"title":"rotate Left/Right​","type":1,"pageTitle":"[DS] AVL Tree","url":"/moco/bootcamp/algorithm/avl/#rotate-leftright","content":"  func (n *AVLNode) rotateLeft() *AVLNode { result := n.right t := result.left n.right = t n.height-- result.left = n return result } func (n *AVLNode) rotateRight() *AVLNode { result := n.left t := result.right n.left = t n.height-- result.right = n return result } // class AVLNode static _rotateLeft(node) { let result = node.right let t = result.left node.right = t node.height-- result.left = node return result } static _rotateRight(node) { let result = node.left let t = result.right node.left = t node.height-- result.right = node return result } // class AVLNode static rotateLeft(node: IAVLNode): IAVLNode { let result = node!.right let t = result!.left node!.right = t node!.height-- result!.left = node return result } static rotateRight(node: IAVLNode): IAVLNode { let result = node!.left let t = result!.right node!.left = t node!.height-- result!.right = node return result } @classmethod def rotate_left(cls, node): result = node.right t = result.left node.right = t node.height = node.height - 1 result.left = node return result @classmethod def rotate_right(cls, node): result = node.left t = result.right node.left = t node.height = node.height - 1 result.right = node return result   ","version":"Next","tagName":"h3"},{"title":"insert(v)​","type":1,"pageTitle":"[DS] AVL Tree","url":"/moco/bootcamp/algorithm/avl/#insertv","content":" insert v rebalance tree    func (n *AVLNode) insert(val int) IBSTNode { return n.insertHelper(val) } func (n *AVLNode) insertHelper(val int) *AVLNode { if n == nil { return newAVLNode(val) } if n.value &gt; val { n.left = n.left.insertHelper(val) } else { n.right = n.right.insertHelper(val) } return n.rotate() } // class AVLNode insert(val) { return AVLNode._insertHelper(val, this) } static _insertHelper(val, node) { if (node === null) return new AVLNode(val) if (node.value &gt; val) node.left = AVLNode._insertHelper(val, node.left) else node.right = AVLNode._insertHelper(val, node.right) return AVLNode._rotate(node) } // class AVLNode public insert(val: number): IAVLNode { return AVLNode.insertHelper(val, this) } static insertHelper(val: number, node: IAVLNode): IAVLNode { if (node === null) return new AVLNode(val) if (node.value &gt; val) node.left = AVLNode.insertHelper(val, node.left) else node.right = AVLNode.insertHelper(val, node.right) return AVLNode.rotate(node) } # class AVL def insert(self, val): if self._root is None: self._root = AVLNode(val) self._root = self._root.insert(val) # class AVLNode def insert(self, val): return AVLNode.insert_helper(val, self) @classmethod def insert_helper(cls, val, node): if node is None: return AVLNode(val) if val &lt; node.value: node.left = AVLNode.insert_helper(val, node.left) else: node.right = AVLNode.insert_helper(val, node.right) return AVLNode.rotate(node)   ","version":"Next","tagName":"h3"},{"title":"remove(v)​","type":1,"pageTitle":"[DS] AVL Tree","url":"/moco/bootcamp/algorithm/avl/#removev","content":" remove v rebalance tree    func (n *AVLNode) remove(val int) IBSTNode { return n.removeHelper(val) } func (n *AVLNode) removeHelper(val int) *AVLNode { // remove v: same as BSTNode // ,,, return n.rotate() } remove (val) { return AVLNode._removeHelper(val, this) } static _removeHelper(val, node) { // remove v: same as BSTNode // ... return AVLNode._rotate(node) } public remove (val: number): IAVLNode { return AVLNode.removeHelper(val, this) } static removeHelper(val:number, node: IAVLNode): IAVLNode { // remove v: same as BSTNode // ... return AVLNode.rotate(node) } def remove(self, val): return AVLNode.remove_helper(val, self) @classmethod def remove_helper(cls, val, node): # remove v: same as BSTNode # ... return AVLNode.rotate(node)   ","version":"Next","tagName":"h3"},{"title":"小結​","type":1,"pageTitle":"[DS] AVL Tree","url":"/moco/bootcamp/algorithm/avl/#小結","content":" Binary Heap 一些特性適合練習與解釋 Class 中的 private / public / class method. 而 BST / AVL Tree 則很適合 OOP 中的繼承和封裝概念.  這篇盡量以各語言中原生或模擬繼承的方式實作 AVL 對 BST 的繼承. 而限於 Golang 的特性, 繼承和 Overriding 會讓程式變得過於複雜, 反倒失去 Golang keep in simple 哲學, 僅用 interface 來封裝 AVL Tree Node.  ","version":"Next","tagName":"h2"},{"title":"See Also​","type":1,"pageTitle":"[DS] AVL Tree","url":"/moco/bootcamp/algorithm/avl/#see-also","content":" ","version":"Next","tagName":"h2"},{"title":"AVL​","type":1,"pageTitle":"[DS] AVL Tree","url":"/moco/bootcamp/algorithm/avl/#avl","content":" Binary Search Tree, AVL Tree - VisuAlgo  ","version":"Next","tagName":"h3"},{"title":"Inheritance 繼承​","type":1,"pageTitle":"[DS] AVL Tree","url":"/moco/bootcamp/algorithm/avl/#inheritance-繼承","content":" Golang [Golang] 程式設計教學：用介面 (Interface) 實踐繼承和多型 | 開源技術教學網秒懂 go 语言的继承 | Go 技术论坛Golang OOP、繼承、組合、介面_Go語言中文網 - MdEditor ","version":"Next","tagName":"h3"},{"title":"[DS] Binary (Max) Heap","type":0,"sectionRef":"#","url":"/moco/bootcamp/algorithm/heap/","content":"","keywords":"","version":"Next"},{"title":"1-based Compact Array​","type":1,"pageTitle":"[DS] Binary (Max) Heap","url":"/moco/bootcamp/algorithm/heap/#1-based-compact-array","content":" we can implement basic binary tree traversal operations with simple index manipulations (with help of bit shift manipulation):  parent(i) = i&gt;&gt;1, index i divided by 2 (integer division),left(i) = i&lt;&lt;1, index i multiplied by 2,right(i) = (i&lt;&lt;1)+1, index i multiplied by 2 and added by 1.  ","version":"Next","tagName":"h2"},{"title":"Basic Operation​","type":1,"pageTitle":"[DS] Binary (Max) Heap","url":"/moco/bootcamp/algorithm/heap/#basic-operation","content":" ","version":"Next","tagName":"h2"},{"title":"siftUp​","type":1,"pageTitle":"[DS] Binary (Max) Heap","url":"/moco/bootcamp/algorithm/heap/#siftup","content":" siftUp swaps a node that is too large with its parent (thereby moving it up) until it is no larger than the node above it.   func (h *Heap) siftUp(idx int) { parent := idx &gt;&gt; 1 for idx &gt; 1 &amp;&amp; (*h)[idx] &gt; (*h)[parent] { (*h)[idx], (*h)[parent] = (*h)[parent], (*h)[idx] idx = parent parent = idx &gt;&gt; 1 } } siftUp(idx) { let parent = idx &gt;&gt; 1 while ((idx &gt; 1) &amp;&amp; (this.data[idx] &gt; this.data[parent])) { this.swap(idx, parent) idx = parent parent = idx &gt;&gt; 1 } } siftUp(idx: number) { let parent = idx &gt;&gt; 1 while ((idx &gt; 1) &amp;&amp; (this._data[idx] &gt; this._data[parent])) { this.swap(idx, parent) idx = parent parent = idx &gt;&gt; 1 } } def __siftUp(self, idx): parent = idx &gt;&gt; 1 while idx &gt; 1 and self.__data[idx] &gt; self.__data[parent]: self.__swap(idx, parent) idx = parent parent = idx &gt;&gt; 1   ","version":"Next","tagName":"h3"},{"title":"siftDown​","type":1,"pageTitle":"[DS] Binary (Max) Heap","url":"/moco/bootcamp/algorithm/heap/#siftdown","content":" siftDown swaps a node that is too small with its largest child (thereby moving it down) until it is at least as large as both nodes below it.   func (h *Heap) siftDown(idx int) { isLChildLarger := false isRChildLarger := false left := idx &lt;&lt; 1 if left &lt; len(*h) { if (*h)[left] &gt; (*h)[idx] { isLChildLarger = true } } right := left + 1 if right &lt; len(*h) { if (*h)[right] &gt; (*h)[idx] { isRChildLarger = true } } if isLChildLarger &amp;&amp; isRChildLarger { if (*h)[right] &gt; (*h)[left] { (*h)[right], (*h)[idx] = (*h)[idx], (*h)[right] h.siftDown(right) } else { (*h)[left], (*h)[idx] = (*h)[idx], (*h)[left] h.siftDown(left) } } else if isRChildLarger { (*h)[right], (*h)[idx] = (*h)[idx], (*h)[right] h.siftDown(right) } else if isLChildLarger { (*h)[left], (*h)[idx] = (*h)[idx], (*h)[left] h.siftDown(left) } } siftDown(idx) { let isLeftLarger = false let isRightLarger = false let left = idx&lt;&lt;1 if ((left &lt; this.data.length) &amp;&amp; (this.data[left] &gt; this.data[idx])) isLeftLarger = true let right = left + 1 if ((right &lt; this.data.length) &amp;&amp; (this.data[right] &gt; this.data[idx])) isRightLarger = true if (isLeftLarger &amp;&amp; isRightLarger) { if (this.data[right] &gt; this.data[left]) { this.swap(right, idx) this.siftDown(right) } else { this.swap(left, idx) this.siftDown(left) } } else if (isLeftLarger) { this.swap(left, idx) this.siftDown(left) } else if (isRightLarger) { this.swap(right, idx) this.siftDown(right) } } siftDown(idx: number) { let isLeftLarger = false let isRightLarger = false let left = idx &lt;&lt; 1 if ((left &lt; this._data.length) &amp;&amp; (this._data[left] &gt; this._data[idx])) isLeftLarger = true let right = left + 1 if ((right &lt; this._data.length) &amp;&amp; (this._data[right] &gt; this._data[idx])) isRightLarger = true if (isLeftLarger &amp;&amp; isRightLarger) { if (this._data[left] &gt; this._data[right]) { this.swap(left, idx) this.siftDown(left) } else { this.swap(right, idx) this.siftDown(right) } } else if (isLeftLarger) { this.swap(left, idx) this.siftDown(left) } else if (isRightLarger) { this.swap(right, idx) this.siftDown(right) } } def __siftDown(self, idx): leftLarger = False rightLarger = False left = idx &lt;&lt; 1 if left &lt; len(self.__data) and self.__data[left] &gt; self.__data[idx]: leftLarger = True right = left + 1 if right &lt; len(self.__data) and self.__data[right] &gt; self.__data[idx]: rightLarger = True if leftLarger and rightLarger: if self.__data[left] &gt; self.__data[right]: self.__swap(left, idx) self.__siftDown(left) else: self.__swap(right, idx) self.__siftDown(right) elif leftLarger: self.__swap(left, idx) self.__siftDown(left) elif rightLarger: self.__swap(right, idx) self.__siftDown(right)   ","version":"Next","tagName":"h3"},{"title":"Method​","type":1,"pageTitle":"[DS] Binary (Max) Heap","url":"/moco/bootcamp/algorithm/heap/#method","content":" All Binary Max Heap method could be finish by combination of basic operation.  ","version":"Next","tagName":"h2"},{"title":"Create​","type":1,"pageTitle":"[DS] Binary (Max) Heap","url":"/moco/bootcamp/algorithm/heap/#create","content":" O(N log N)​  Start from an empty Binary Max Heap  for (i = 0; i &lt; A.length; ++i) Insert(A[i])   O(N)​  The input array A as it is  for (i = A.length/2; i &gt;= 1; --i) siftDown(i)   ","version":"Next","tagName":"h3"},{"title":"Insert​","type":1,"pageTitle":"[DS] Binary (Max) Heap","url":"/moco/bootcamp/algorithm/heap/#insert","content":"  func (h *Heap) Insert(num int) { *h = append(*h, num) h.siftUp(len(*h) - 1) } insert(num) { this.data.push(num) this.siftUp(this.data.length - 1) } insert(num: number) { this._data.push(num) this.siftUp(this._data.length - 1) } def insert(self, num): self.__data.append(num) self.__siftUp(len(self.__data) - 1)   ","version":"Next","tagName":"h3"},{"title":"ExtractMax​","type":1,"pageTitle":"[DS] Binary (Max) Heap","url":"/moco/bootcamp/algorithm/heap/#extractmax","content":" Because we promote a leaf vertex to the root vertex of a Binary Max Heap, it will very likely violates the Max Heap property.ExtractMax() operation then fixes Binary Max Heap property from the root downwards by comparing the current value with the its child/the larger of its two children (if necessary).   func (h *Heap) ExtractMax() (int, error) { if len(*h) &lt; 1 { return 0, fmt.Errorf(&quot;Empty Heap&quot;) } result := (*h)[1] (*h)[1] = (*h)[len(*h)-1] *h = (*h)[:len(*h)-1] h.siftDown(1) return result, nil } extractMax() { if (this.data.length &lt; 1) return null let result = this.data[1] this.data[1] = this.data[this.data.length - 1] this.data.pop() this.siftDown(1) return result } extractMax(): number { if (this._data.length &lt; 1) return Number.NEGATIVE_INFINITY let result = this._data[1] this._data[1] = this._data[this._data.length - 1] this._data.pop() this.siftDown(1) return result } def extractMax(self): if len(self.__data) &lt; 1: raise Exception(&quot;Sorry, no numbers&quot;) result = self.__data[1] self.__data[1] = self.__data[len(self.__data) - 1] self.__data.pop() self.__siftDown(1) return result   ","version":"Next","tagName":"h3"},{"title":"UpdateKey(i, newv)​","type":1,"pageTitle":"[DS] Binary (Max) Heap","url":"/moco/bootcamp/algorithm/heap/#updatekeyi-newv","content":" If the index i of the value is known, we can do the following simple strategy:  Simply update A[i] = newvcall both shiftUp(i) and shiftDown(i) only at most one operation will be triggered.  A[i] = newv; // let oldv = A[i] shiftup(i); // if newv &gt; oldv shiftdown(i); // if newv &lt; oldv   ","version":"Next","tagName":"h3"},{"title":"Delete(i)​","type":1,"pageTitle":"[DS] Binary (Max) Heap","url":"/moco/bootcamp/algorithm/heap/#deletei","content":" Let A[i] become the new max one and fix the Heap, then ExtractMax().  A[i] = A[1]+1; siftUp(i); // new max/root ExtractMax(); // now easy to delete   ","version":"Next","tagName":"h3"},{"title":"Heap Sort​","type":1,"pageTitle":"[DS] Binary (Max) Heap","url":"/moco/bootcamp/algorithm/heap/#heap-sort","content":" HeapSort() operation (assuming the Binary Max Heap has been created in O(N)) is very easy. Simply call the O(log N) ExtractMax() operation N times.  Simple Analysis: HeapSort() clearly runs in O(N log N)— an optimal comparison-based sorting algorithm.   func Sort(nums []int) []int { h := NewHeap() h.Create(nums) result := make([]int, len(nums)) for i := len(nums) - 1; i &gt;= 0; i-- { result[i], _ = h.ExtractMax() } return result } static sort(nums) { let h = new Heap(nums) let result = new Array(nums.length) for (let i = nums.length - 1; i &gt;= 0; i--) result[i] = h.extractMax() return result } static sort(nums: Array&lt;number&gt;): Array&lt;number&gt; { let h = new Heap(nums) let result = new Array(nums.length) for (let i = nums.length - 1; i &gt;= 0; i--) result[i] = h.extractMax() return result } @classmethod def sort(cls, nums): h = Heap(nums) result = [None] * len(nums) for i in range(len(nums) - 1, -1, -1): result[i] = h.extractMax() return result   ","version":"Next","tagName":"h2"},{"title":"小結​","type":1,"pageTitle":"[DS] Binary (Max) Heap","url":"/moco/bootcamp/algorithm/heap/#小結","content":" 這次特別使用類別來實作 Binary Heap. Heap 中 siftUp / siftDown 的操作性質較偏向 class 內 private method. Insert / ExtractMax / UpdateKey / Delete 是偏向 public method 的操作. 而 HeapSort 則非常適合用 class methos 來實作.  趁這機會練習 Go / JS / Python 幾種語言中的類別寫法ㄡ. OOP 的觀念和能力在專案開發很實用, 熟悉如何實作或模擬 OOP 的操作以及相關限制, 是重要的基礎.  ","version":"Next","tagName":"h2"},{"title":"See Also​","type":1,"pageTitle":"[DS] Binary (Max) Heap","url":"/moco/bootcamp/algorithm/heap/#see-also","content":" ","version":"Next","tagName":"h2"},{"title":"Heap​","type":1,"pageTitle":"[DS] Binary (Max) Heap","url":"/moco/bootcamp/algorithm/heap/#heap","content":" Binary Heap (Priority Queue) - VisuAlgoalgorithm - siftUp and siftDown operation in heap for heapifying an array - Stack Overflowalgorithm - How can building a heap be O(n) time complexity? - Stack Overflow  ","version":"Next","tagName":"h3"},{"title":"Class 類別​","type":1,"pageTitle":"[DS] Binary (Max) Heap","url":"/moco/bootcamp/algorithm/heap/#class-類別","content":" [JS] JavaScript 類別（Class） | PJCHENder 未整理筆記類別 - TypeScript 新手指南第 15 章 物件與類別 - Python[Python物件導向]淺談Python類別(Class) ","version":"Next","tagName":"h3"},{"title":"Awesome Level Up Resources","type":0,"sectionRef":"#","url":"/moco/bootcamp/awesome/","content":"","keywords":"","version":"Next"},{"title":"Coding​","type":1,"pageTitle":"Awesome Level Up Resources","url":"/moco/bootcamp/awesome/#coding","content":" Level Up CodingGeeksforGeeks | A computer science portal for geeksCodingem: Free Programming Tutorials  ","version":"Next","tagName":"h2"},{"title":"Online Course​","type":1,"pageTitle":"Awesome Level Up Resources","url":"/moco/bootcamp/awesome/#online-course","content":" Baeldung on CS  ","version":"Next","tagName":"h2"},{"title":"ACM​","type":1,"pageTitle":"Awesome Level Up Resources","url":"/moco/bootcamp/awesome/#acm","content":"","version":"Next","tagName":"h3"},{"title":"[讀書心得] CS101 初心者的計概與 coding 火球術","type":0,"sectionRef":"#","url":"/moco/bootcamp/beginner/cs_cs101/","content":"[讀書心得] CS101 初心者的計概與 coding 火球術 這門課是在 [ALG101] 先別急著寫 Leetcode 課程中看到的延伸閱讀資訊, 相對於 ALG101 更加入門和廣泛. 以學習曲線來看其實是該先學 CS101 再學 ALG101 更加合適. 這門課更加入門, 本篇心得將不依章節條列, 邊聽課邊隨手記些雜筆, 也可能什麼都沒記. Command Line Interface (CLI) 可能我接觸電腦較早, 曾經覺得工程師怎麼可以不懂 CLI, 甚至有段時期不屑於 IDE. 而隨著經驗積累, 慢慢改觀的是, 工程師學習背景和專長不同, 善用工具解決需求, 其實夠了. 至於工具細節, 相關技術原理... 等更深入的了解, 看每個人想要的成長路線會有不同選擇, 並非絕對. 當然, 個人還是 old school, CLI 萬歲那派.見山是山 見山不是山 見山是山 回頭看這些初學者的課程, 偶爾會陷入同意與不同意之間的拉鋸. 以初心者的學習來說, 課程內容簡單比較容易接受與理解. 但對資深工程師角度, 又怕過於簡單的講解, 會讓初學者建立不完全正確的觀念. 不過, 見山是山永遠是人生必經過程. 回顧前文, 比起讀書心得, 這篇可能更接近心情札記. References What's an algorithm? - David J. Malan - YouTube Time complexity analysis - How to calculate running time? - YouTube[資訊之芽 算法班] 01. 複雜度分析 - YouTube visualising data structures and algorithms through animation - VisuAlgo","keywords":"","version":"Next"},{"title":"[ALG101] 先別急著寫 Leetcode","type":0,"sectionRef":"#","url":"/moco/bootcamp/beginner/cs_alg101/","content":"","keywords":"","version":"Next"},{"title":"Unit0 課程簡介​","type":1,"pageTitle":"[ALG101] 先別急著寫 Leetcode","url":"/moco/bootcamp/beginner/cs_alg101/#unit0-課程簡介","content":" 確認這堂課是符合自己的需求說明課程進行方式學習使用 LidemyOJ (LIOJ)Project 0: LIOJ1001: A+BcodeLIOB1002: 數字比大小code  這單元內容其實和課堂簡介差不多. 令我感興趣的是練習題的題目說明, 關於輸入的正整數, 定義很嚴謹. 是個我很容易覺得一般人都會知道, 不會花心力特別定義的地方. 也是我最容易疏忽的地方.  ","version":"Next","tagName":"h2"},{"title":"Unit1 要學好程式，從不要寫程式開始​","type":1,"pageTitle":"[ALG101] 先別急著寫 Leetcode","url":"/moco/bootcamp/beginner/cs_alg101/#unit1-要學好程式從不要寫程式開始","content":" 對於程式 / 題目 有些人用想的就解的開: 解開效率很好解開了但很慢想到了，但寫不出來 另一些人想不出來解法 (其實和想得到卻寫不出來一樣) pseudo code: 用抽象概念來表示想法, 不拘泥於程式語言 思考解法, 不寫任何程式碼把想法寫成 pseudo code 一個個可執行步驟跳轉重複步驟 轉換 pseudo code 為程式碼 簡單的 FizzBuzz 藏有 深度(google 面試題)  ","version":"Next","tagName":"h2"},{"title":"Unit2：寫程式之前，先學會「看程式」​","type":1,"pageTitle":"[ALG101] 先別急著寫 Leetcode","url":"/moco/bootcamp/beginner/cs_alg101/#unit2寫程式之前先學會看程式","content":" 看懂程式碼, 學會像電腦一樣思考把程式執行每個步驟順序寫下, 一步步驗證是否和自己想法一致善用 debugger 工具, 觀察變數變化和執行流程等, 驗證程式執行和自己想法是否相同,  在國高中參賽時, 很常進行類似這單元的思考練習. 令我印象深刻的倒是課程實戰練習的講解部份, 敘述相當詳盡. 是我很沒耐心去落實的動作, 該好好看齊.  ","version":"Next","tagName":"h2"},{"title":"Unit3：寫程式前的最後一步：看懂題目​","type":1,"pageTitle":"[ALG101] 先別急著寫 Leetcode","url":"/moco/bootcamp/beginner/cs_alg101/#unit3寫程式前的最後一步看懂題目","content":" 注意題目要求, 弄清題意, 白話文理解題目, 小心陷阱看清楚題目輸入輸出的方式最重要的小事: 輸入範圍 不同範圍 = 不同限制實務上, 範圍決定方法 Example: LIOJ1008: 幾個水桶code Tips: 每日一面 - 求與數字最接近的 2 的 N 次方 - 人人焦點LIOJ1004: 聯誼順序比大小code Tips: BigInt - JavaScript | MDN Project 3: LIOJ 1010：靈魂伴侶codeLIOJ 1015：音速小子codeLIOJ 1017：貪婪的小偷code javascript - How to sort an array of integers correctly - Stack Overflowjavascript - How to find the sum of an array of numbers - Stack OverflowArray.prototype.splice() - JavaScript | MDN  認真該打屁股, 這個單元主要談需仔細理解程式規格書, 也就是細心看題目和輸入限制等. 因此範例作業題目相當簡單, 重心在細心處理輸入部份. 而自己在範例和作業時犯的錯誤. 還是粗心下未好好閱讀題目限制等. 這點無論刷題或日後工作, 都是該避免的.  ","version":"Next","tagName":"h2"},{"title":"Unit4：主角總是最後才登場：寫程式囉​","type":1,"pageTitle":"[ALG101] 先別急著寫 Leetcode","url":"/moco/bootcamp/beginner/cs_alg101/#unit4主角總是最後才登場寫程式囉","content":" 把虛擬碼轉換為程式碼過程中, 還不知如何處理的功能區塊, 先切割問題, 把功能拆出來為獨立函式, 再逐項實作獨立函式. 這樣結構明確, 功能清晰. 可以幫助解題時腦袋的思緒更清楚, 日後調整與最佳化函式實作也比較容易.把大問題變成小問題, 把題目簡化，再持續增加難度. 遇到問題時先用最簡單, 最基本的條件去解, 再慢慢延伸, 會更容易上手.Example: LIOJ 1020：判斷質數codeLIOJ 1021: 好多星星codeLIOJ 1022: 印出金字塔code Project 4: LIOJ 1023: 印出聖誕樹codeLIOJ 1024: NM 乘法表codeLIOJ 1025：水仙花數code  終究本課程中的題目對我還是太簡單, 在練習耐心聽課和一一解題之餘, 同時也練習著從數學 / 語言特性 / ...等地方著手, 如何寫出更有效率的程式.  而有些題目拆成功能函式後, 能做的最佳化反而有限. 以 1021 這題來說, 其實只需一個迴圈就可以解出, 但拆解後, 反而要雙重迴圈才能解. Global optimization 和 Local optimization 的取捨, 政治語言來說, 水很深. 回頭看這些基本題目, 還是有收穫的.  ","version":"Next","tagName":"h2"},{"title":"Unit5：經典題目解解看​","type":1,"pageTitle":"[ALG101] 先別急著寫 Leetcode","url":"/moco/bootcamp/beginner/cs_alg101/#unit5經典題目解解看","content":" 不使用內建函式解題Example: LIOJ 1026：判斷等比數列codeLIOJ 1027：信用卡號驗證codeLIOJ 1028：生命靈數codeLIOJ 1029：加減乘除codeLIOJ 1030：判斷迴文codeLIOJ 1031：完全平方和codeLIOJ 1032：平面距離計算code Tips: 在 JavaScript 中將數字四捨五入到小數點後兩位 | D棧 - Delft StackLIOJ 1033：最近點對code 輸出的時候請先輸出 x 比較小的那個點，若是 x 相同，請先輸出 y 比較小的那個點LIOJ 1034：凱薩加密codeLIOJ 1046：圈圈叉叉code  題型太過簡單直覺, 解題中出現失去耐心及粗心情況. 培養耐心和細心, 是所以花時間作初學者課程訓練的主因, 這點還很需加強.  有趣的是, 實務經驗愈多, 對題目的想法越有所不同. 以 OOXX 來說, 最早會暴力法列出八個判斷式, 後來會想辦法用迴圈解, 現在回頭解, 反而選擇報立法陳列. 貪圖他所節省下來可能積少成多的效能.  ","version":"Next","tagName":"h2"},{"title":"Unit6：內建函式做做看​","type":1,"pageTitle":"[ALG101] 先別急著寫 Leetcode","url":"/moco/bootcamp/beginner/cs_alg101/#unit6內建函式做做看","content":" 試著實作內建函數, 進而了解內建函式Project 6: LIOJ 1036：Array reversecodeLIOJ 1037：Array filtercodeLIOJ 1038：Array indexOfcodeLIOJ 1039：Array fillcodeLIOJ 1040：Array joincodeLIOJ 1041：String trimcodeLIOJ 1042：String toLowerCasecodeLIOJ 1043：String endsWithcodeLIOJ 1044：String padEndcodeLIOJ 1045：String slicecode  這單元所選的內建函數練習題要實作的話都很簡單, 當然實際上這些內建函式功能還比單元練習複雜得多. 而內建函式實作上會有斷地更新, 在實務需求積累的經驗調整改善. 特別對 JavaScript 來說, 內建函式和自己實作, 還會有 Native libary 和 JIT 的效能差異. 了解並有能力自己實作內建函式的功能是一回事, 工作實務應該還是使用內建函式居多.  ","version":"Next","tagName":"h2"},{"title":"Unit7：國中題目大挑戰​","type":1,"pageTitle":"[ALG101] 先別急著寫 Leetcode","url":"/moco/bootcamp/beginner/cs_alg101/#unit7國中題目大挑戰","content":" 解 NPSC 類似的題目, 題型上是這整個課程裡面最有趣的單元. 寫給國中生的NPSC解題思維Example:Project 7: LIOJ1008: 幾個水桶codeLIOJ 1009：Yo！倒著唸！codeLIOJ 1013：搭電梯code Fibonacci numbers: 費波那契數 - 維基百科，自由的百科全書Program for Fibonacci numbers - GeeksforGeeks常見程式演算 :: 費式數列 LIOJ 1014：不九人世codeLIOJ 1016：不合群的人code  要特別題一下搭電梯這題, 後來的習慣是解提前, 會先思考題型的數學解, 再思考演匴法解. 列出數列尋找規格時, 發覺題目其實是費氏數列. 只靠演算法求解的話, 費氏數列用迴圈或遞迴各有時間和空間複雜度上的優勢. 但列規則時, 覺得應該還有 Fn = F(n-1) + F(n-2) 之外的函式可能. 上網查了下, 果然還有其他遞迴函式解法, 可將時間複雜度從 O(n^2) 降到 O(logn), 兼顧時間和空間複雜度. 推演過程日後該找時間深入了解.  最後的解法混用了迴圈窮舉和遞迴. 當 n 數值小的時候, 直接透過窮舉即可. n 較大再透過遞迴增加效率. 小技巧是迴圈窮舉運算得到的數值可以快取, 後面程式呼叫時就不需要重複運算. 一些語言中透過 static 宣告變數, 以保存變數值. JS 函式中變數不支援 static, 但 JS 中函式就是個物件, 可以直接宣告物件成員即可.  其他題目倒是引發沒有太多記憶點, 很入門的練習.  ","version":"Next","tagName":"h2"},{"title":"Unit8：初學者只管拿分，誰管你什麼效率​","type":1,"pageTitle":"[ALG101] 先別急著寫 Leetcode","url":"/moco/bootcamp/beginner/cs_alg101/#unit8初學者只管拿分誰管你什麼效率","content":" 至少題目你要解的出來, 先求有__再求好__學習演算法之後會發現更快的解法Project 8: LIOJ 1049：陣列最短距離codeLIOJ 1050：two sumcodeLIOJ 1051：逆序數對code  實務上, 時間複雜度和空間複雜度之外, 影響效率的還有運算式本身運算速度.O(C1 * N) 和 + O(C2 * logN) 理論上後者複雜度大. 但若 C1 &gt;&gt; C1 &gt;&gt; N 則前者效能會更好. 實務上除了考慮演算法複雜度外, 還需考慮使用情況與和各種邊界條件.  ","version":"Next","tagName":"h2"},{"title":"Unit9：未來的路還很漫長，你還差得遠呢​","type":1,"pageTitle":"[ALG101] 先別急著寫 Leetcode","url":"/moco/bootcamp/beginner/cs_alg101/#unit9未來的路還很漫�長你還差得遠呢","content":" [CS101] 初心者的計概與 coding 火球術 | Lidemy 鋰學院Project 9: LIOJ1003 - 聯誼門票搶起來codeLIOJ1004 - 聯誼順序比大小codeLIOJ1005 - 聯誼話題相親數codeLIOJ1006 - 聯誼坐法排排看codeLIOJ1007 - 聯誼排行大比拼codeLIOJ1018 - 大平台codeLIOJ1019 - 一條路走到黑codeLIOJ1052 - 貪婪的小偷 Part2code Tipds: Dynamic ProgrammingLIOJ1053 - 走迷宮code Tips: Breadth-First Search  多年經驗後回顧基礎課程, 有很多不同想法. 有些題目看似簡單, 深入後其實相當有趣, 偶爾也覺得自己數學理論的不足. 也藉此檢視, 這些基本的題型中, 常見的犯錯不外乎對題目規定了解不足, 邊界條件思考不周, 以及偶爾的 typo 等. 都是些基礎低級錯誤, 該戒慎.  ","version":"Next","tagName":"h2"},{"title":"See Also​","type":1,"pageTitle":"[ALG101] 先別急著寫 Leetcode","url":"/moco/bootcamp/beginner/cs_alg101/#see-also","content":" GitHub - Lidemy/ALG101-too-weak-to-leetcode: The course materials for ALG101: Too weak to leetcode甜不辣馬拉松 – Medium[Lidemy 學習筆記]-先別急著寫 leetcode U7//實作:NPSC題[week 2] 先別急著寫 leetcode - 虛擬碼、Debugger、解題技巧 - HackMD ","version":"Next","tagName":"h2"},{"title":"[IEEE] TinyLFU: A Highly Efficient Cache Admission Policy","type":0,"sectionRef":"#","url":"/moco/bootcamp/os_tilylfu/","content":"","keywords":"","version":"Next"},{"title":"Cache Replacement​","type":1,"pageTitle":"[IEEE] TinyLFU: A Highly Efficient Cache Admission Policy","url":"/moco/bootcamp/os_tilylfu/#cache-replacement","content":" ","version":"Next","tagName":"h2"},{"title":"See Also​","type":1,"pageTitle":"[IEEE] TinyLFU: A Highly Efficient Cache Admission Policy","url":"/moco/bootcamp/os_tilylfu/#see-also","content":" ","version":"Next","tagName":"h2"},{"title":"TinyLFU​","type":1,"pageTitle":"[IEEE] TinyLFU: A Highly Efficient Cache Admission Policy","url":"/moco/bootcamp/os_tilylfu/#tinylfu","content":" TinyLFU: A Highly Efficient Cache Admission Policy | IEEE Conference Publication | IEEE Xplore[1512.00727] TinyLFU: A Highly Efficient Cache Admission Policy[論文解讀][TinyLFU] A Highly Efficient Cache Admission Policy论文《TinyLFU: A Highly E cient Cache Admission Policy》阅读笔记 - SegmentFault 思否TinyLFU -- A Highly Efficient Cache Admission Policy · Columba M71's Blog  ","version":"Next","tagName":"h3"},{"title":"Redis​","type":1,"pageTitle":"[IEEE] TinyLFU: A Highly Efficient Cache Admission Policy","url":"/moco/bootcamp/os_tilylfu/#redis","content":" 阅读 redis 源码，学习缓存淘汰算法 W-TinyLFU | 董泽润的技术笔记[93面試常問：Redis 記憶體滿了怎麼辦？ | IT人][Redis 系列]redis 学习十三，Redis 常问简单面试题 | Go 技术论坛 ","version":"Next","tagName":"h3"},{"title":"[DS] Binary Search Tree","type":0,"sectionRef":"#","url":"/moco/bootcamp/algorithm/bst/","content":"","keywords":"","version":"Next"},{"title":"Data Struct​","type":1,"pageTitle":"[DS] Binary Search Tree","url":"/moco/bootcamp/algorithm/bst/#data-struct","content":" 一般用資料結構來表示二元樹節點有兩種方式:  ","version":"Next","tagName":"h2"},{"title":"w/ parent​","type":1,"pageTitle":"[DS] Binary Search Tree","url":"/moco/bootcamp/algorithm/bst/#w-parent","content":" struct node { int value; node *parent; node *l_child; node *r_child; }   ","version":"Next","tagName":"h3"},{"title":"w/o parent​","type":1,"pageTitle":"[DS] Binary Search Tree","url":"/moco/bootcamp/algorithm/bst/#wo-parent","content":" struct node { int value; node *l_child; node *r_child; }   兩者的差別至在於節點定義中是否包含指向父節點的屬性, 節點間的連結是單向還是雙向關係.  包含父節點的資料結構雙向連結的屬性, 從二元樹中任一節點巡訪, 皆可完整還原完整二元樹的資料. 若有需要, 可以從任何一個節點開始尋訪, 無須每一次都必須從 Root 開始巡訪. 但當修改二元樹中的資料時, 需要注意維護節點中的連結關係, 尤其是父節點的連結.  而不包含父節點的結構中, API 呼叫基本上都必須從 Root 開始巡訪. 但相對修改資料時, 只需要處理子節點的單向連結關係, 程式結構都比較簡單.  兩者各有優缺點, 依實務需求決定. 本篇選用不包括父連結的結構.   type IBSTNode interface { search(int) bool insert(int) remove(int) IBSTNode findMin() int findMax() int findPredecessor(int) int findSuccessor(int) int inorder(*[]int) } type BST struct { root IBSTNode } type BSTNode struct { value int left *BSTNode right *BSTNode } class BST { constructor(data) { this.root = null if (typeof(data) === 'number') { this.root = new BSTNode(data) } else if (Array.isArray(data)) { this.root = new BSTNode(data[0]) for (let i = 1; i &lt; data.length; i++) this.insert(data[i]) } } } class BSTNode { constructor(data) { this.value = data this.left = null this.right = null } } export class BST { root: BSTNode | null constructor(data: number | Array&lt;number&gt; | null) { this.root = null if (typeof(data) === 'number') { this.root = new BSTNode(data) } else if (Array.isArray(data)) { this.root = new BSTNode(data[0]) for (let i = 1; i &lt; data.length; i++) this.insert(data[i]) } } } type IBSTNode = BSTNode | null export class BSTNode { value: number left: IBSTNode right: IBSTNode constructor(data: number) { this.value = data this.left = null this.right = null } } class BST: def __init__(self, data): self._root = None if isinstance(data, int): self._root = BSTNode(data) elif isinstance(data, list): self._root = BSTNode(data[0]) for i in range(1, len(data), 1): self.insert(data[i]) class BSTNode: def __init__(self, data): self.value = data self.left = None self.right = None   ","version":"Next","tagName":"h3"},{"title":"ADT Basic Operate​","type":1,"pageTitle":"[DS] Binary Search Tree","url":"/moco/bootcamp/algorithm/bst/#adt-basic-operate","content":" BST (and especially balanced BST like AVL Tree) is an efficient data structure to implement a certain kind of Table (or Map) Abstract Data Type (ADT).  A Table ADT must support at least the following three operations as efficient as possible:  Search(v) — determine if v exists in the ADT or not,Insert(v) — insert v into the ADT,Remove(v) — remove v from the ADT.  ","version":"Next","tagName":"h2"},{"title":"Search(v)​","type":1,"pageTitle":"[DS] Binary Search Tree","url":"/moco/bootcamp/algorithm/bst/#searchv","content":"  func (n *BSTNode) search(val int) bool { if n == nil { return false } if n.value &gt; val { return n.left.search(val) } else if n.value &lt; val { return n.right.search(val) } else { return true } } // class BSTNode search(val) { if (this.value === val) return true if (this.value &gt; val) return this.left === null ? false : this.left.search(val) else return this.right === null ? false : this.right.search(val) } // class BSTNode public search(val: number): boolean { if (this.value === val) return true if (this.value &gt; val) return this.left === null ? false : this.left.search(val) else return this.right === null ? false : this.right.search(val) } # class BSTNode def search(self, val): if self.value == val: return True if val &lt; self.value: return False if self.left == None else self.left.search(val) else: return False if self.right == None else self.right.search(val)   ","version":"Next","tagName":"h3"},{"title":"Insert(v)​","type":1,"pageTitle":"[DS] Binary Search Tree","url":"/moco/bootcamp/algorithm/bst/#insertv","content":"  func (bst *BST) Insert(val int) { if bst.root == nil { return } bst.root = bst.root.insert(val) } func (n *BSTNode) insert(val int) IBSTNode { return n.insertHelper(val) } func (n *BSTNode) insertHelper(val int) *BSTNode { if n == nil { return newBSTNode(val) } if val &lt; n.value { n.left = n.left.insertHelper(val) } else { n.right = n.right.insertHelper(val) } return n } // class BST insert(val) { if (this.root === null) return this.root = this.root.insert(val) } // class BSTNode insert(val) { return BSTNode._insertHelper(val, this) } static _insertHelper(val, node) { if (node === null) return new BSTNode(val) if (val &lt; node.value) node.left = BSTNode._insertHelper(val, node.left) else node.right = BSTNode._insertHelper(val, node.right) return node } // class BST insert(val: number) { if (this.root === null) return this.root = this.root.insert(val) } // class BSTNode public insert(val: number): IBSTNode { return BSTNode.insertHelper(val, this) } static insertHelper(val: number, node: IBSTNode): IBSTNode { if (node === null) return new BSTNode(val) if (val &lt; node.value) node.left = BSTNode.insertHelper(val, node.left) else node.right = BSTNode.insertHelper(val, node.right) return node } # class BST def insert(self, val): if self._root is None: self._root = BSTNode(val) self._root = self._root.insert(val) # class BSTNode def insert(self, val): return BSTNode.insert_helper(val, self) @classmethod def insert_helper(cls, val, node): if node == None: return BSTNode(val) if val &lt; node.value: node.left = BSTNode.insert_helper(val, node.left) else: node.right = BSTNode.insert_helper(val, node.right) return node   ","version":"Next","tagName":"h3"},{"title":"Remove(v)​","type":1,"pageTitle":"[DS] Binary Search Tree","url":"/moco/bootcamp/algorithm/bst/#removev","content":"  func (bst *BST) Remove(val int) { if bst.root == nil { return } bst.root = bst.root.remove(val) } func (n *BSTNode) remove(val int) IBSTNode { return n.removeHelper(val) } func (n *BSTNode) removeHelper(val int) *BSTNode { if n == nil { return nil } if n.value &gt; val { n.left = n.left.removeHelper(val) } else if n.value &lt; val { n.right = n.right.removeHelper(val) } else { if n.left != nil &amp;&amp; n.right != nil { successor := n.right.findMin() n.value = successor n.right = n.right.removeHelper(successor) } else if n.left != nil { n = n.left } else if n.right != nil { n = n.right } else { return nil } } return n } // class BST remove(val) { if (this.root === null) return this.root = this.root.remove(val) } // class BSTNode remove(val) { return BSTNode._removeHelper(val, this) } static _removeHelper(val, node) { if (node === null) return null if (val &lt; node.value) { node.left = BSTNode._removeHelper(val, node.left) } else if (node.value &lt; val) { node.right = BSTNode._removeHelper(val, node.right) } else { if ((node.left === null) &amp;&amp; (node.right === null)) return null else if (node.left === null) result = node.right else if (node.right === null) result = node.left else { let successor = node.right.findMin() node.value = successor node.right = BSTNode._removeHelper(successor, node.right) } } return node } // class BST remove(val: number) { if (this.root === null) return this.root = this.root.remove(val) } // class BSTNode public remove(val: number): IBSTNode { return BSTNode.removeHelper(val, this) } static removeHelper(val: number, node: IBSTNode): IBSTNode { if (node === null) return null if (val &lt; node.value) { node.left = BSTNode.removeHelper(val, node.left) } else if (node.value &lt; val) { node.right = BSTNode.removeHelper(val, node.right) } else { if ((node.left === null) &amp;&amp; (node.right === null)) return null else if (node.left === null) node = node.right else if (node.right === null) node = node.left else { let successor = node.right.findMin() node.value = successor node.right = BSTNode.removeHelper(successor, node.right) } } return node } # class BST def remove(self, val): if self._root is None: return self._root = self._root.remove(val) # class BSTNode def remove(self, val): return BSTNode.remove_helper(val, self) @classmethod def remove_helper(cls, val, node): if node == None: return None if val &lt; node.value: node.left = BSTNode.remove_helper(val, node.left) elif node.value &lt; val: node.right = BSTNode.remove_helper(val, node.right) else: if node.left == None and node.right == None: return None elif node.left == None: node = node.right elif node.right == None: node = node.left else: successor = node.right.find_min() node.value = successor node.right = BSTNode.remove_helper(successor, node.right) return node   ","version":"Next","tagName":"h3"},{"title":"Find & Travsal​","type":1,"pageTitle":"[DS] Binary Search Tree","url":"/moco/bootcamp/algorithm/bst/#find--travsal","content":" ","version":"Next","tagName":"h2"},{"title":"Min / Max​","type":1,"pageTitle":"[DS] Binary Search Tree","url":"/moco/bootcamp/algorithm/bst/#min--max","content":"  func (n *BSTNode) findMin() int { if n.left == nil { return n.value } else { return n.left.findMin() } } func (n *BSTNode) findMax() int { if n.right == nil { return n.value } else { return n.right.findMax() } } findMin() { return this.left === null ? this.value : this.left.findMin() } findMax() { return this.right === null ? this.value : this.right.findMax() } public findMin(): number { return this.left === null ? this.value : this.left.findMin() } public findMax(): number { return this.right === null ? this.value : this.right.findMax() } def find_min(self): return self.value if self.left == None else self.left.find_min() def find_max(self): return self.value if self.right == None else self.right.find_max()-   ","version":"Next","tagName":"h3"},{"title":"Predecessor​","type":1,"pageTitle":"[DS] Binary Search Tree","url":"/moco/bootcamp/algorithm/bst/#predecessor","content":"  func (n *BSTNode) findPredecessor(val int) int { predecessor := NOTFOUND node := n for node != nil &amp;&amp; node.value != val { if node.value &lt; val { predecessor = node.value node = node.right } else { node = node.left } } if node == nil { return NOTFOUND } if node.left != nil { return node.left.findMax() } else { return predecessor } } findPredecessor(val) { let predecessor = NOT_FOUND let node = this while ((node !== null) &amp;&amp; (node.value !== val)) { if (node.value &lt; val) { predecessor = node.value node = node.right } else node = node.left } if (node === null) return NOT_FOUND if (node.left !== null) return node.left.findMax() else return predecessor } public findPredecessor(val: number): number{ return BSTNode.findPredecessor(val, this) } static findPredecessor(val: number, currentNode: IBSTNode): number { let predecessor = NOT_FOUND let node = currentNode while ((node !== null) &amp;&amp; (node.value !== val)) { if (node.value &lt; val) { predecessor = node.value node = node.right } else { node = node.left } } if (node === null) return NOT_FOUND if (node.left !== null) return node.left.findMax() else return predecessor } def find_predecessor(self, val): predecessor = NOT_FOUND node = self while node != None and node.value != val: if node.value &lt; val: predecessor = node.value node = node.right else: node = node.left if node == None: return NOT_FOUND if node.left != None: return node.left.find_max() else: return predecessor   ","version":"Next","tagName":"h3"},{"title":"Successor​","type":1,"pageTitle":"[DS] Binary Search Tree","url":"/moco/bootcamp/algorithm/bst/#successor","content":"  func (n *BSTNode) findSuccessor(val int) int { successor := NOTFOUND node := n for node != nil &amp;&amp; node.value != val { if node.value &gt; val { successor = node.value node = node.left } else { node = node.right } } if node == nil { return NOTFOUND } if node.right != nil { return node.right.findMin() } else { return successor } } findSuccessor(val) { let successor = NOT_FOUND let node = this while ((node !== null) &amp;&amp; (node.value !== val)) { if (node.value &gt; val) { successor = node.value node = node.left } else node = node.right } if (node === null) return NOT_FOUND if (node.right !== null) return node.right.findMin() else return successor } public findSuccessor(val: number): number{ return BSTNode.findSuccessor(val, this) } static findSuccessor(val: number, currentNode: IBSTNode): number { let successor = NOT_FOUND let node = currentNode while ((node !== null) &amp;&amp; (node.value !== val)) { if (node.value &gt; val) { successor = node.value node = node.left } else { node = node.right } } if (node === null) return NOT_FOUND if (node.right !== null) return node.right.findMin() else return successor } def find_successor(self, val): successor = NOT_FOUND node = self while node != None and node.value != val: if val &lt; node.value: successor = node.value node = node.left else: node = node.right if node == None: return NOT_FOUND if node.right != None: return node.right.find_min() else: return successor   ","version":"Next","tagName":"h3"},{"title":"Traversal​","type":1,"pageTitle":"[DS] Binary Search Tree","url":"/moco/bootcamp/algorithm/bst/#traversal","content":" ","version":"Next","tagName":"h2"},{"title":"Deep First Traversal​","type":1,"pageTitle":"[DS] Binary Search Tree","url":"/moco/bootcamp/algorithm/bst/#deep-first-traversal","content":" ... TBD...  ","version":"Next","tagName":"h3"},{"title":"Inorder​","type":1,"pageTitle":"[DS] Binary Search Tree","url":"/moco/bootcamp/algorithm/bst/#inorder","content":" An Inorder Traversal of this BST to obtain a list of sorted integers inside this BST.  Inorder Traversal is a recursive method whereby we visit the left subtree first, exhausts all items in the left subtree, visit the current root, before exploring the right subtree and all items in the right subtree.   func (bst *BST) Inorder() []int { if bst.root == nil { return nil } result := make([]int, 0) bst.root.inorder(&amp;result) return result } func (n *BSTNode) inorder(buf *[]int) { if n == nil { return } n.left.inorder(buf) *buf = append(*buf, n.value) n.right.inorder(buf) } inorder() { let result = [] if (this.left !== null) result = result.concat(this.left.inorder()) result.push(this.value) if (this.right !== null) result = result.concat(this.right.inorder()) return result } public inorder(): Array&lt;number&gt; { let result: Array&lt;number&gt; = new Array() if (this.left !== null) result = result.concat(this.left.inorder()) result.push(this.value) if (this.right !== null) result = result.concat(this.right.inorder()) return result } def inorder(self): result = [] if self.left != None: result.extend(self.left.inorder()) result.append(self.value) if self.right != None: result.extend(self.right.inorder()) return result   ","version":"Next","tagName":"h3"},{"title":"小結​","type":1,"pageTitle":"[DS] Binary Search Tree","url":"/moco/bootcamp/algorithm/bst/#小結","content":" 和 Binary Heap 相比, BST 中程式遞迴可能會修改到物件本身. 呼叫和回傳的物件處理上需要比較注意.  ","version":"Next","tagName":"h2"},{"title":"See Also​","type":1,"pageTitle":"[DS] Binary Search Tree","url":"/moco/bootcamp/algorithm/bst/#see-also","content":" Binary Search Tree, AVL Tree - VisuAlgoBinary Search Trees in Go. Introduction | by Puneeth S | Level Up Coding用 JavaScript 實作二元搜尋樹（Binary Search Tree） | Arsene's Alibi ","version":"Next","tagName":"h2"},{"title":"[ALGO] Sorting","type":0,"sectionRef":"#","url":"/moco/bootcamp/algorithm/sorting/","content":"","keywords":"","version":"Next"},{"title":"Bubble​","type":1,"pageTitle":"[ALGO] Sorting","url":"/moco/bootcamp/algorithm/sorting/#bubble","content":" Compare a pair of adjacent items (a, b),Swap that pair if the items are out of order (in this case, when a &gt; b),Repeat Step 1 and 2 until we reach the end of array (the last pair is the (N-2)-th and (N-1)-th items as we use 0-based indexing),By now, the largest item will be at the last position. We then reduce N by 1 and repeat Step 1 until we have N = 1.  __time complex: O(N^2) __   func Bubble(nums []int) []int { len := len(nums) for i := 0; i &lt; len-1; i++ { for j := 0; j &lt; len-1-i; j++ { if nums[j] &gt; nums[j+1] { nums[j], nums[j+1] = nums[j+1], nums[j] } } } return nums } module.exports = function (nums) { for (let i = 0; i &lt; nums.length - 1; i++) { for (let j = 1; j &lt; nums.length - i; j++) { if (nums[j - 1] &gt; nums[j]) { let tmp = nums[j - 1] nums[j - 1] = nums[j] nums[j] = tmp } } } return nums } export function Bubble (nums: Array&lt;number&gt;): Array&lt;number&gt; { for (let i = nums.length; i &gt; 0; i--) { for (let j = 1; j &lt; i; j++) { if (nums[j - 1] &gt; nums[j]) { let tmp = nums[j - 1] nums[j - 1] = nums[j] nums[j] = tmp } } } return nums } def sort(nums): for i in range(len(nums)): for j in range(0, len(nums) - i - 1): if nums[j] &gt; nums[j + 1]: tmp = nums[j] nums[j] = nums[j + 1] nums[j + 1] = tmp return nums   ","version":"Next","tagName":"h2"},{"title":"Selection​","type":1,"pageTitle":"[ALGO] Sorting","url":"/moco/bootcamp/algorithm/sorting/#selection","content":" Given an array of N items and L = 0, Selection Sort will:  Find the position X of the smallest item in the range of [L...N−1],Swap X-th item with the L-th item,Increase the lower-bound L by 1 and repeat Step 1 until L = N-2.   func Selection(nums []int) []int { len := len(nums) for i := len-1; i &gt; 0; i-- { max := nums[0] minIdx := 0 for j := 0; j &lt; i; j++ { if nums[j] &gt; max { max = nums[j] minIdx = j } } nums[i], nums[maxIdx] = nums[maxIdx], nums[i] } return nums } module.exports = function (nums) { for (let i = nums.length - 1; i &gt; 0; i--) { let max = nums[0] let idx = 0 for (let j = 0; j &lt;= i; j++) { if (nums[j] &gt; max) { max = nums[j] idx = j } } nums[idx] = nums[i] nums[i] = max } return nums } export function Selection (nums: Array&lt;number&gt;): Array&lt;number&gt; { for (let i = nums.length - 1; i &gt;= 0; i--) { let max = nums[0] let idx = 0 for (let j = 0; j &lt;= i; j++) { if (nums[j] &gt; max) { max = nums[j] idx = j } } nums[idx] = nums[i] nums[i] = max } return nums } def sort(nums): for i in range (len(nums) - 1, 0, -1): maxValue = nums[0] idx = 0 for j in range(0, i + 1): if nums[j] &gt; maxValue: maxValue = nums[j] idx = j nums[idx] = nums[i] nums[i] = maxValue return nums   ","version":"Next","tagName":"h2"},{"title":"Insertion​","type":1,"pageTitle":"[ALGO] Sorting","url":"/moco/bootcamp/algorithm/sorting/#insertion","content":" Start with one card in your hand,Pick the next card and insert it into its proper sorted order,Repeat previous step for all cards.   func Insertion(nums []int) []int { len := len(nums) for i := 1; i &lt; len; i++ { for j := i; j &gt; 0; j-- { if nums[j-1] &gt; nums[j] { nums[j-1], nums[j] = nums[j], nums[j-1] } else { continue } } } return nums } module.exports = function (nums) { for (let i = 1; i &lt; nums.length; i++) { for (let j = i; j &gt;= 0; j--) { if (nums[j] &lt; nums[j - 1]) { let tmp = nums[j] nums[j] = nums[j - 1] nums[j - 1] = tmp } } } return nums } export function Insertion (nums: Array&lt;number&gt;): Array&lt;number&gt; { for (let i = 1; i &lt; nums.length; i++) { for (let j = i; j &gt; 0; j--) { if (nums[j - 1] &gt; nums[j]) { let tmp = nums[j] nums[j] = nums[j - 1] nums[j - 1] = tmp } } } return nums } def sort(nums): for i in range(1, len(nums)): for j in range(i, 0, -1): if nums[j - 1] &gt; nums[j]: tmp = nums[j - 1] nums[j - 1] = nums[j] nums[j] = tmp return nums   ","version":"Next","tagName":"h2"},{"title":"Merge​","type":1,"pageTitle":"[ALGO] Sorting","url":"/moco/bootcamp/algorithm/sorting/#merge","content":" Merge each pair of individual element (which is by default, sorted) into sorted arrays of 2 elements,Merge each pair of sorted arrays of 2 elements into sorted arrays of 4 elements, Repeat the process...,Final step: Merge 2 sorted arrays of N/2 elements (for simplicity of this discussion, we assume that N is even) to obtain a fully sorted array of N elements.   func Merge(nums []int) []int { length := len(nums) if length &lt;= 1 { return nums } middle := int(length / 2) return merge(Merge(nums[:middle]), Merge(nums[middle:])) } func merge(left, right []int) []int { result := make([]int, len(left)+len(right)) i := 0 for len(left) &gt; 0 &amp;&amp; len(right) &gt; 0 { if left[0] &lt; right[0] { result[i] = left[0] left = left[1:] } else { result[i] = right[0] right = right[1:] } i++ } for j := 0; j &lt; len(left); j++ { result[i] = left[j] i++ } for j := 0; j &lt; len(right); j++ { result[i] = right[j] i++ } return result } module.exports = function (nums) { return sort(nums) } function sort (nums) { if (nums.length &lt;= 1) { return nums } let middle = Math.floor(nums.length / 2) return merge(sort(nums.slice(0, middle)), sort(nums.slice(middle, nums.length))) } function merge (left, right) { let result = [] while ((left.length !== 0) &amp;&amp; (right.length !== 0)) { if (left[0] &lt; right[0]) { result.push(left[0]) left = left.slice(1) } else { result.push(right[0]) right = right.slice(1) } } result = result.concat(left) result = result.concat(right) return result } export function Merge (nums: Array&lt;number&gt;): Array&lt;number&gt; { return sort(nums) } function sort (nums: Array&lt;number&gt;): Array&lt;number&gt; { if (nums.length &lt;= 1) return nums let middle = Math.floor(nums.length / 2) return merge(sort(nums.slice(0, middle)), sort(nums.slice(middle, nums.length))) } function merge (left: Array&lt;number&gt;, right: Array&lt;number&gt;): Array&lt;number&gt; { let result: Array&lt;number&gt; = [] while ((left.length &gt; 0) &amp;&amp; (right.length &gt; 0)) { if (left[0] &lt; right[0]) { result.push(left[0]) left = left.slice(1) } else { result.push(right[0]) right = right.slice(1) } } result = result.concat(left) result = result.concat(right) return result } def sort(nums): if len(nums) &lt;= 1: return nums middle = len(nums) // 2 left = nums[:middle] right = nums[middle:] return merge(sort(left), sort(right)) def merge(left, right): l = 0 r = 0 result = [] while l &lt; len(left) and r &lt; len(right): if left[l] &lt; right[r]: result.append(left[l]) l += 1 else: result.append(right[r]) r += 1 while l &lt; len(left): result.append(left[l]) l += 1 while r &lt; len(right): result.append(right[r]) r += 1 return result   ","version":"Next","tagName":"h2"},{"title":"Quick (Random Quick Sort)​","type":1,"pageTitle":"[ALGO] Sorting","url":"/moco/bootcamp/algorithm/sorting/#quick-random-quick-sort","content":" Divide step Choose an item p (known as the pivot) Then partition the items of a[i..j] into three parts: a[i..m-1], a[m], and a[m+1..j]. a[i..m-1] (possibly empty) contains items that are smaller than (or equal to) p. a[m] = p, i.e., index m is the correct position for p in the sorted order of array a. a[m+1..j] (possibly empty) contains items that are greater than (or equal to) p. Then, recursively sort the two parts.Conquer step Don't be surprised... We do nothing :O!Random Quick Sort Same as Quick Sort except just before executing the partition algorithm, it randomly select the pivot between a[i..j] instead of always choosing a[i] (or any other fixed index between [i..j]) deterministically.   func Quick(nums []int) []int { quick(&amp;nums, 0, len(nums)-1) return nums } func quick(nums *[]int, pivotIdx, endIdx int) { storeIdx := pivotIdx + 1 for i := pivotIdx + 1; i &lt;= endIdx; i++ { if (*nums)[i] &lt; (*nums)[pivotIdx] { (*nums)[i], (*nums)[storeIdx] = (*nums)[storeIdx], (*nums)[i] storeIdx++ } } (*nums)[pivotIdx], (*nums)[storeIdx-1] = (*nums)[storeIdx-1], (*nums)[pivotIdx] if pivotIdx &lt; storeIdx-2 { quick(nums, pivotIdx, storeIdx-2) } if storeIdx &lt; endIdx { quick(nums, storeIdx, endIdx) } } module.exports = function (nums) { return sort(nums, 0, nums.length - 1) } function sort (nums, pivotIdx, endIdx) { swap(nums, 0, Math.floor(Math.random() * (endIdx - pivotIdx + 1))) let idx = pivotIdx + 1 for (let i = pivotIdx + 1; i &lt;= endIdx; i++) { if (nums[i] &lt; nums[pivotIdx]) { swap(nums, i, idx) idx++ } } swap(nums, pivotIdx, idx - 1) if (pivotIdx &lt; idx - 2) { sort(nums, pivotIdx, idx - 2) } if (idx &lt; endIdx) { sort(nums, idx, endIdx) } return nums } function swap (nums, i, j) { let tmp = nums[i] nums[i] = nums[j] nums[j] = tmp } export function Quick (nums: Array&lt;number&gt;): Array&lt;number&gt; { return sort(nums, 0, nums.length - 1) } function sort(nums: Array&lt;number&gt;, pivotIdx: number, endIdx: number): Array&lt;number&gt; { let storeIdx = pivotIdx + 1 for (let i = storeIdx; i &lt;= endIdx; i++) { if (nums[i] &lt; nums[pivotIdx]) { swap(nums, i, storeIdx) storeIdx++ } } swap(nums, pivotIdx, storeIdx - 1) if (pivotIdx &lt; storeIdx - 2) sort(nums, pivotIdx, storeIdx -2) if (storeIdx &lt; endIdx) sort(nums, storeIdx, endIdx) return nums } function swap (nums: Array&lt;number&gt;, i: number, j: number) { let tmp = nums[i] nums[i] = nums[j] nums[j] = tmp } def sort(nums): return quickSort(nums, 0, len(nums) - 1) def quickSort(nums, pivot, end): store = pivot + 1 for i in range (store, end + 1): if nums[pivot] &gt; nums[i]: swap(nums, i, store) store += 1 swap(nums, pivot, store - 1) if pivot &lt; store - 2: quickSort(nums, pivot, store - 2) if store &lt; end: quickSort(nums, store, end) return nums def swap(nums, i, j): tmp = nums[i] nums[i] = nums[j] nums[j] = tmp   ","version":"Next","tagName":"h2"},{"title":"Counting​","type":1,"pageTitle":"[ALGO] Sorting","url":"/moco/bootcamp/algorithm/sorting/#counting","content":" Assumption: If the items to be sorted are Integers with small range, we can count the frequency of occurrence of each Integer (in that small range) and then loop through that small range to output the items in sorted order.   func Counting(nums []int) []int { length := len(nums) max := 0 for i := 0; i &lt; length; i++ { if nums[i] &gt; max { max = nums[i] } } count := make([]int, max+1) for i := 0; i &lt; length; i++ { count[nums[i]]++ } idx := 0 for i := 0; i &lt; max+1; i++ { for j := 0; j &lt; count[i]; j++ { nums[idx] = i idx++ } } return nums } module.exports = function (nums) { let max = 0 for (let i = 0; i &lt; nums.length; i++) { if (nums[i] &gt; max) max = nums[i] } let count = new Array(max + 1).fill(0) for (let i = 0; i &lt; nums.length; i++) { count[nums[i]]++ } let result = [] for (let i = 0; i &lt;= max; i++) { for (let j = 0; j &lt; count[i]; j++) { result.push(i) } } return result } export function Counting (nums: Array&lt;number&gt;): Array&lt;number&gt; { let max = 0 for (let i = 0; i &lt; nums.length; i++) { if (nums[i] &gt; max) max = nums[i] } let counting: Array&lt;number&gt; = new Array(max + 1).fill(0) for (let i = 0; i &lt; nums.length; i++) { counting[nums[i]]++ } let result: Array&lt;number&gt; = [] for (let i = 0; i &lt; counting.length; i++) { for (let j = 0; j &lt; counting[i]; j++) { result.push(i) } } return result }  ","version":"Next","tagName":"h2"},{"title":"Awesome DevSecOps Resources","type":0,"sectionRef":"#","url":"/moco/devsecops/awesome/","content":"Awesome DevSecOps Resources","keywords":"","version":"Next"},{"title":"Awesome CI/CD Resources","type":0,"sectionRef":"#","url":"/moco/devsecops/cicd/awesome/","content":"Awesome CI/CD Resources","keywords":"","version":"Next"},{"title":"Awesome Docker Resources","type":0,"sectionRef":"#","url":"/moco/devsecops/docker/awesome/","content":"Awesome Docker Resources Docker — 从入门到实践 | Docker 从入门到实践 前言 - Docker — 从入门到实践","keywords":"","version":"Next"},{"title":"compose_networking","type":0,"sectionRef":"#","url":"/moco/devsecops/docker/compose/compose_networking/","content":"compose_networking","keywords":"","version":"Next"},{"title":"[CI/CD] Merge & tag when released","type":0,"sectionRef":"#","url":"/moco/devsecops/cicd/cicd-case_merge-and-tag/","content":"[CI/CD] Merge &amp; tag when released #!/bin/bash which jq if [ $? -ne 0 ] then echo &quot;jq not found&quot; &gt;&amp;2 exit $? fi ## create MR to master NEW_MR_DATA='{ &quot;source_branch&quot;: &quot;release/'$RELEASE_VERSION'&quot;, &quot;target_branch&quot;: &quot;main&quot;, &quot;title&quot;: &quot;PROD Released&quot; }' curl -k --request POST \\ --header &quot;PRIVATE-TOKEN: ${CI_TOKEN}&quot; \\ --header &quot;Content-Type: application/json&quot; \\ --data &quot;$NEW_MR_DATA&quot; \\ &quot;${CI_GITLAB}/api/v4/projects/${CI_PROJECT_ID}/merge_requests&quot; \\ -o mr.json mr_iid=`jq '.[&quot;iid&quot;]' mr.json` if [[ &quot;$mr_iid&quot; = &quot;null&quot; ]] then echo &quot;create Merge Request fail: `jq '.[&quot;message&quot;]' mr.json`&quot; exit -1 fi ## checking merge status echo &quot;sleep 60sec for GitLab checking merge request...&quot; sleep 60 curl -k --request GET \\ --header &quot;PRIVATE-TOKEN: ${CI_TOKEN}&quot; \\ &quot;${CI_GITLAB}/api/v4/projects/${CI_PROJECT_ID}/merge_requests/${mr_iid}&quot; \\ -o mr.json mr_status=`jq '.[&quot;merge_status&quot;]' mr.json` echo $mr_status if [[ &quot;$mr_status&quot; != '&quot;can_be_merged&quot;' ]] then echo &quot;check merge_status fail: ${mr_status}&quot; exit -1 fi ## approval MR for master MERGE_DATA='{ &quot;merge_when_pipeline_succeeds&quot;: false, &quot;should_remove_source_branch&quot;: true }' curl -k --request PUT \\ --header &quot;PRIVATE-TOKEN: ${CI_TOKEN}&quot; \\ &quot;${CI_GITLAB}/api/v4/projects/${CI_PROJECT_ID}/merge_requests/${mr_iid}/merge&quot; \\ -o mr_iid.json merge_commit_sha=`jq '.[&quot;merge_commit_sha&quot;]' mr_iid.json` if [[ &quot;$merge_commit_sha&quot; = &quot;null&quot; ]] then echo &quot;merge to main/master fail: `jq '.[&quot;message&quot;]' mr_iid.json`&quot; CLOSE_MR_DATA='{ &quot;state_event&quot;: &quot;close&quot; }' curl -k --request PUT \\ --header &quot;PRIVATE-TOKEN: ${CI_TOKEN}&quot; \\ --header &quot;Content-Type: application/json&quot; \\ --data &quot;$CLOSE_MR_DATA&quot; \\ &quot;${CI_GITLAB}/api/v4/projects/${CI_PROJECT_ID}/merge_requests/${mr_iid}&quot; exit -1 fi ## tag version curl -k --request POST \\ --header &quot;PRIVATE-TOKEN: ${CI_TOKEN}&quot; \\ &quot;${CI_GITLAB}/api/v4/projects/${CI_PROJECT_ID}/repository/tags?tag_name=${RELEASE_VERSION}&amp;ref=main&quot; \\ -o tag.json tag_name=`jq '.[&quot;name&quot;]' tag.json` if [[ &quot;$merge_commit_sha&quot; = &quot;null&quot; ]] then echo &quot;tag ${RELEASE_VERSION} fail: `jq '.[&quot;message&quot;]' tag.json`&quot; exit -1 fi ## create MR from master to develop DEV_MR_DATA='{ &quot;source_branch&quot;: &quot;main&quot;, &quot;target_branch&quot;: &quot;develop&quot;, &quot;title&quot;: &quot;PROD Released&quot; }' curl -k --request POST \\ --header &quot;PRIVATE-TOKEN: ${CI_TOKEN}&quot; \\ --header &quot;Content-Type: application/json&quot; \\ --data &quot;$DEV_MR_DATA&quot; \\ &quot;${CI_GITLAB}/api/v4/projects/${CI_PROJECT_ID}/merge_requests&quot; ","keywords":"","version":"Next"},{"title":"Images","type":0,"sectionRef":"#","url":"/moco/devsecops/docker/docker_image/","content":"Images docker load | Docker Documentation","keywords":"","version":"Next"},{"title":"[Docker] Use docker cli w/o Docker Desktop on macOS","type":0,"sectionRef":"#","url":"/moco/devsecops/docker/docker-cli_macos/","content":"","keywords":"","version":"Next"},{"title":"Install docker​","type":1,"pageTitle":"[Docker] Use docker cli w/o Docker Desktop on macOS","url":"/moco/devsecops/docker/docker-cli_macos/#install-docker","content":" macOS 上可以直接用 homebrew 來安裝 docker.  除了 docker 外, 還需要安裝 docker-credential-helper, credential helper 可以用 macOS Keychain 來儲存遠端 repo credential,  brew install docker docker-credential-helper   上面指令安裝了 docker cli 命令程式, 安裝完成後可以看到有 docker 指令不會 command not found, 但 docker ps 仍找不到相關 daemon.      ","version":"Next","tagName":"h2"},{"title":"Install colima​","type":1,"pageTitle":"[Docker] Use docker cli w/o Docker Desktop on macOS","url":"/moco/devsecops/docker/docker-cli_macos/#install-colima","content":" 真正重要的是提供 contrainer runtime 的服務, macOS 上可選用目前開源且免費的 Colima  brew install colima     從套件相依性可以看到 colima 是以 qemu 核心建構的虛擬框架, 集成許多 open source 專案提供的 container runtime service.  ","version":"Next","tagName":"h2"},{"title":"Using colima​","type":1,"pageTitle":"[Docker] Use docker cli w/o Docker Desktop on macOS","url":"/moco/devsecops/docker/docker-cli_macos/#using-colima","content":" 安裝完成後把服務啟動  colima start   第一次啟動時需要下載 qemu 影像檔, 靜待下載安裝即可.      服務正常啟動的狀態    ","version":"Next","tagName":"h3"},{"title":"colima services​","type":1,"pageTitle":"[Docker] Use docker cli w/o Docker Desktop on macOS","url":"/moco/devsecops/docker/docker-cli_macos/#colima-services","content":" 若想讓 colima 服務常駐, 重新開機後能自動啟動, 可利用 brew services  brew services start colima   ","version":"Next","tagName":"h3"},{"title":"See Also​","type":1,"pageTitle":"[Docker] Use docker cli w/o Docker Desktop on macOS","url":"/moco/devsecops/docker/docker-cli_macos/#see-also","content":" ","version":"Next","tagName":"h2"},{"title":"Colima​","type":1,"pageTitle":"[Docker] Use docker cli w/o Docker Desktop on macOS","url":"/moco/devsecops/docker/docker-cli_macos/#colima","content":" Colima means Containers in Lima. Since Lima is aka Linux on Mac. By transitivity, Colima can also mean Containers on Linux on Mac.  Colima 額外還支援 Kubernetes 基礎建設, 再另找時間好好研究.  ","version":"Next","tagName":"h3"},{"title":"Refs:​","type":1,"pageTitle":"[Docker] Use docker cli w/o Docker Desktop on macOS","url":"/moco/devsecops/docker/docker-cli_macos/#refs","content":" How to use Docker without Docker Desktop on MacOS 📦 - DEV CommunityHow to use Docker without Docker Desktop on MacOS | how.wtf ","version":"Next","tagName":"h3"},{"title":"[Docker] Command Snippets","type":0,"sectionRef":"#","url":"/moco/devsecops/docker/docker-cli_snippets/","content":"","keywords":"","version":"Next"},{"title":"docker attach​","type":1,"pageTitle":"[Docker] Command Snippets","url":"/moco/devsecops/docker/docker-cli_snippets/#docker-attach","content":" Attach local standard input, output, and error streams to a running container  docker attach [OPTIONS] CONTAINER   CTRL-c sends a SIGINT to the container.CTRL-p CTRL-q key sequence to detach from the container.  ","version":"Next","tagName":"h3"},{"title":"docker commit​","type":1,"pageTitle":"[Docker] Command Snippets","url":"/moco/devsecops/docker/docker-cli_snippets/#docker-commit","content":" Create a new image from a container’s changes  docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]   ","version":"Next","tagName":"h3"},{"title":"See Also​","type":1,"pageTitle":"[Docker] Command Snippets","url":"/moco/devsecops/docker/docker-cli_snippets/#see-also","content":" Docker Documentation  Environment variables in Compose | Docker DocumentationDay-9 熟悉 Docker 進階功能 - iT 邦幫忙::一起幫忙解決難題，拯救 IT 人的一天 ","version":"Next","tagName":"h2"},{"title":"Awesome ELK Resources","type":0,"sectionRef":"#","url":"/moco/devsecops/elk/awesome/","content":"Awesome ELK Resources Elastic 那些事儿 - SegmentFault 思否","keywords":"","version":"Next"},{"title":"[Dockerfile] HEALTHCHECK 健康檢查","type":0,"sectionRef":"#","url":"/moco/devsecops/docker/dockerfile/dockerfile_healthy-check/","content":"","keywords":"","version":"Next"},{"title":"前言​","type":1,"pageTitle":"[Dockerfile] HEALTHCHECK 健康檢查","url":"/moco/devsecops/docker/dockerfile/dockerfile_healthy-check/#前言","content":" 在沒有 HEALTHCHECK 指令之前, Docker 只能透過 process 是否退出來判斷 container 的狀態. 不過有時候是服務已經無法正常運作了, 但 process 沒有退出, 這樣會導致該服務仍然可以接收用戶請求, 但是無法正常回應.  ","version":"Next","tagName":"h2"},{"title":"Health Check​","type":1,"pageTitle":"[Dockerfile] HEALTHCHECK 健康檢查","url":"/moco/devsecops/docker/dockerfile/dockerfile_healthy-check/#health-check","content":" 在 Docker 版本 1.12 之後提供了 HEALTHCHECK 指令, 可以設定一行 command 用來判斷服務的狀態是否正常, 這樣可以更準確地判斷服務狀態.  Container 啟動後的初始狀態為 starting, 在 HEALTHCHECK 指令檢查成功後, 狀態會更改為 healthy. 如果連續失敗超過指定次數則會改為 unhealthy.  ","version":"Next","tagName":"h2"},{"title":"format​","type":1,"pageTitle":"[Dockerfile] HEALTHCHECK 健康檢查","url":"/moco/devsecops/docker/dockerfile/dockerfile_healthy-check/#format","content":" HEALTHCHECK [OPTIONS] CMD command (check container health by running a command inside the container)HEALTHCHECK NONE (disable any healthcheck inherited from the base image)  ","version":"Next","tagName":"h3"},{"title":"options​","type":1,"pageTitle":"[Dockerfile] HEALTHCHECK 健康檢查","url":"/moco/devsecops/docker/dockerfile/dockerfile_healthy-check/#options","content":" --interval=DURATION (default: 30s)--timeout=DURATION (default: 30s)--start-period=DURATION (default: 0s)--retries=N (default: 3)  ","version":"Next","tagName":"h3"},{"title":"See Also​","type":1,"pageTitle":"[Dockerfile] HEALTHCHECK 健康檢查","url":"/moco/devsecops/docker/dockerfile/dockerfile_healthy-check/#see-also","content":" Dockerfile referenceLab #14: Create a Docker Image with HEALTHCHECK instruction | dockerlabsHEALTHCHECK 健康检查 - Docker — 从入门到实践[Docker] Health Check and Restart Unhealthy Container | wshs0713's blog ","version":"Next","tagName":"h2"},{"title":"Awesome SRE Resources","type":0,"sectionRef":"#","url":"/moco/devsecops/infra/awesome/","content":"Awesome SRE Resources","keywords":"","version":"Next"},{"title":"[GitLab-CI] Merge requests API","type":0,"sectionRef":"#","url":"/moco/devsecops/gitlab/gitlab_merge-request/","content":"","keywords":"","version":"Next"},{"title":"Merge status​","type":1,"pageTitle":"[GitLab-CI] Merge requests API","url":"/moco/devsecops/gitlab/gitlab_merge-request/#merge-status","content":" checkingcan_be_mergedcannot_be_merged  ","version":"Next","tagName":"h3"},{"title":"See Also​","type":1,"pageTitle":"[GitLab-CI] Merge requests API","url":"/moco/devsecops/gitlab/gitlab_merge-request/#see-also","content":" Merge requests API | GitLab ","version":"Next","tagName":"h2"},{"title":"[ELK] Usage Analysis","type":0,"sectionRef":"#","url":"/moco/devsecops/elk/elk-case_usage-analysis/","content":"","keywords":"","version":"Next"},{"title":"See Also​","type":1,"pageTitle":"[ELK] Usage Analysis","url":"/moco/devsecops/elk/elk-case_usage-analysis/#see-also","content":" Elasticsearch如何实现SQL语句中 Group By 和 Limit 的功能 - Elastic 那些事儿 - SegmentFault 思否 ","version":"Next","tagName":"h2"},{"title":"Bash: snippets","type":0,"sectionRef":"#","url":"/moco/devsecops/infra/nexus-repository/","content":"Bash: snippets","keywords":"","version":"Next"},{"title":"[NGINX] URL redirect / rewrite / proxy_pass","type":0,"sectionRef":"#","url":"/moco/devsecops/infra/nginx_modify-endpoint/","content":"","keywords":"","version":"Next"},{"title":"See Also​","type":1,"pageTitle":"[NGINX] URL redirect / rewrite / proxy_pass","url":"/moco/devsecops/infra/nginx_modify-endpoint/#see-also","content":" How to Create NGINX Rewrite Rules | NGINXNginx Rewrite URL Rules Examples | DigitalOceanNginx reverse proxy + URL rewrite - Server FaultNginx如何進行轉址？ | MagicLenRewrite vs Redirect NGINX - Ubiq BI ","version":"Next","tagName":"h2"},{"title":"[Nginx] Container Tips","type":0,"sectionRef":"#","url":"/moco/devsecops/infra/nginx_docker-tips/","content":"","keywords":"","version":"Next"},{"title":"Config file​","type":1,"pageTitle":"[Nginx] Container Tips","url":"/moco/devsecops/infra/nginx_docker-tips/#config-file","content":" mount nginx configuration files  ","version":"Next","tagName":"h2"},{"title":"Reload Nginx Inside Docker Container​","type":1,"pageTitle":"[Nginx] Container Tips","url":"/moco/devsecops/infra/nginx_docker-tips/#reload-nginx-inside-docker-container","content":" Find your container name Use docker ps to find your nginx container. Reload Nginx With docker exec -it {container_name} {command} you can directly access your container and execute commands. In my case the name of the container is nginx-server. $ docker exec -it nginx-server nginx -s reload 2016/08/18 09:52:38 [notice] 19#19: signal process started $ docker exec -it nginx-server nginx -s reload 2016/08/18 09:52:38 [notice] 19#19: signal process started   ","version":"Next","tagName":"h3"},{"title":"Docker Compose​","type":1,"pageTitle":"[Nginx] Container Tips","url":"/moco/devsecops/infra/nginx_docker-tips/#docker-compose","content":" ","version":"Next","tagName":"h2"},{"title":"See Also​","type":1,"pageTitle":"[Nginx] Container Tips","url":"/moco/devsecops/infra/nginx_docker-tips/#see-also","content":" nginx - Official Image | Docker HubReload Nginx Inside Docker Container – Tobias Forkel – Blog – PHP / Magento Developer located in Melbourne, Australia ","version":"Next","tagName":"h2"},{"title":"[Nginx] 手動 Let's Encrypt SSL 憑證與設定","type":0,"sectionRef":"#","url":"/moco/devsecops/infra/nginx_lets-encrypt-ssl/","content":"","keywords":"","version":"Next"},{"title":"手動申請憑證​","type":1,"pageTitle":"[Nginx] 手動 Let's Encrypt SSL 憑證與設定","url":"/moco/devsecops/infra/nginx_lets-encrypt-ssl/#手動申請憑證","content":" 手動下載 certbot, 放置主機上. 或利用套件管理安裝亦可.  手動申請指令與說明如下:  $ ./certbot-auto certonly --manual --no-self-upgrade --dry-run --preferred-challenge dns -d www.abc.com   certonly --manual 手動申請. 自行配置 HTTP 伺服器, 或 HTTP 伺服器在其他主機上. --no-self-upgrade 不自動更新 certbot. certbot 啟動時會先到 Server 檢查有沒有新版自動下載更新, 加上這個指令可強制不更新. --dry-run 為避免濫用, Let's Encrypt 有驗證次數的限制, 加上 --dry-run 可以使用 stage 環境健行配置的測試.官方文件在此 There is a Failed Validation limit of 5 failures per account, per hostname, per hour. This limit is higher on our staging environment, so you can use that environment to debug connectivity problems. Exceeding the Failed Validations limit is reported with the error message too many failed authorizations recently. --preferred-challenge dns Port 80 被封鎖無法從外部連入, 所以採用 DNS Record 驗證. -d www.abc.com 最後這邊是自己的域名.    輸入後 certbot 會產生一組需配置到 DNS TXT Record 的值. 例如專案是利用 CloudFlare 當 DNS, 就在後台新增一組 TXT Record.    設置好後按 Enter, Let's Encrypt 主機會去查 _acme-challenge.www.abc.com 的值, 若相符則會核發對應的憑證.  取得憑證後即可把剛剛的 DNS Record 移除, 畢竟下次申請時內容需要替換, 留著沒意義.  ","version":"Next","tagName":"h2"},{"title":"Nginx 設定​","type":1,"pageTitle":"[Nginx] 手動 Let's Encrypt SSL 憑證與設定","url":"/moco/devsecops/infra/nginx_lets-encrypt-ssl/#nginx-設定","content":" 取得憑證後把相關憑證檔案放在 nginx 可以存取的資料夾下, 修改 /etc/nginx/sites-enabled/deafult新增 SSL 憑證相關配置如下:  server{ server_name www.abc.com; listen 8888 ssl; ssl_certificate /etc/letsencrypt/cert/www.abc.com/fullchain1.pem; ssl_certificate_key /etc/letsencrypt/cert/www.abc.com/privkey1.pem; ssl_dhparam /etc/ssl/certs/dhparams.pem; ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2; ssl_ciphers HIGH:!aNULL:!MD5; }   修改後重啟 Nginx 即可.  $ sudo nginx -t $ sudo nginx -s reload   ","version":"Next","tagName":"h2"},{"title":"See Also​","type":1,"pageTitle":"[Nginx] 手動 Let's Encrypt SSL 憑證與設定","url":"/moco/devsecops/infra/nginx_lets-encrypt-ssl/#see-also","content":" [教學] 申請Let’s Encrypt憑證與啟用https (Nginx) | 辛比誌解析 Certbot（Let's encrypt） 使用方式 | DEVLOG of andyyouacme.sh 自動化申請和更新 Let's Encrypt 萬用 SSL 憑證教學 | KJie Notes域名在80端口无法访问的情况下通过certbot生成证书_起梦成长的博客-CSDN博客 ","version":"Next","tagName":"h2"},{"title":"[NGINX] Config Snippets","type":0,"sectionRef":"#","url":"/moco/devsecops/infra/nginx_snippets/","content":"[NGINX] Config Snippets","keywords":"","version":"Next"},{"title":"Awesome Security Resources","type":0,"sectionRef":"#","url":"/moco/devsecops/security/awesome/","content":"Awesome Security Resources","keywords":"","version":"Next"},{"title":"[Redis] 建製 Redis Cluster","type":0,"sectionRef":"#","url":"/moco/devsecops/infra/redis_cluster/","content":"","keywords":"","version":"Next"},{"title":"安裝 Redis​","type":1,"pageTitle":"[Redis] 建製 Redis Cluster","url":"/moco/devsecops/infra/redis_cluster/#安裝-redis","content":" 略. 可透過不同系統的套件管理程式安裝, 或參考官方文件下載 source tar ball 編譯安裝.  $ wget https://download.redis.io/releases/redis-6.2.3.tar.gz $ tar xzf redis-6.2.3.tar.gz $ cd redis-6.2.3 $ make   編譯後執行檔在 src/redis-server, 可試著執行開啟 redis 服務.  cow@sandbox:~/tmp/redis/src# ./redis-server 25572:C 06 May 2021 07:58:52.254 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo 25572:C 06 May 2021 07:58:52.254 # Redis version=5.0.5, bits=64, commit=00000000, modified=0, pid=25572, just started 25572:C 06 May 2021 07:58:52.254 # Warning: no config file specified, using the default config. In order to specify a config file use ./redis-server /path/to/redis.conf 25572:M 06 May 2021 07:58:52.255 * Increased maximum number of open files to 10032 (it was originally set to 1024). _._ _.-``__ ''-._ _.-`` `. `_. ''-._ Redis 5.0.5 (00000000/0) 64 bit .-`` .-```. ```\\/ _.,_ ''-._ ( ' , .-` | `, ) Running in standalone mode |`-._`-...-` __...-.``-._|'` _.-'| Port: 6379 | `-._ `._ / _.-' | PID: 25572 `-._ `-._ `-./ _.-' _.-' |`-._`-._ `-.__.-' _.-'_.-'| | `-._`-._ _.-'_.-' | http://redis.io `-._ `-._`-.__.-'_.-' _.-' |`-._`-._ `-.__.-' _.-'_.-'| | `-._`-._ _.-'_.-' | `-._ `-._`-.__.-'_.-' _.-' `-._ `-.__.-' _.-' `-._ _.-' `-.__.-' 25572:M 06 May 2021 07:58:52.255 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128. 25572:M 06 May 2021 07:58:52.255 # Server initialized 25572:M 06 May 2021 07:58:52.255 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then reboot or run the command 'sysctl vm.overcommit_memory=1' for this to take effect. 25572:M 06 May 2021 07:58:52.255 # WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command 'echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled' as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled. 25572:M 06 May 2021 07:58:52.255 * Ready to accept connections   出現 Ready to accept connections 後表示 Redis 程式可正常運作, 可再依需要把執行檔複製到 `/usr/local/bin' 之類系統資料夾中.  而警告訊息的排除可參考: Redis 警告訊息排除  ","version":"Next","tagName":"h2"},{"title":"準備 config​","type":1,"pageTitle":"[Redis] 建製 Redis Cluster","url":"/moco/devsecops/infra/redis_cluster/#準備-config","content":" 官方建議使用六個 node 來建 redis cluster, 實際業務運行上通常為六台獨立的主機, 使用同一份 config 部署到六台主機即可.  本地測試在同一台主機上跑六個不同 redis-server instance, 分別使用 Port: 7001 ~ 7006. 因此需準備六份 config.  $ mkdir 7001 7002 7003 7004 7005 7006 $ vi 7001/redis.config   port 7001 cluster-enabled yes cluster-config-file nodes_7001.conf cluster-node-timeout 5000 appendonly yes daemonize yes bind x.x.x.x requirepass password masterauth password   基本需要的設置內容與簡單說明如下:  port 7001 Redis-Server instance 所服務的 port, 相同主機的話需錯開.cluster-enabled yes 啟用 redis clustercluster-config-file nodes_7001.conf 每個 node 需要獨立的 cluster 設定檔. 僅需指定檔名, 無須設定檔案內容. redis-cluster 運作時會自行維護與修改該檔案內容.cluster-node-timeout 5000 node 判斷失效的時間appendonly yes 啟用 aof  設定檔有上述內容, 基本上就可以執行一個 redis-cluster node 了. 而一些常見的額外設定如下:  daemonize yes 背景執行bind x.x.x.x 允許 listen 特定 ip 的連線requirepass password 密碼設定masterauth password 從 master 的密碼    ","version":"Next","tagName":"h2"},{"title":"啟動​","type":1,"pageTitle":"[Redis] 建製 Redis Cluster","url":"/moco/devsecops/infra/redis_cluster/#啟動","content":" 透過 redis-server 搭配各個設定檔, 逐一啟動不同的 redis-server instance  $ redis-server 7001/redif.conf $ redis-server 7002/redif.conf $ redis-server 7003/redif.conf $ redis-server 7004/redif.conf $ redis-server 7005/redif.conf $ redis-server 7006/redif.conf   ","version":"Next","tagName":"h2"},{"title":"加入 cluster​","type":1,"pageTitle":"[Redis] 建製 Redis Cluster","url":"/moco/devsecops/infra/redis_cluster/#加入-cluster","content":" 只是把各個 redis-server instance 跑起來, 彼此尚不是 cluster 裡面的 node, 需下指令建理 cluster.  $ redis-cli --cluster create 127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005 127.0.0.1:7006 --cluster-replicas 1   redis-cli redis CLI 控制程式, 除了集成一些控制項目外, 也是個完整的 redis-client.--cluster create x.x.x.x:port1 ... x.x.x.x:port6 利用這些 redis-server instance 建立 redis-cluster.--cluster-replicas 1 一個 master 節點搭配一個 slave 節點. 因上述指令共有六個節點, 所以會建構出三個 master 節點搭配三個 slave 節點.  ","version":"Next","tagName":"h2"},{"title":"See Also​","type":1,"pageTitle":"[Redis] 建製 Redis Cluster","url":"/moco/devsecops/infra/redis_cluster/#see-also","content":" 以上是最常見的 Redis Cluster 建製方法, 也是官方建議的方案. 關於 Redis Cluster 進一步資訊, Redis初步學習整理——第五節Cluster叢集部署、主從複製、哨兵模式_資料庫_程式人生是個相當不錯的文章, 值得一讀.  其他參考資料陳列於下:  Redis cluster tutorial – RedisCentos 7 部署Redis 三主三從叢集 - tw511教學網建立 Redis Cluster (Redis 5) - Yowko's NotesRedis 集群架設. 前言 | by 徐子函 | Medium ","version":"Next","tagName":"h2"},{"title":"[Redis] 警告訊息排除","type":0,"sectionRef":"#","url":"/moco/devsecops/infra/redis_troubleshooting/","content":"","keywords":"","version":"Next"},{"title":"同時開啟檔案數量太少​","type":1,"pageTitle":"[Redis] 警告訊息排除","url":"/moco/devsecops/infra/redis_troubleshooting/#同時開啟檔案數量太少","content":" Increased maximum number of open files to 10032 (it was originally set to 1024).   第一個訊息是建議把 Redis 程序同時的檔案數量設為 10032. 系統一般預設為 1024.  一個程序同時能打開的檔案數量過多會影響系統其他服務, 過小則可能影響該程序自身效能. 若主機是專門拿來跑 redis-server, 則可檔案上限放大.  以下使用系統級別放大限制, 參考 fs  $ sudo vi /etc/sysctl.conf fs.file-max = 10032   上面修改的配置需重新開機才能生效, 可等本篇所有步驟進行完畢再重新開機.  無須重新開機的話可透過指令去設置或是使用者級別設置方式, 可參考 Redis 启动警告解决方法 - 简书  ","version":"Next","tagName":"h2"},{"title":"TCP backlog setting fail​","type":1,"pageTitle":"[Redis] 警告訊息排除","url":"/moco/devsecops/infra/redis_troubleshooting/#tcp-backlog-setting-fail","content":" WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.   Redis 嘗試設置 TCP backlog 511 失敗, 因為系統設置為更小的 128.  TCP backlog 詳解可參考: linux里的backlog详解_沧海一粟-CSDN博客_backlog修改系統設置方式如下:  $ sudo vi /etc/sysctl.conf net.core.somaxconn=65535   ","version":"Next","tagName":"h2"},{"title":"overcommit_memory = 0​","type":1,"pageTitle":"[Redis] 警告訊息排除","url":"/moco/devsecops/infra/redis_troubleshooting/#overcommit_memory--0","content":" WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then reboot or run the command 'sysctl vm.overcommit_memory=1' for this to take effect.   overcommit_memory 參數設定為 0. 會造成記憶體不足的情況下, 後台存檔的程序可能失效. 建議修改設定為 1.  有关linux下redis overcommit_memory的问题修改系統設置方式如下:  $ sudo vi /etc/sysctl.conf vm.overcommit_memory=1   ","version":"Next","tagName":"h2"},{"title":"Transparent Huge Pages enabled​","type":1,"pageTitle":"[Redis] 警告訊息排除","url":"/moco/devsecops/infra/redis_troubleshooting/#transparent-huge-pages-enabled","content":" WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command 'echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled' as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled.   目前系統啟用 Transparent Huge Pages (THP) 這可能會造成 redis 效能延遲或記憶體使用問題, 建議關閉 THP 支援.  THP 介紹如下:  Linux关于透明大页的使用与禁用介绍 - 云+社区 - 腾讯云linux 内存管理 Transparent HugePages 透明大页 简介_whatday的专栏-CSDN博客_linux大页内存 透明大页内存  關閉 THP 方法如下:  $ sudo vi /etc/rc.local #!/bin/sh -e echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled $ sudo chmod a+x /etc/rc.local   ","version":"Next","tagName":"h2"},{"title":"See Also​","type":1,"pageTitle":"[Redis] 警告訊息排除","url":"/moco/devsecops/infra/redis_troubleshooting/#see-also","content":" 全部修改完後重新開機後, redis 就不會出現相關 WARNING 了. 若系統不方便重新開機, 下列兩個參考資訊都有可以即時生效的設定方式.  Redis 启动警告解决方法 - 简书Redis优化：启动警告问题的解决(必须做的操作) 天道酬勤，行者无疆的技术博客_51CTO博客 ","version":"Next","tagName":"h2"},{"title":"CSRF (Cross Site Request Forgery)","type":0,"sectionRef":"#","url":"/moco/devsecops/security/http_csrf/","content":"","keywords":"","version":"Next"},{"title":"前言​","type":1,"pageTitle":"CSRF (Cross Site Request Forgery)","url":"/moco/devsecops/security/http_csrf/#前言","content":" 零基礎資安系列前言的例子挺有趣的, 抄襲如下:  陌生人＝ Hacker / 菜單 ＝ Request 桌號＝ cookie / 老闆＝ web server / 你 ＝ User 想像你到一家餐廳吃飯, 陌生人拿了一張有你桌號的菜單點餐之後給老闆. 結果老闆問也不問便收了菜單並將帳記到了你的身上. 這就是 CSRF 的基礎概念。  這個例子來說, 以吃貨角度, 廚房做錯單, 喜歡的菜色就收下, 不喜歡就請服務生退回, 影響不大. 不過若是像一些酒吧是報桌號記帳的消費模式, 爭議就大了...  所以到底什麼是 CSRF 呢?  ","version":"Next","tagName":"h2"},{"title":"CSRF​","type":1,"pageTitle":"CSRF (Cross Site Request Forgery)","url":"/moco/devsecops/security/http_csrf/#csrf","content":" ","version":"Next","tagName":"h2"},{"title":"See Also​","type":1,"pageTitle":"CSRF (Cross Site Request Forgery)","url":"/moco/devsecops/security/http_csrf/#see-also","content":" 零基礎資安系列（一）-認識 CSRF（Cross Site Request Forgery）讓我們來談談 CSRF ","version":"Next","tagName":"h2"},{"title":"Awesome Flutter Resources","type":0,"sectionRef":"#","url":"/moco/frontend/flutter/awesome/","content":"Awesome Flutter Resources","keywords":"","version":"Next"},{"title":"[HTTP Security] CORS 跨來源資源共用","type":0,"sectionRef":"#","url":"/moco/devsecops/security/http_cors/","content":"","keywords":"","version":"Next"},{"title":"TL;DR;​","type":1,"pageTitle":"[HTTP Security] CORS 跨來源資源共用","url":"/moco/devsecops/security/http_cors/#tldr","content":" 預設的情況下, 瀏覽器同源會遵守同源政策 (same-origin policy), 並不允許跨域請求 (cross-origin). 在 server 未允許的情況下, 會得到 blocked by CORS policy 的錯誤.如果 client 希望能過取得跨域的資源, 需要由 server 在 response header 中帶上 Access-Control-Allow-Origin 的欄位.  ","version":"Next","tagName":"h2"},{"title":"Preface​","type":1,"pageTitle":"[HTTP Security] CORS 跨來源資源共用","url":"/moco/devsecops/security/http_cors/#preface","content":" 對接 API 時, 若沒有特別設定, 前後端在各自環境下測試 API 對接, 可能會出現這樣錯誤:  fetch('https://www.google.com') .then(function (response) { // Do something ... }) .catch(function (error) { // Do something else ... });     若放到正式環境上, 可能又沒有這問題了. 這是什麼狀況呢? 仔細看錯誤訊息如下:  access to XMLHttpRequest at 連結A from origin 連結B has been blocked by CORS policy: response to preflight request doesn't pass access control check: No 'Access-control-allow-origin' header is present on the requested resource  這錯誤訊息就是在說 傳送過去的 XMLhttpRequest 違反 CORS 規範 而無法存取. 需檢查 Web Server 上 Access-Control-Allow-Origin header 相關設定.  ","version":"Next","tagName":"h2"},{"title":"同源政策 (same-origin policy)​","type":1,"pageTitle":"[HTTP Security] CORS 跨來源資源共用","url":"/moco/devsecops/security/http_cors/#同源政策-same-origin-policy","content":" 在開始 CORS 之前, 要先知道瀏覽器的 Same Origin Policy (同源政策).  基於安全性考量, 程式碼所發出的跨來源 HTTP 請求會受到限制. 例如，XMLHttpRequest 及 Fetch 都遵守同源政策 (same-origin policy). 這代表網路應用程式所使用的 API 除非有回傳 CORS 標頭 (例如: Access-Control-Allow-Origin). 否則只能請求與應用程式相同來源的 HTTP 資源.  在這個情況下, 其實請求 (request) 已經發出去了, 而瀏覽器其實也拿到回應 (response), 但是瀏覽器基於同源政策, 因此不把拿到的回應給你的 JavaScript 去做進一步的處理.    ","version":"Next","tagName":"h2"},{"title":"同源/跨來源 怎麼判定​","type":1,"pageTitle":"[HTTP Security] CORS 跨來源資源共用","url":"/moco/devsecops/security/http_cors/#同源跨來源-怎麼判定","content":" 當兩個網址的 schema(protocol) + host + port 皆相同, 就是同源 (Same-Origin). 只要有一者不同, 就是跨來源 (Cross-origin)    一般來說跨來源寫 (Cross-origin writes), 跨來源嵌入 (Cross-origin embedding) 是被允許的, 而跨來源讀取 (Cross-origin reads) 是受限制的. 而實際上, 跨來源請求資源是相當常見的情況, CORS 就是為了解決跨來源共用資源的規範.  ","version":"Next","tagName":"h3"},{"title":"CORS​","type":1,"pageTitle":"[HTTP Security] CORS 跨來源資源共用","url":"/moco/devsecops/security/http_cors/#cors","content":" 跨來源資源共用（Cross-Origin Resource Sharing (CORS)）是一種使用額外 HTTP 標頭令目前瀏覽網站的使用者代理取得存取其他來源（網域）伺服器特定資源權限的機制。 當使用者代理請求一個不是目前文件來源——例如來自於不同網域（domain）、通訊協定（protocol） 或通訊埠（port）的資源時，會建立一個跨來源 HTTP 請求（cross-origin HTTP request）。    ","version":"Next","tagName":"h2"},{"title":"開啟跨來源請求​","type":1,"pageTitle":"[HTTP Security] CORS 跨來源資源共用","url":"/moco/devsecops/security/http_cors/#開啟跨來源請求","content":" 若要開啟跨來源請求, 必須在伺服器端做一些設定, 像是在 Response Header 加上 Access-Control-Allow-Origin  Access-Control-Allow-Origin: * # 允許所有網站發送的請求 Access-Control-Allow-Origin: http://foo.example # 只允許 http://foo.example 的請求   這裡 * 就表示 接受所有不同來源 的跨域請求. 當瀏覽器接受到伺服器的回應時, 會去比對這個內容, 如果目前的 Origin 符合 Access-Control-Allow-Origin 所定義的規則的話, 瀏覽器才會把回應給你.  另外還有其他和跨域請求時可用的 Header 像是:  Access-Control-Allow-Headers: Access-Control-Allow-Methods: [&quot;GET&quot;, &quot;POST&quot;, &quot;PUT&quot;] Access-Control-Expose-Headers: X-My-Custom-Header, X-Another-Custom-Header Access-Control-Max-Age: &lt;delta-seconds&gt; Access-Control-Allow-Credentials: true   Access-Control-Allow-Headers 指定哪些 HTTP 標頭可以於實際請求中使用。Access-Control-Allow-Methods 存取資源所允許的方法，用來回應預檢請求。Access-Control-Expose-Headers 瀏覽器能夠存取伺服器回應當中哪些標頭。Access-Control-Max-Age 預檢請求之結果可以被快取的秒數。Access-Control-Allow-Credentials 用於驗證請求中。  ","version":"Next","tagName":"h3"},{"title":"簡單請求與預檢請求​","type":1,"pageTitle":"[HTTP Security] CORS 跨來源資源共用","url":"/moco/devsecops/security/http_cors/#簡單請求與預檢請求","content":" 跨來源請求又可以分成 簡單請求 (simple request) 和 預檢請求 (preflight request).  ","version":"Next","tagName":"h2"},{"title":"簡單請求 (Simple Request)​","type":1,"pageTitle":"[HTTP Security] CORS 跨來源資源共用","url":"/moco/devsecops/security/http_cors/#簡單請求-simple-request","content":" 簡單請求有一些規範, 基本上使用的一定要是 GET, HEAD, POST 方法, 並且 不能有客制的 header, 僅允許特定的標頭和內容, 如此才算是簡單請求.  備註 雖然稱作是簡單請求, 但它依然會遵循 同源政策 (Same Origin Policy) 的規範.  ","version":"Next","tagName":"h3"},{"title":"預檢請求 (Preflight Request)​","type":1,"pageTitle":"[HTTP Security] CORS 跨來源資源共用","url":"/moco/devsecops/security/http_cors/#預檢請求-preflight-request","content":" 預檢請求通常是在發送會帶有副作用的 HTTP 請求方法前, 規範瀏覽器要先發送預檢請求, 預檢請求會以 HTTP OPTIONS 的方法送出, 以向伺服器確認後續的請求能否傳送, 如果預檢請求沒有通過, 那麼後續真正要發送的實際請求 (例如: POST, PUT, DELETE 等等) 就不會發送了.  預檢請求和簡單請求有一點不同, 如果是簡單請求而被 CORS 攔下來的話, 實際上請求已經發送出去, 只是被瀏覽器擋下來不給你. 但若是預檢請求, 發送預檢請求後若沒有通過, 真正要發送的請求是不會發送出去的. 也就是說 一旦預檢請求完成, 真正的請求才會被送出.  預檢請求流程  用戶端向伺服器端發送預檢請求 (瀏覽器會自動發送)​  OPTIONS /resources/post-here/ HTTP/1.1 Host: bar.other Origin: http://foo.example Access-Control-Request-Method: POST Access-Control-Request-Headers: X-PINGOTHER, Content-Type   Access-Control-Request-Method標頭會告訴伺服器之後送出的實際請求會是 POST 方法.Access-Control-Request-Headers標頭則是通知伺服器實際請求會帶有一個自定義的 X-PINGOTHER 標頭.  伺服器回應預檢請求​  在這些資訊下, 接著伺服器將會確定是否接受請求, 並傳送以下回覆:  HTTP/1.1 200 OK Server: Apache/2.0.61 (Unix) Access-Control-Allow-Origin: http://foo.example Access-Control-Allow-Methods: POST, GET, OPTIONS Access-Control-Allow-Headers: X-PINGOTHER, Content-Type Access-Control-Max-Age: 86400   Access-Control-Allow-Methods 標頭表示伺服器可以接受 POST, GET, OPTIONS 方法.Access-Control-Allow-Headers 標頭及其值 X-PINGOTHER, Content-Type 表示伺服器允許在實際請求中使用以上這兩個標頭.Access-Control-Max-Age提供了本次預檢請求回應所可以快取的秒數, 如此將可避免瀏覽器不斷發送 preflight request. 在此範例中 86400 秒即為 24 小時. 每一個瀏覽器都有預設的最大值, 當 Access-Control-Max-Age 較預設值大時會優先採用預設值.  ","version":"Next","tagName":"h3"},{"title":"Cookie & Credentials​","type":1,"pageTitle":"[HTTP Security] CORS 跨來源資源共用","url":"/moco/devsecops/security/http_cors/#cookie--credentials","content":" Cookie, Authorization Header 和 TLS 的憑證, 預設也只會自動帶入到同源所發出的請求中.  有時我們的 Cookie 會需要發送到不同來源 (origin) 的位置, 例如 server 的 URL 是 https://api.example.com , 但 client 的 URL 是 https://dev.example.com . 因為 subdomain 不同的緣故, 會被認定是不同的 origin. 因此 client 對 server 所發送的請求並不會自動帶上 Cookie.  要解決這個問題, 如果 client 使用的是 fetch API, 則需要加上 credentials: include; 的 options. 否則 fetch 預設不會傳送 cross-origin cookies.  // client fetch('https://api.example.com', { credentials: 'include', });   而 server 則是要回傳 Access-Control-Allow-Credentials 的 header 在 response 中：  headers.Set(&quot;Access-Control-Allow-Credentials&quot;, &quot;true&quot;)   ","version":"Next","tagName":"h2"},{"title":"See Also​","type":1,"pageTitle":"[HTTP Security] CORS 跨來源資源共用","url":"/moco/devsecops/security/http_cors/#see-also","content":" 遇到 CORS 的問題, 可以歸納出這樣的 SOP:  如果是「簡單」的跨來源請求, 常見開發環境下整合測試需求. 後端 GET/POST/HEAD 方法本身加上 Access-Control-Allow-Origin header.非「簡單」跨來源請求, 在後端 OPTIONS 加上 Access-Control-Allow-Methods 及 Access-Control-Allow-Headers header. 另外, 在後端方法本身加上 Access-Control-Allow-Origin header.需要使用 cookie 的情況下, 前端要加上 credentials: 'include' 或是 withCredentials 參數, 後端要加上 Access-Control-Allow-Credentials header, 而且 Access-Control-Allow-Origin header 不能用 *.  簡單整理 CORS 相關資料, 進階了解推薦閱讀 CORS 完全手冊. 而常見的後端語言中, 除了依需求手刻加上 header 外, 也有專門處理 CORS 相關套件可加速開發與方便部署配置.  Node.js Express CORS  ","version":"Next","tagName":"h2"},{"title":"References​","type":1,"pageTitle":"[HTTP Security] CORS 跨來源資源共用","url":"/moco/devsecops/security/http_cors/#references","content":" Cross-origin resource sharing - Wikipedia跨來源資源共用（CORS） - HTTP | MDNCORS 完全手冊（一）：為什麼會發生 CORS 錯誤？ - Huli CORS 完全手冊（二）：如何解決 CORS 問題？ - Huli CORS 完全手冊（三）：CORS 詳解 - Huli CORS 完全手冊（四）：一起看規範 - Huli CORS 完全手冊（五）：跨來源的安全性問題 - Huli CORS 完全手冊（六）：總結、後記與遺珠 - Huli[Web] 同源政策與跨來源資源共用（CORS） | PJCHENder 未整理筆記DAY04 - API串接常見問題 - CORS - 概念篇 (1) - iT 邦幫忙::一起幫忙解決難題，拯救 IT 人的一天 DAY05 - API串接常見問題 - CORS - 概念篇 (2) - iT 邦幫忙::一起幫忙解決難題，拯救 IT 人的一天 DAY06 - API串接常見問題 - CORS - 解決CORS問題篇 - iT 邦幫忙::一起幫忙解決難題，拯救 IT 人的一天原來 CORS 沒有我想像中的簡單網站安全🔒 Same Origin Policy 同源政策 ! 一切安全的基礎 | by Jayden Lin | 程式猿吃香蕉 | Medium簡單弄懂同源政策 (Same Origin Policy) 與跨網域 (CORS) | by Hannah Lin | Starbugs Weekly 星巴哥技術專欄 | MediumDay8-什麼是CROS (Cross-Origin Resource Sharing) - iT 邦幫忙::一起幫忙解決難題，拯救 IT 人的一天 ","version":"Next","tagName":"h3"},{"title":"[Ubuntu] 利用 NGINX 伺服器執行 PHP 程式","type":0,"sectionRef":"#","url":"/moco/devsecops/infra/ubuntu_nginx-php/","content":"","keywords":"","version":"Next"},{"title":"CGI​","type":1,"pageTitle":"[Ubuntu] 利用 NGINX 伺服器執行 PHP 程式","url":"/moco/devsecops/infra/ubuntu_nginx-php/#cgi","content":" CGI (Common Gateway Interface) 是用於網頁伺服器的介面標準, 支援 CGI 的網頁伺服器會將其所接收到的 HTTP 請求的內容設成環境變數, 作為某支程式時的環境變數以及標準輸入 (stdin) 輸入的資料. 而該程式標準輸出 (stdout) 的資料則會被網頁伺服器拿來回應給客戶端.  網頁伺服器每次使用 CGI 執行程式時, 都需要建立出新的行程 (fork process), 就像在終端機直接用檔案路徑去執行某支程式. 可想而知, 這樣的方式在應付多個 HTTP 請求時是沒有效率的。  ","version":"Next","tagName":"h3"},{"title":"FastCGI​","type":1,"pageTitle":"[Ubuntu] 利用 NGINX 伺服器執行 PHP 程式","url":"/moco/devsecops/infra/ubuntu_nginx-php/#fastcgi","content":" FastCGI 則是在網頁伺服器和 CGI程式之間再加一個管理員.  網頁伺服器要把 HTTP 請求交給管理員處理, 管理員負責分配 CGI 程式的執行資源, 使系統不會每次遇到請求就開一個行程去跑 CGI 程式, 以改善運作效率.  ","version":"Next","tagName":"h3"},{"title":"FPM(FastCGI Process Manager)​","type":1,"pageTitle":"[Ubuntu] 利用 NGINX 伺服器執行 PHP 程式","url":"/moco/devsecops/infra/ubuntu_nginx-php/#fpmfastcgi-process-manager","content":" FPM(php-fpm) 是 PHP 目前的 FastCGI 實作.  ","version":"Next","tagName":"h3"},{"title":"Installation​","type":1,"pageTitle":"[Ubuntu] 利用 NGINX 伺服器執行 PHP 程式","url":"/moco/devsecops/infra/ubuntu_nginx-php/#installation","content":" ","version":"Next","tagName":"h2"},{"title":"Nginx​","type":1,"pageTitle":"[Ubuntu] 利用 NGINX 伺服器執行 PHP 程式","url":"/moco/devsecops/infra/ubuntu_nginx-php/#nginx","content":" 在 Ubuntu 上安裝 Nginx 和安裝其他軟體一樣, 直接透過 apt 安裝即可.  $ sudo apt install nginx   Nginx 預設會啟用 HTTP, 佔用 TCP 連接埠為 HTTP 預設的 80. 可以使用以下指令來查看 Nginx 是否有確實安裝成功.  $ sudo netstat -tlnp | grep nginx   如上圖, 如果有看到連接埠 80 有被監聽, 就表示 Nginx 安裝成功.  Nginx 所以監聽任意網路介面上的 80 連接埠, 是因為預設的設定檔 (/etc/nginx/sites-available/default) 中, 有設一個會去監聽任意網路介面, 且連接埠為 80 的 虛擬主機 (Virtual Host). 有關於 Nginx 進一步的設定與配置說明, 可以參考使用Ubuntu Server架設Nginx伺服器 | MagicLen  ","version":"Next","tagName":"h3"},{"title":"PHP​","type":1,"pageTitle":"[Ubuntu] 利用 NGINX 伺服器執行 PHP 程式","url":"/moco/devsecops/infra/ubuntu_nginx-php/#php","content":" PHP 是腳本式程式語言, 需要有 PHP 執行環境才可以被執行.  $ sudo apt install php-cli   安裝完 php-cli 套件後, 可以使用 php 指令來執行 PHP 程式.  查看 PHP 的版本: $ php -v 執行 PHP 程式:  php 設定檔的路徑是 /etc/php/&lt;PHP版本號碼&gt;/cli/php.ini, 詳細設定說明可參考官方文件或 使用Ubuntu Server透過Nginx伺服器執行PHP程式 | MagicLen.  ","version":"Next","tagName":"h3"},{"title":"PHP-FPM​","type":1,"pageTitle":"[Ubuntu] 利用 NGINX 伺服器執行 PHP 程式","url":"/moco/devsecops/infra/ubuntu_nginx-php/#php-fpm","content":" $ sudo apt install php-fpm   FPM 預設只會監聽 Unix Domain Socket(UDS，或稱 IPC Socket), UDS 檔案路徑為 /run/php/php&lt;PHP版本號碼&gt;-fpm.sock. 例如 PHP 7.4 UDS 檔案路徑就是 /run/php/php7.4-fpm.sock.  如果要確認 FPM 有沒有安裝並啟用成功, 可以利用 socat 這個指令工具來進行. 安裝 socat：  $ sudo apt install socat   執行以下指令來判斷 FPM 是否正常工作:  $ echo /dev/null | sudo socat unix:/var/run/php/php-fpm.sock - &amp;&amp; echo &quot;Working!&quot; || echo &quot;Not working!&quot;     ","version":"Next","tagName":"h3"},{"title":"Configuration​","type":1,"pageTitle":"[Ubuntu] 利用 NGINX 伺服器執行 PHP 程式","url":"/moco/devsecops/infra/ubuntu_nginx-php/#configuration","content":" ","version":"Next","tagName":"h2"},{"title":"Nginx​","type":1,"pageTitle":"[Ubuntu] 利用 NGINX 伺服器執行 PHP 程式","url":"/moco/devsecops/infra/ubuntu_nginx-php/#nginx-1","content":" 順利安裝完之後開始修改 Nginx Server 設定檔, 如下:  $ sudo vim /etc/nginx/nginx.conf   user www-data; worker_processes auto; pid /run/nginx.pid; include /etc/nginx/modules-enabled/*.conf; events { use epoll; worker_connections 2048; } http { sendfile on; tcp_nopush on; tcp_nodelay on; keepalive_timeout 65; types_hash_max_size 2048; server_tokens off; include /etc/nginx/mime.types; default_type application/octet-stream; ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; # Dropping SSLv3, ref: POODLE ssl_prefer_server_ciphers on; access_log /var/log/nginx/access.log; error_log /var/log/nginx/error.log; gzip on; include /etc/nginx/conf.d/*.conf; include /etc/nginx/sites-enabled/*; }   幾個重要的參數:  user: Nginx Server 啟動所使用的使用者 (ubuntu 預設用 www-data)pid: ProcessID 存放位置 ( ubuntu 預設在 /run/nginx.pid)worker_processes: 開啟的程序數量, 請對應 CPU 核心數進行調整, 或維持預設的 autouse epoll: 啟動 epoll 會快很多，效果不錯worker_connections: 每個程序最高可以開啟的連線數server_tokens off: 移除 Nginx 版本資訊access_log, error_log: HTTP Log 存放的位置  上面是 Ngnix Server 整體的設定, 接下來要進行 Virtual Host 配置.  $ sudo vim /etc/nginx/sites-available/default   server { listen 80 default_server; listen [::]:80 default_server; root /var/www/html; # Add index.php to the list if you are using PHP index index.html index.htm index.php index.nginx-debian.html; server_name _; # set expiration of assets to MAX for caching location ~* \\.(ico|css|js|gif|jpe?g|png|ogg|ogv|svg|svgz|eot|otf|woff)(\\?.+)?$ { expires max; log_not_found off; } # framework rewrite location / { try_files $uri $uri/ /index.php =404; } # pass PHP scripts to FastCGI server location ~* \\.php$ { #include snippets/fastcgi-php.conf; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_split_path_info ^(.+\\.php)(.*)$; include fastcgi_params; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; } }   幾個參數設定說明:  server_name: 同 Apache ServerName 可以用來指定 Virtual Host (虛擬主機)root: 網頁所擺放的位置location / Selection (framework rewrite): 用 try_files $uri $uri/ /index.php; 來嘗試讀取開啟. 如果檔案不存在就轉為呼叫 index.php. 做的事情與常用的 Apache Rewrite Module 差不多. 主要是為了將 Request 導給 Framework (如 Codeigniter, Zend Framework 等等), 若沒有使用 PHP Framwwork, 可以無須設定.location ~ .php$ Selection (pass PHP scripts to FastCGI server): 設定要將 .php 檔案直接交由 FPM 來處理. 詳細的設定說明可以參考 Nginx WIKI. fastcgi_pass 指向 PHP-FPM 開啟的服務位置, 需和後面的 PHP-FPM 設定相同,  ","version":"Next","tagName":"h3"},{"title":"設定 FPM​","type":1,"pageTitle":"[Ubuntu] 利用 NGINX 伺服器執行 PHP 程式","url":"/moco/devsecops/infra/ubuntu_nginx-php/#設定-fpm","content":" FPM 設定檔放置於 /etc/php/&lt;PHP版本號碼&gt;/fpm/ 目錄下, 例如 PHP 7.4 就是在 /etc/php/7.4/fpm/ 目錄.  FPM 設定檔目錄中有個 pool.d 目錄, 用來放置每個「池」 (Pool) 的設定檔. 一個池就是一個 FastCGI 的管理區域 (或者說管理員). 預設為 www 池, 設定檔檔名為 www.conf:  $ sudo vim /etc/php/7.4/fpm/pool.d/www.conf   [www] user = www-data group = www-data listen = 127.0.0.1:9000 listen.backlog = 65535 listen.owner = www-data listen.group = www-data request_terminate_timeout = 600s pm = dynamic pm.max_children = 5 pm.start_servers = 2 pm.min_spare_servers = 1 pm.max_spare_servers = 3   listen: 設定從哪個地方接收 Nginx fastcgi_pass 請求, 要和前面 Nginx 的設定相同. 預設是 /run/php/php&lt;PHP版本號碼&gt;-fpm.sock. PHP-FPM 可以透過 TCP Socket 或者是 UNIX Kernel Socket. Kernel Socket 速度會比較快, 但是經過壓力測試後 Kernel Socket 反而常常掉包, 穩定性不如 TCP Socket 來的優異. 故這邊設為本地端的 TCP Socket.request_terminate_timeout: 設定表示 PHP 的執行時間, 超過這個週期就會結束. 設太短容易遇到檔案上傳時間比較久就 GG 了.pm: 設定子行程的數量要固定還是浮動. static 是固定為最大數量(pm.max_children).dynamic 是動態調整, 預設是 dynamic.ondemand 是行程開完就關. pm.max_children: 設定子行程的最大數量, 預設是5. 這個數量建議設為處理器的數量再根據每個子行程的記憶體用量乘上某個倍數 (例如記憶體剩得少就乘2，記憶體剩得多就乘4).  ","version":"Next","tagName":"h3"},{"title":"Start Nginx + PHP​","type":1,"pageTitle":"[Ubuntu] 利用 NGINX 伺服器執行 PHP 程式","url":"/moco/devsecops/infra/ubuntu_nginx-php/#start-nginx--php","content":" 最後啟動 Nginx 與 PHP-FPM 服務:  $ sudo service php7.4-fpm restart $ sudo service nginx restart   開啟瀏覽器試看看, Ubuntu 裝起來的 Nginx Welcome 畫面如下：    ","version":"Next","tagName":"h3"},{"title":"See Also​","type":1,"pageTitle":"[Ubuntu] 利用 NGINX 伺服器執行 PHP 程式","url":"/moco/devsecops/infra/ubuntu_nginx-php/#see-also","content":" 整體來說 Nginx 安裝蠻容易的, 但要調校的好又是另外一件事. 設定的不洽當, 在高流量時 Nginx 常會送你 502 Bad Gateway.  又例如 Nginx 可以將 FastCGI 服務回應的資料快取成檔案, 這樣下次如果又有一樣的請求，Nginx 就直接從檔案系統中撈出來回應， 不必再轉送給 FastCGI 服務處理, 可加快反應. Cache 的設置相當考驗 SRE 對 PHP 服務了解程度, 並非所有服務都適合開設 Cache. 這另篇再討論了.  需要花蠻多時間嘗試調整參數, 搭配效能測試工具來檢查, 讓伺服器發揮最大效用.  使用Ubuntu Server透過Nginx伺服器執行PHP程式 | MagicLen無堅不摧，唯快不破！快改用 Nginx + PHP-FPM 取代 Apache 吧！ - Soul &amp; Shell Blog[教學] 安裝LEMP(Linux+Nginx+Mysql+PHP)環境 | 辛比誌 ","version":"Next","tagName":"h2"},{"title":"Awesome React Native Resources","type":0,"sectionRef":"#","url":"/moco/frontend/reactnative/awesome/","content":"","keywords":"","version":"Next"},{"title":"ReactNative.dev​","type":1,"pageTitle":"Awesome React Native Resources","url":"/moco/frontend/reactnative/awesome/#reactnativedev","content":" React Native Learn once, write anywhere. Get Started |Learn the basics |React Native 中文网  ","version":"Next","tagName":"h2"},{"title":"Utilities​","type":1,"pageTitle":"Awesome React Native Resources","url":"/moco/frontend/reactnative/awesome/#utilities","content":" infinitered/reactotron: A desktop app for inspecting your React JS and React Native projects.  ","version":"Next","tagName":"h2"},{"title":"Temp​","type":1,"pageTitle":"Awesome React Native Resources","url":"/moco/frontend/reactnative/awesome/#temp","content":" [Day1] React Native是什麼？ - iT 邦幫忙::一起幫忙解決難題，拯救 IT 人的一天 ","version":"Next","tagName":"h2"},{"title":"rn-env_android-apk","type":0,"sectionRef":"#","url":"/moco/frontend/reactnative/env-setup/rn-env_android-apk/","content":"rn-env_android-apk","keywords":"","version":"Next"},{"title":"[ReactNative] Running on iOS devices","type":0,"sectionRef":"#","url":"/moco/frontend/reactnative/env-setup/rn-env_ios-ipa/","content":"","keywords":"","version":"Next"},{"title":"Running your app on iOS devices​","type":1,"pageTitle":"[ReactNative] Running on iOS devices","url":"/moco/frontend/reactnative/env-setup/rn-env_ios-ipa/#running-your-app-on-ios-devices","content":" ","version":"Next","tagName":"h2"},{"title":"1. Plug in your device via USB​","type":1,"pageTitle":"[ReactNative] Running on iOS devices","url":"/moco/frontend/reactnative/env-setup/rn-env_ios-ipa/#1-plug-in-your-device-via-usb","content":" 先連接 iOS 裝置到 Mac 電腦上, iOS 裝置連上電腦時會跳出信任此電腦的提式框, 需信任. 打開 Xcode. 如果專案有使用 CocoaPods, 開啟 ios/APP.workspace, 否則就打開 ios/APP.xcodeproj 專案檔.  Xcode: Product &gt; Destination 選擇所連接的 iOS 裝置.    第一次在 iOS 裝置上執行 App 時, Xcode 可能會跳出設定提式視窗, 跟著視窗指示註冊裝置即可.  ","version":"Next","tagName":"h3"},{"title":"2. Configure code signing​","type":1,"pageTitle":"[ReactNative] Running on iOS devices","url":"/moco/frontend/reactnative/env-setup/rn-env_ios-ipa/#2-configure-code-signing","content":" 後續步驟需要有 Apple Developer account, 沒有的話需先註冊.  在 Xcode Project 中找到對應的 project 和 target. 在 General 分頁中的 Signing 中確認選擇了開發者或團隊帳號.    ","version":"Next","tagName":"h3"},{"title":"3. Build and Run your app​","type":1,"pageTitle":"[ReactNative] Running on iOS devices","url":"/moco/frontend/reactnative/env-setup/rn-env_ios-ipa/#3-build-and-run-your-app","content":" 如果設置正確, Xcode 理應該可以看到 build target 為 iOS 裝置. 按下 Build and Run 按鈕 (⌘R) 或 Product 選單中選擇 Run, App 經過編譯後, 就會在裝置上自動執行.    因設置不同, 可能會多次跳出要求存取 Keychain 的提示視窗, 一一輸入障密同意即可.(應該有辦法避免, 確認方式後再更新文章)  If you run into any issues, please take a look at Apple's Launching Your App on a Device docs.  ","version":"Next","tagName":"h3"},{"title":"Connecting to the development server​","type":1,"pageTitle":"[ReactNative] Running on iOS devices","url":"/moco/frontend/reactnative/env-setup/rn-env_ios-ipa/#connecting-to-the-development-server","content":" ","version":"Next","tagName":"h2"},{"title":"Troubleshooting​","type":1,"pageTitle":"[ReactNative] Running on iOS devices","url":"/moco/frontend/reactnative/env-setup/rn-env_ios-ipa/#troubleshooting","content":" ","version":"Next","tagName":"h3"},{"title":"See Also​","type":1,"pageTitle":"[ReactNative] Running on iOS devices","url":"/moco/frontend/reactnative/env-setup/rn-env_ios-ipa/#see-also","content":" Running On Device · React Native 在设备上运行 · React Native 中文网Signing &amp; Capabilities workflow - Xcode Help ","version":"Next","tagName":"h2"},{"title":"[ReactNative] Fundamentals","type":0,"sectionRef":"#","url":"/moco/frontend/reactnative/the-basics/rn-basics_intro-react/","content":"","keywords":"","version":"Next"},{"title":"See Also​","type":1,"pageTitle":"[ReactNative] Fundamentals","url":"/moco/frontend/reactnative/the-basics/rn-basics_intro-react/#see-also","content":"","version":"Next","tagName":"h2"},{"title":"10 JavaScript Projects - Coding Challenge","type":0,"sectionRef":"#","url":"/moco/frontend/web/app_10-projects/","content":"","keywords":"","version":"Next"},{"title":"Countdown Timer​","type":1,"pageTitle":"10 JavaScript Projects - Coding Challenge","url":"/moco/frontend/web/app_10-projects/#countdown-timer","content":" Design: https://uidesigndaily.com/posts/sketch-countdown-timer-day-876future datetimerCode  ","version":"Next","tagName":"h2"},{"title":"note​","type":1,"pageTitle":"10 JavaScript Projects - Coding Challenge","url":"/moco/frontend/web/app_10-projects/#note","content":" 影片中的新年日期常數寫死, 我改用當前日期去計算下一個新年日期.影片中倒數的小時, 分, 秒都是用當前時間到新年日期的秒數計算得知. 我僅計算當下時間到隔天所剩餘時間. 理論上計算複雜度會比影片的計算少, 實際上仍需跑 benchmark 才能確定. 也許 Date.getHours() / Date.getMinutes() / Date.getSeconds()... 等內建函數效能比想像中慢, 自己運算可能更快也說不定.  ","version":"Next","tagName":"h3"},{"title":"Quiz App​","type":1,"pageTitle":"10 JavaScript Projects - Coding Challenge","url":"/moco/frontend/web/app_10-projects/#quiz-app","content":" Design: https://uidesigndaily.com/posts/sketch-questionnaire-choice-submit-day-924questions from objselect answerat the end show scoreCode  ","version":"Next","tagName":"h2"},{"title":"note​","type":1,"pageTitle":"10 JavaScript Projects - Coding Challenge","url":"/moco/frontend/web/app_10-projects/#note-1","content":" 題庫來源透過 Open Trivia DB: Free to use, user-contributed trivia question database. API 取得.在抓取 Radio input 時, 透過 document.getElementsByName() 取得使用者選擇的答案. DOM 結構上和影片中減少一個ˊ class 屬性. 但不確定 document.getElementsByName() 和 document.querySelectAll() 實際效能是否有差異.  ","version":"Next","tagName":"h3"},{"title":"Recipe App​","type":1,"pageTitle":"10 JavaScript Projects - Coding Challenge","url":"/moco/frontend/web/app_10-projects/#recipe-app","content":" Design: https://uidesigndaily.com/posts/sketch-recipe-app-food-mobile-day-615recipe info on clickfav recipe (w/ localStorage)Code  ","version":"Next","tagName":"h2"},{"title":"note​","type":1,"pageTitle":"10 JavaScript Projects - Coding Challenge","url":"/moco/frontend/web/app_10-projects/#note-2","content":" 居然有 public-apis, 對於開發取得練習資源真是太方便了.把食譜改成酒譜 App, 比較符合我的個性. :p  ","version":"Next","tagName":"h3"},{"title":"Summary​","type":1,"pageTitle":"10 JavaScript Projects - Coding Challenge","url":"/moco/frontend/web/app_10-projects/#summary","content":" 影片中先定下題目, 再去 UI Design Daily 找適當的版面來進行, 從無到有完整刻出一個個 WebApp, 對於有些基本基礎, 但不知如何找題目進行練習這個找題目的過程是很有幫助的.不透過框架進行前端開發真的太久, 一些 CSS 語法也是看影片才知道可以這樣使用. UI Framework 是兩面刀刃, 加速開發之餘卻也減低了對底層基礎的熟悉.影片中對於版面 CSS 和 UI 設計的一致性真的挺要求的, 是個認真的前端工程師. 自己對於版面就容易得過且過.看了影片後的實作, 排版上受影片影響很大, 而程式架構還比較維持自己想法進行.VSCode + Emmt 很方便, 要更加熟悉一下一些使用 tips.  ","version":"Next","tagName":"h2"},{"title":"See Also​","type":1,"pageTitle":"10 JavaScript Projects - Coding Challenge","url":"/moco/frontend/web/app_10-projects/#see-also","content":" 影片中用到許多前端設計的資源網站. 整理如下:  UI Design Daily | Weekly FREE UI resources straight to your inboxBeautiful Free Images &amp; Pictures | UnsplashGradient Background Colors - Eggradients.comCSS Gradient — Generator, Maker, and BackgroundPalettes | Flat UI Colors 🎨 280 handpicked colors ready for COPY &amp; PASTEpublic-apis/public-apis: A collective list of free APIscdnjs - The #1 free and open source CDN built to make life easier for developersFont AwesomeHeroicons  其他類似的前端 Coding Challenge:  10 JavaScript Projects in 1 Hour - Coding Challenge 🔥 - YouTube ","version":"Next","tagName":"h2"},{"title":"[ReactNative] Introduction","type":0,"sectionRef":"#","url":"/moco/frontend/reactnative/the-basics/rn-basics_get-started/","content":"","keywords":"","version":"Next"},{"title":"React Native​","type":1,"pageTitle":"[ReactNative] Introduction","url":"/moco/frontend/reactnative/the-basics/rn-basics_get-started/#react-native","content":" React Native 是 Facebook 開發的框架, 讓開發人員用寫 React 的方式以 JavaScript 開發 App. React Native 框架負責把 JS 轉成平台原生程式碼. 對網頁開發人員來說, 可以透過網頁技術開發 App, 還可以發佈雙平台的 App, 大幅減少探索的門檻.  ","version":"Next","tagName":"h2"},{"title":"Hello World​","type":1,"pageTitle":"[ReactNative] Introduction","url":"/moco/frontend/reactnative/the-basics/rn-basics_get-started/#hello-world","content":" Hello World.js import React from 'react'; import { View, Text, Image, ScrollView, TextInput } from 'react-native'; const App = () =&gt; { return ( &lt;ScrollView&gt; &lt;Text&gt;Some text&lt;/Text&gt; &lt;View&gt; &lt;Text&gt;Some more text&lt;/Text&gt; &lt;Image source={{ uri: 'https://reactnative.dev/docs/assets/p_cat2.png', }} style={{ width: 200, height: 200 }} /&gt; &lt;/View&gt; &lt;TextInput style={{ height: 40, borderColor: 'gray', borderWidth: 1 }} defaultValue=&quot;You can type in me&quot; /&gt; &lt;/ScrollView&gt; ); } export default App;   官網提供的 Hello World 範例中, 真的是只用上了元件的 React.  ","version":"Next","tagName":"h3"},{"title":"Snack Player​","type":1,"pageTitle":"[ReactNative] Introduction","url":"/moco/frontend/reactnative/the-basics/rn-basics_get-started/#snack-player","content":" 可以透過 Snack - React Native in the browser 預覽 React Native App 在手機上執行的樣子.  Snack 是由 Expo 所開發的線上工具, 集成了 react-native-web 相容層, 會盡量把 React Native JS 程式碼轉換成網頁相容的程式碼, 可以直接在網頁上預覽與修改程式. 適合用於學習, 展示 React Native .  ","version":"Next","tagName":"h3"},{"title":"Function and Class Components​","type":1,"pageTitle":"[ReactNative] Introduction","url":"/moco/frontend/reactnative/the-basics/rn-basics_get-started/#function-and-class-components","content":" 在 JavaScript everything is an object 的基礎背景下, Function 或 Class 皆可當作 React component.  自從 React Native 0.59 引入 Hook API 以後, 函數元件可以和類別元件一樣使用 state 等其他功能. 功能面上來說, 函數元件和類別元件幾乎沒有差異. 開發者可以自行決定把程式需求寫成函數元件或類別元件.  而 Hooks 是官方未來發展的趨勢, 官方文件中也預設以函數元件當作範例, 編寫 React Component 時, 除非有老舊專案仍需使用 Class Component, 否則以 Function Component 加上 Hooks 會是比較好的選擇.   Hello World function component.js import React from 'react'; import { Text, View } from 'react-native'; const HelloWorldApp = () =&gt; { return ( &lt;View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}&gt; &lt;Text&gt;Hello, world!&lt;/Text&gt; &lt;/View&gt; ); } export default HelloWorldApp; Hello Worls class component import React, { Component } from 'react'; import { Text, View } from 'react-native'; class HelloWorldApp extends Component { render() { return ( &lt;View style={{ flex: 1, justifyContent: &quot;center&quot;, alignItems: &quot;center&quot; }}&gt; &lt;Text&gt;Hello, world!&lt;/Text&gt; &lt;/View&gt; ); } } export default HelloWorldApp;   ","version":"Next","tagName":"h2"},{"title":"See Also​","type":1,"pageTitle":"[ReactNative] Introduction","url":"/moco/frontend/reactnative/the-basics/rn-basics_get-started/#see-also","content":" Releasing React Native 0.59 · React NativeIntroducing Hooks – React Hook 简介 – React ","version":"Next","tagName":"h2"},{"title":"[ReactNative] Core and Native Components","type":0,"sectionRef":"#","url":"/moco/frontend/reactnative/the-basics/rn-basics_rn-components/","content":"","keywords":"","version":"Next"},{"title":"Views and mobile development​","type":1,"pageTitle":"[ReactNative] Core and Native Components","url":"/moco/frontend/reactnative/the-basics/rn-basics_rn-components/#views-and-mobile-development","content":" iOS 和 Android App 開發中, View 是 UI 最基本的組成元件: 可用來顯示文字, 圖片, 或是使用者輸入等的矩形元件. App 上看得到的各種元件 (一段文字, 一個按鈕... 等) 都是各種 View.  ","version":"Next","tagName":"h2"},{"title":"Native Component​","type":1,"pageTitle":"[ReactNative] Core and Native Components","url":"/moco/frontend/reactnative/the-basics/rn-basics_rn-components/#native-component","content":" 移動平台的開發中, 不同平台有各自支援的原生開發工具與程式語言. 在 Android 中使用 Kotlin 或 Java 來編寫 UI View, 而 iOS 開發則是使用 Swift 或 Objective-C. 在 React Native 框架下, 則是使用 JavaScript 語言調用 React component 進行開發. 程式執行時, React Native 替這些 React component 創建對應的 Android / iOS / Web UI View.  實際上 React Native component 就是對 Platform native component 的一種封裝, 因此使用 React Native 開發的應用程式 UI / UX / Performance 和原生語言開發的程式幾乎一樣. 這類透過平台 UI Library 所支援 view 為 Native Component.  React Native 官方提供了許多基礎的 Native Component, 稱之為 Core Components. 透過這些核心元件, 已經可以開發多數應用程式所需 UI View 了.  除了官方提供的核心元件外, React Native 允許開發者開發與擴展屬於自己的 Native Component, 以滿足應用程式需求. 而相當活躍的 React Native 生態, 社群也發展貢獻了不少 Native Component, 收錄於 native.directory.  ","version":"Next","tagName":"h2"},{"title":"Core Component​","type":1,"pageTitle":"[ReactNative] Core and Native Components","url":"/moco/frontend/reactnative/the-basics/rn-basics_rn-components/#core-component","content":" React Native 有許多核心元件, 包括表單控制, 活動指示器... 等等. 依 React Native 版本不同可能有所差別, 可參考官方說明 Core Components and APIs.  以下是最常用的核心元件, 及在個平台對應的 Native UI Component 列表:  REACT NATIVE UI COMPONENT\tANDROID VIEW\tIOS VIEW\tWEB ANALOG&lt; View &gt;\t&lt; ViewGroup &gt;\t&lt; UIView &gt;\tA non-scrolling &lt; div &gt; &lt; Text &gt;\t&lt; TextView &gt;\t&lt; UITextView &gt;\t&lt; p &gt; &lt; Image &gt;\t&lt; ImageView &gt;\t&lt; UIImageView &gt;\t&lt; img &gt; &lt; ScrollView &gt;\t&lt; ScrollView &gt;\t&lt; UIScrollView &gt;\t&lt; div &gt; &lt; TextInput &gt;\t&lt; EditText &gt;\t&lt; UITextField &gt;\t&lt; input type=&quot;text&quot; &gt;  透過這些基礎元件, 即可完成一些基本 App 應用的開發.  Hello World import React from 'react'; import { View, Text, Image, ScrollView, TextInput } from 'react-native'; const App = () =&gt; { return ( &lt;ScrollView&gt; &lt;Text&gt;Some text&lt;/Text&gt; &lt;View&gt; &lt;Text&gt;Some more text&lt;/Text&gt; &lt;Image source={{ uri: 'https://reactnative.dev/docs/assets/p_cat2.png', }} style={{ width: 200, height: 200 }} /&gt; &lt;/View&gt; &lt;TextInput style={{ height: 40, borderColor: 'gray', borderWidth: 1 }} defaultValue=&quot;You can type in me&quot; /&gt; &lt;/ScrollView&gt; ); } export default App;   ","version":"Next","tagName":"h2"},{"title":"See Also​","type":1,"pageTitle":"[ReactNative] Core and Native Components","url":"/moco/frontend/reactnative/the-basics/rn-basics_rn-components/#see-also","content":" native.directory – An App Developers BlogCore Components and APIs ","version":"Next","tagName":"h2"},{"title":"Awesome Golang Resources","type":0,"sectionRef":"#","url":"/moco/golang/awesome/","content":"","keywords":"","version":"Next"},{"title":"Go.Dev​","type":1,"pageTitle":"Awesome Golang Resources","url":"/moco/golang/awesome/#godev","content":" Documentation - The Go Programming Language Get StartedA Tour of GoEffective GoGo Playground - The Go Programming Language  ","version":"Next","tagName":"h2"},{"title":"Guided learning journeys​","type":1,"pageTitle":"Awesome Golang Resources","url":"/moco/golang/awesome/#guided-learning-journeys","content":" Go by ExampleGo Web Examples - Learn Web Programming in Go by ExamplesHow To Code in Go | DigitalOceanBuilding an awesome CLI app in go – oscon 2017 | spf13  ","version":"Next","tagName":"h2"},{"title":"Community​","type":1,"pageTitle":"Awesome Golang Resources","url":"/moco/golang/awesome/#community","content":" Go 技术论坛 | Golang / Go 语言中国知识社区  ","version":"Next","tagName":"h2"},{"title":"See Also​","type":1,"pageTitle":"Awesome Golang Resources","url":"/moco/golang/awesome/#see-also","content":" GolangCode - A Library of Go Snippets ","version":"Next","tagName":"h2"},{"title":"[ReactNative] Setup CLI environment","type":0,"sectionRef":"#","url":"/moco/frontend/reactnative/env-setup/rn-env_rn-cli-mac/","content":"","keywords":"","version":"Next"},{"title":"React Native CLI​","type":1,"pageTitle":"[ReactNative] Setup CLI environment","url":"/moco/frontend/reactnative/env-setup/rn-env_rn-cli-mac/#react-native-cli","content":" React Native 專案需要引用不少相關套件, 雖然可以手動刻寫 package.json 等專案基礎項目, 但最方便還是直接使用 React Native 內建的命令列指令建立新專案.  關於 React Native 命令, 過往版本環境設置教學都是在本地端全局安裝 react-native-cli 套件. 而官方現在建議 npx react-native &lt;command&gt; 來進行 CLI 的相關操作. 若曾經安裝過 react-native-cli 命令列工具, 需先移除已避免衝突.npm uninstall -g react-native-cli  ","version":"Next","tagName":"h2"},{"title":"Create new application​","type":1,"pageTitle":"[ReactNative] Setup CLI environment","url":"/moco/frontend/reactnative/env-setup/rn-env_rn-cli-mac/#create-new-application","content":" 直接透過 npx 命令來建立 AwesomeProject 專案.  npx react-native init AwesomeProject   若要把 React Native 集成到既有的 App 項目, 流程完全不同.  ","version":"Next","tagName":"h3"},{"title":"Using a specific version or template​","type":1,"pageTitle":"[ReactNative] Setup CLI environment","url":"/moco/frontend/reactnative/env-setup/rn-env_rn-cli-mac/#using-a-specific-version-or-template","content":" init 預設會安裝最新版的 React Native 版本. 若要指名特定版本的 React Native, 在指令後面加上 --version 參數:  npx react-native init AwesomeProject --version X.XX.X   亦可使用 --template 來使用一些客製化專案樣板, 例如支援 TypeScript:  npx react-native init AwesomeTSProject --template react-native-template-typescript   ","version":"Next","tagName":"h3"},{"title":"Running your React Native application​","type":1,"pageTitle":"[ReactNative] Setup CLI environment","url":"/moco/frontend/reactnative/env-setup/rn-env_rn-cli-mac/#running-your-react-native-application","content":"  iOS App​ 在專案資料夾中執行 yarn ios 或 npx react-native run-ios cd AwesomeProject yarn ios # OR yarn react-native run-ios 這個指令會把 React Native 專案原生的部分進行編譯, 同時再另一個命令列起動 Metro 服務, 對 js code 的部分即時封裝打包. 編譯打包完成後, 就可以看到 iOS 模擬器自動開啟並執行 AwesomeProject 專案. 初次開啟專案完成編譯後, 開發期間保持 metro 視窗, 則 js 修改的項目可即時被打包載入. 日後再度開啟專案時, 若沒有修改 iOS 資料夾下的檔案, 可以使用 yarn start 以快速開啟專案. 而 iOS 資料夾中下的檔案若有更動, 則需再次執行 yarn ios 重新編譯原生項目. on iOS device​ iOS 專案項目腳本會自動在 iOS 模擬器中開啟專案, 可直接利用 iOS 模擬器中進行開發測試. 若要在裝置上執行, 另參考在 iOS 裝置執行. Prepare Android device​ 必須準備一價 Android 裝置來執行 React Native Android app. Android 裝置並不限使用實體手機, Android 模擬器或透過官方 AVD 建立虛擬裝置亦可. physical device​ 使用 Android 實體手機進行開發測試, 把 USB 連接手機和電腦, 跟著各手官方機說明, 打開開發者模式, 確認 ADB 可以正確識別裝飾即可. virtual device​ 在 Android Studio 中, 打開 AVD Manager 來選擇可用的虛擬裝置. 或創建一個新的虛擬裝置來進行開發. Create Virtual Device... &gt; 選擇喜歡的手機模版 (螢幕大小, dpi... 等) &gt;S API Level 31 &gt; Finish 即可. 虛擬裝置建立完成後可先行啟動一次, 讓裝置運行必要初始化設定. Android App​ 無論使用實體手機或使用虛擬裝置, 需確認 ADB 可以正確識別裝置, 才可進行開發測試. 執行 React Native Android app 和 iOS 類似, cd AwesomeProject yarn android # OR yarn react-native run-android 這時候會開始編譯專案, 編譯完成後會自動在測試裝置上執行專案 App. 第一次執行時, 需要下載大量相關套件依賴, 會花上好些時間. 編譯成功後, 除非版本更新等, 一般來書喔日後無須再下載了.   ","version":"Next","tagName":"h2"},{"title":"Modifying your app​","type":1,"pageTitle":"[ReactNative] Setup CLI environment","url":"/moco/frontend/reactnative/env-setup/rn-env_rn-cli-mac/#modifying-your-app","content":" 專案可以正確在模擬器上開啟後, 環境安裝就完成, 可以開始編輯開發 React Native App 了.  編輯 App.js 任何文字編輯器皆可.在模擬器上重新載入頁面. iOS ⌘-R / Android R 即可看到修改後的頁面.  ","version":"Next","tagName":"h2"},{"title":"Project src tree​","type":1,"pageTitle":"[ReactNative] Setup CLI environment","url":"/moco/frontend/reactnative/env-setup/rn-env_rn-cli-mac/#project-src-tree","content":" Project Structure . ├── App.js # App root component，所有JS code由這裡開始 ├── android/ # Android native project ├── app.json # React Native app config ├── index.js # App entry point ├── ios/ # iOS native project ├── node_modules/ # JS libraries ├── package.json # JS dependencies └── yarn.lock   ","version":"Next","tagName":"h3"},{"title":"That's it!​","type":1,"pageTitle":"[ReactNative] Setup CLI environment","url":"/moco/frontend/reactnative/env-setup/rn-env_rn-cli-mac/#thats-it","content":" Congratulations! You've successfully run and modified your first React Native app.  ","version":"Next","tagName":"h2"},{"title":"See Also​","type":1,"pageTitle":"[ReactNative] Setup CLI environment","url":"/moco/frontend/reactnative/env-setup/rn-env_rn-cli-mac/#see-also","content":" 接手的專案是 React Native 0.53 版本, 有些環境設置有所不同. 網路資訊因版本新舊設定步驟與說明略有出入, 本文在 React Native 0.69 時編寫.  Setting up the development environment |搭建开发环境 · React Native 中文网建置 React Native 開發環境 | 傑部落 JablogReact Native教學 Part 1 - 詳盡新手入門 - Carson's Tech Note ","version":"Next","tagName":"h2"},{"title":"[Go] Get started with Go","type":0,"sectionRef":"#","url":"/moco/golang/go_get-started/","content":"","keywords":"","version":"Next"},{"title":"Get started​","type":1,"pageTitle":"[Go] Get started with Go","url":"/moco/golang/go_get-started/#get-started","content":" ","version":"Next","tagName":"h2"},{"title":"Helo World​","type":1,"pageTitle":"[Go] Get started with Go","url":"/moco/golang/go_get-started/#helo-world","content":" // hello.go package main import &quot;fmt&quot; func main() { fmt.Println(&quot;hello world&quot;) }   Go CLI 執行的切入點 package main 和 func main(), 否則會報錯如下.  $ go run ./main.go package command-line-arguments is not a main package $ go run ./main.go # command-line-arguments runtime.main_main·f: function main is undeclared in the main package   ","version":"Next","tagName":"h3"},{"title":"External package​","type":1,"pageTitle":"[Go] Get started with Go","url":"/moco/golang/go_get-started/#external-package","content":"  $ go mod init example/hello go: creating new go.mod: module example/hello $ cat go.mod module example/hello go 1.18 package main import ( &quot;example/hello/foo&quot; &quot;fmt&quot; ) func main() { fmt.Println(foo.Foo()) } package foo func Foo() string { return &quot;this is foo package unfer hello&quot; } $ go run ./main.go this is foo func   relative path​  Go 同資料夾內所有檔案屬於相同 package, 若要拆成不同 package 必須放置不同資料夾. 在 Go Module 正式導入後, Go 不再支援相對路徑引用 package, package 需放在 Module 之下, 透過 Module 匯入. 直接夠過相對路徑匯入 package 會報錯如下:  $ go run ./main.go main.go:4:2: &quot;./foo&quot; is relative, but relative import paths are not supported in module mode   ","version":"Next","tagName":"h3"},{"title":"Environment​","type":1,"pageTitle":"[Go] Get started with Go","url":"/moco/golang/go_get-started/#environment","content":" ","version":"Next","tagName":"h2"},{"title":"GOPATH​","type":1,"pageTitle":"[Go] Get started with Go","url":"/moco/golang/go_get-started/#gopath","content":" ...TBD...  ","version":"Next","tagName":"h3"},{"title":"IDE Setting​","type":1,"pageTitle":"[Go] Get started with Go","url":"/moco/golang/go_get-started/#ide-setting","content":" ","version":"Next","tagName":"h2"},{"title":"Goland​","type":1,"pageTitle":"[Go] Get started with Go","url":"/moco/golang/go_get-started/#goland","content":" ...TBD...  ","version":"Next","tagName":"h3"},{"title":"VS Code​","type":1,"pageTitle":"[Go] Get started with Go","url":"/moco/golang/go_get-started/#vs-code","content":" ...TBD...  ","version":"Next","tagName":"h3"},{"title":"小結​","type":1,"pageTitle":"[Go] Get started with Go","url":"/moco/golang/go_get-started/#小結","content":" 從頭開始了解語言有個明顯好處. 過去在公司開發維護專案時, 有時會太過於 follow 專案 SOP, 以及相關 Scripts, 即使這些 SOP scripts 是自己編寫維護, 但長期下來有些腳本內容僅為了解決當下問題而修改, 忽略了語言背後基礎的規範等. 而自己過於習慣使用這些腳本, 也忘了如何 From scratch.  重新了解語言基礎規範後, 也許日後要再製作 SCP scripts, 會更清楚自己在做些什麼, 清楚必要與不必要, 寫出更完善的 SOP scripts.  ","version":"Next","tagName":"h2"},{"title":"See Also​","type":1,"pageTitle":"[Go] Get started with Go","url":"/moco/golang/go_get-started/#see-also","content":" ","version":"Next","tagName":"h2"},{"title":"Get Started​","type":1,"pageTitle":"[Go] Get started with Go","url":"/moco/golang/go_get-started/#get-started-1","content":" Tutorial: Get started with Go - The Go Programming Language  ","version":"Next","tagName":"h3"},{"title":"Module​","type":1,"pageTitle":"[Go] Get started with Go","url":"/moco/golang/go_get-started/#module","content":" Go語言重新開始，Go Modules 的前世今生與基本使用 | IT人go modules 終於不會再被GOPATH綁死了 - iT 邦幫忙::一起幫忙解決難題，拯救 IT 人的一天【Golang】還在把 library 放在專案裡？該跟上使用 Go Module 了！ | by Zam Huang | Medium ","version":"Next","tagName":"h3"},{"title":"[Go] Tour: Closure 心得筆記","type":0,"sectionRef":"#","url":"/moco/golang/go-tour/go-tour_closure/","content":"","keywords":"","version":"Next"},{"title":"匿名函數 Anonymous functions​","type":1,"pageTitle":"[Go] Tour: Closure 心得筆記","url":"/moco/golang/go-tour/go-tour_closure/#匿名函數-anonymous-functions","content":" 匿名函式指不需要定義函式名的一種函式實現方式. 近期熱門的語言中, JavaScript 中很常見匿名函式, 如: 傳統的 callback function, lambda 都是匿名函式的一種.  type Predicate = func(int) bool func filter(origin []int, predicate Predicate) []int { filtered := []int{} for _, elem := range origin { if predicate(elem) { filtered = append(filtered, elem) } } return filtered } func main() { data := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10} fmt.Println(filter(data, func(elem int) bool { return elem &gt; 5 })) fmt.Println(filter(data, func(elem int) bool { return elem &lt;= 6 })) }   這段函式和 callback function 類似，傳遞匿名函式給 filter. 可以看到在 golang 裡，可用 func 建立匿名函式. 和一般函式一樣, 必須指定參數和回傳值.  golang 無法在函式中宣告另一個函式，但可建立匿名函式後指定給某個變數. 此變數將如同一般變數一樣, 非但可以當作參數來傳遞, 也可以當成返回值.  func funcA() func(int) int { x := 10 a := func(n int) int { return x + n } return a } func main() { fmt.Println(funcA()(2)) // 12 }   在上面的範例中, 執行 funcA 會傳回一個函式. 這個傳回的函式會將接受的引數指定給參數 n, 並與 x 的值進行相加, 因此最後顯示結果為 12.  ","version":"Next","tagName":"h2"},{"title":"閉包 Closure​","type":1,"pageTitle":"[Go] Tour: Closure 心得筆記","url":"/moco/golang/go-tour/go-tour_closure/#閉包-closure","content":" 可以在函式中建立匿名函式, 引發了一個有趣的事實, 先來看個例子:  type Consumer = func(int) func forEach(elems []int, consumer Consumer) { for _, elem := range elems { consumer(elem) } } func main() { numbers := []int{1, 2, 3, 4, 5} sum := 0 forEach(numbers, func(elem int) { sum += elem }) fmt.Println(sum) // 15 }   呼叫 forEach 函式時, sum 變數被包入匿名函式中傳遞. 而在執行 forEach 迴圈時的過程, 每次呼叫傳入的匿名函式, 就會更改 sum 的值. 因此最後得到加總的值 15.  實際上, 使用 forEach 函式的範例中, 建立了一個閉包. 閉包本質上就是一個匿名函式, sum 變數被閉包包覆, 讓 sum 變數可以存活於閉包的範疇中.  ","version":"Next","tagName":"h2"},{"title":"何謂閉包？​","type":1,"pageTitle":"[Go] Tour: Closure 心得筆記","url":"/moco/golang/go-tour/go-tour_closure/#何謂閉包","content":" WIKI： In programming languages, closures (also lexical closures or function closures) are techniques for implementing lexically scoped name binding in languages with first-class functions. A closure is a function value that references variables from outside its body.  閉包將變數本身關閉在自己的範疇中, 而不是變數的值. 因此閉包能夠讀取其他函式內部變數. 看一下 Go by Example: Closures 中的範例:  func intSeq() func() int { i := 0 return func() int { i++ return i } } func main() { nextInt := intSeq() fmt.Println(nextInt()) fmt.Println(nextInt()) fmt.Println(nextInt()) newInts := intSeq() fmt.Println(newInts()) }   $ go run closures.go 1 2 3 1   呼叫 intSeq() 時會回傳一個匿名函式, 建立函式時同時會保存所使用的變數. 閉包內的變數不會因執行結束而消失, 會持續保存著. 閉包函式被呼叫時, 會使用自身保存的變數來進行相對運算.  而在該閉包函式中的變數, 只能透過對應的匿名函式存取, 無法透過其他方式存取. 一定程度下確保了閉包變數的安全性.  再次呼叫 intSeq() 時會建立新的閉包, 相關變數和先前的閉包彼此獨立.  ","version":"Next","tagName":"h3"},{"title":"閉包變數存取​","type":1,"pageTitle":"[Go] Tour: Closure 心得筆記","url":"/moco/golang/go-tour/go-tour_closure/#閉包變數存取","content":" type Getter = func() int type Setter = func(int) func x_getter_setter(x int) (Getter, Setter) { fmt.Printf(&quot;the parameter :_x (%p) = %d\\n&quot;, &amp;x, x) getter := func() int { fmt.Printf(&quot;getter invoked:_x (%p) = %d\\n&quot;, &amp;x, x) return x } setter := func(n int) { x = n fmt.Printf(&quot;setter invoked:_x (%p) = %d\\n&quot;, &amp;x, x) } return getter, setter } func main() { getX, setX := x_getter_setter(10) getX1, setX1 = x_getter_setter(10) fmt.Println(&quot;x = &quot;, getX()) setX(20) fmt.Println(&quot;x = &quot;, getX()) fmt.Println(&quot;x1 = &quot;, getX1()) }   10 20 10   這個範例中, getX 和 setX 兩個閉包函式是在同次 x_getter_setter 呼叫時所建立的匿名函式. 所存取到的 x 為相同的變數, 因此 setX() 修改後的 x 可被 getX() 讀取. 而 getX 和 getX1 不是同次呼叫 x_getter_setter 建立的閉包函式, 有各自的 x 變數, 彼此獨立無法相互修改.  ","version":"Next","tagName":"h3"},{"title":"Example: fibonacci​","type":1,"pageTitle":"[Go] Tour: Closure 心得筆記","url":"/moco/golang/go-tour/go-tour_closure/#example-fibonacci","content":" func fibonacci() func() int { x, y := 0, 1 return func() int { result := x x, y = y, x+y return result } } func main() { f := fibonacci() for i := 0; i &lt; 10; i++ { fmt.Println(f()) } }   上面範例是 A Tour of Go 中的 fibonacci 練習題. 呼叫 fibonacci() 時會建立匿名函式, 該匿名函式可以存取 x, y 的值. 重複呼叫閉包函式, 可透過 x, y 的變化, 完成費氏數列的產出.  ","version":"Next","tagName":"h3"},{"title":"See Also​","type":1,"pageTitle":"[Go] Tour: Closure 心得筆記","url":"/moco/golang/go-tour/go-tour_closure/#see-also","content":" What is a Closure? - Calhoun.io 5 Useful Ways to Use Closures in Go Gotchas and Common Mistakes with Closures in Go匿名函式與閉包 - openhome.ccGo by Example: ClosuresClosure in Golang - 簡書 ","version":"Next","tagName":"h2"},{"title":"go-std-lib_strconv","type":0,"sectionRef":"#","url":"/moco/golang/package/go-std-lib_strconv/","content":"go-std-lib_strconv","keywords":"","version":"Next"},{"title":"[Go] Tour: Goroutine 和 Channel 心得筆記","type":0,"sectionRef":"#","url":"/moco/golang/go-tour/go-tour_channel/","content":"","keywords":"","version":"Next"},{"title":"Channel 介紹​","type":1,"pageTitle":"[Go] Tour: Goroutine 和 Channel 心得筆記","url":"/moco/golang/go-tour/go-tour_channel/#channel-介紹","content":" 前篇藉由兩個在多執行緒中重要的議題: 等待及變數共享, 帶出 Channel 強大的處理能力, 接著深入了解 Channel.  Channel 可以想成一條管線, 這條管線可以寫入數值, 也可以將數值讀取出來.  建立 Channel  ch := make(chan int) // 建立 int 型別的 Channel   推入 / 拉出 Channel 內的值, 使用 &lt;- 箭頭運算子:  Channel 在 &lt;- 左邊：將箭頭右邊的數值推入 Channel 中  ch &lt;- v // Send v to channel ch. v := &lt;-ch // Receive from ch, and assign value to v.   ","version":"Next","tagName":"h2"},{"title":"Channel 的阻塞​","type":1,"pageTitle":"[Go] Tour: Goroutine 和 Channel 心得筆記","url":"/moco/golang/go-tour/go-tour_channel/#channel-的阻塞","content":" Channel 會等待至另一端完成推入 / 拉出的動作後才會繼續往下處理, 這樣的特性使其可以在 Goroutines 間同步的處理資料, 可以不使用明確的 mutex.Lock, mutex.Unlock 等方法.  而 Channel 什麼情況下會阻塞呢? 一般來說, Goroutine 使用 Channel 時有兩種情況會造成阻塞:  將資料寫入 Channel 後, 寫入資料的 Goroutine 會等待 Channel 資料被其他 Goroutine 拉取後才能繼續執行.若當 Channel 中沒有資料, 但要從中讀取時, 讀取資料的 Goroutine 會等待其他 Goroutine 寫入資料, 並等候自己拉取完成才能往下執行.  ","version":"Next","tagName":"h3"},{"title":"寫入資料到 Channel 時的等待情境​","type":1,"pageTitle":"[Go] Tour: Goroutine 和 Channel 心得筆記","url":"/moco/golang/go-tour/go-tour_channel/#寫入資料到-channel-時的等待情境","content":" func main() { ch := make(chan string) go func() { // calculate goroutine fmt.Println(&quot;calculate goroutine starts calculating&quot;) time.Sleep(time.Second) // Heavy calculation fmt.Println(&quot;calculate goroutine ends calculating&quot;) ch &lt;- &quot;FINISH&quot; // goroutine 執行會在此被迫等待 fmt.Println(&quot;calculate goroutine finished&quot;) }() time.Sleep(2 * time.Second) // 使 main 比 goroutine 慢 fmt.Println(&lt;-ch) time.Sleep(time.Second) fmt.Println(&quot;main goroutine finished&quot;) }   calculate goroutine starts calculating calculate goroutine ends calculating FINISH calculate goroutine finished main goroutine finished   此例使用 time.Sleep 強迫 main 執行慢於 calculate, 現在來觀察輸出的結果:  calculate 會先執行並且計算完成calculate 將 FINISH 訊號推入 Channel但由於目前 main 還未拉取 Channel 中的資料, 所以 calculate 會被迫等待. 因此 calculate 的最後一行 fmt.Println(&quot;main goroutine finished&quot;) 沒有馬上輸出在畫面上main 拉取了 Channel 中的資料calculate 執行 fmt.Println(&quot;main goroutine finished&quot;) 並結束main 執行完成  ","version":"Next","tagName":"h3"},{"title":"從 Channel 讀取資料時的等待情境​","type":1,"pageTitle":"[Go] Tour: Goroutine 和 Channel 心得筆記","url":"/moco/golang/go-tour/go-tour_channel/#從-channel-讀取資料時的等待情境","content":" func main() { ch := make(chan string) go func() { // calculate goroutine fmt.Println(&quot;calculate goroutine starts calculating&quot;) time.Sleep(time.Second) // Heavy calculation fmt.Println(&quot;calculate goroutine ends calculating&quot;) ch &lt;- &quot;FINISH&quot; // goroutine 執行會在此被迫等待 fmt.Println(&quot;calculate goroutine finished&quot;) }() //time.Sleep(2 * time.Second) // 使 main 比 goroutine 慢 fmt.Println(&lt;-ch) time.Sleep(time.Second) fmt.Println(&quot;main goroutine finished&quot;) }   calculate goroutine starts calculating calculate goroutine ends calculating calculate goroutine finished FINISH main goroutine finished   這例子中把 main 中的 time.Sleep(2 * time.Second) 註解掉.  main 讀取資料時, calculate 還沒將資料推入 Channel 中, main 需要等待. 因此 main 的最後一行 fmt.println 沒有馬上輸出在畫面上calculate 執行並且計算完成calculate 將 FINISH 推入 Channelcalculate 執行完成main 拉取了 Channel 中的資料並且執行完成  ","version":"Next","tagName":"h3"},{"title":"Unbuffered Channel​","type":1,"pageTitle":"[Go] Tour: Goroutine 和 Channel 心得筆記","url":"/moco/golang/go-tour/go-tour_channel/#unbuffered-channel","content":" 前面所說的 Channel 阻塞情況都是屬於 Unbuffered Channel, 此種 Channel 只要  寫入一個資料會造成寫入方的等待讀取時沒有資料會造成讀取時的等待  Unbuffered Channel 的問題是: 如果寫方執行時間較讀取方短, 寫入資料後會造成寫入方被迫等待資料讀取後才能繼續處理, 如果寫入資料後續的程式無須等候資料被讀取可以正確執行執行, 這樣的等待是不必要且可以被避免的.  為了解決寫入時等待問題, 可以使用另一種 Channel: Buffered Channel.  ","version":"Next","tagName":"h3"},{"title":"Buffered Channel​","type":1,"pageTitle":"[Go] Tour: Goroutine 和 Channel 心得筆記","url":"/moco/golang/go-tour/go-tour_channel/#buffered-channel","content":" ch := make(chan int, 100)   Buffered Channel 的宣告需在第二個參數中定義 buffer 的長度, 它只會讓 Buffered 中資料填滿以後才會阻塞寫入造成等待.  以上例來說: 第 101 個資料推入的時候, 推入方的 Goroutine 才會等待.  下面例子分別使用 Buffered Channel 跟 Unbuffered Channel 的差別:  func main() { ch := make(chan int) ch &lt;- 1 // 等到天荒地老 fmt.Println(&lt;-ch) }   fatal error: all goroutines are asleep - deadlock! goroutine 1 [chan send]: main.main() /tmp/sandbox3906241671/prog.go:11 +0x37 Program exited.   上例使用 Unbuffered Channel:  只有一條 Goroutine: main推入 1 後因為還沒有其他 Goroutine 拉取 Channel 中的資料, 所以進入阻塞狀態.因為 main 已經在推入資料時阻塞, 拉取的程式永遠不會被執行, 造成死結.  在相同的情況下，Buffered Channel 並不會被阻塞：  func main() { ch := make(chan int, 1) ch &lt;- 1 fmt.Println(&lt;-ch) }   1   原因是:  推入 1 後 Channel 內的資料數為1並沒有超過 Buffer 的長度1, 所以不會被阻塞.因為沒有阻塞, 下一行拉取的程式碼可以被執行, 並完成執行.  ","version":"Next","tagName":"h2"},{"title":"Buffer size​","type":1,"pageTitle":"[Go] Tour: Goroutine 和 Channel 心得筆記","url":"/moco/golang/go-tour/go-tour_channel/#buffer-size","content":" func main() { ch := make(chan int, 5) for i:=0 ; i &lt; 6; i++ { ch &lt;- i fmt.Println(i) } fmt.Println('FINISH') }   0 1 2 3 4 fatal error: all goroutines are asleep - deadlock! goroutine 1 [chan send]:   建立一個 Buffer 長度 5 筆資料的 Channel寫入前五筆資料時不會阻塞, 寫入第六筆資料時, 因 Buffer 已滿, 造成寫入資料阻塞.因沒有其他 Goroutine 在執行, 所以寫入阻塞造成 deadlock. 程式錯誤.  func main() { ch := make(chan int, 5) go func() { fmt.Println(&quot;Read data Goroutine&quot;) fmt.Println(&quot;Read i:&quot;, &lt;-ch) }() for i := 0; i &lt; 6; i++ { ch &lt;- i fmt.Println(i) } fmt.Println(&quot;FINISH. current first data on buffer is: &quot;, &lt;- ch) }   0 1 2 3 4 Read data Goroutine Read i: 0 5 FINISH. current first data on buffer is: 1   承前例. 寫入前五筆資料時不會阻塞, 而寫入第六筆資料時造成 main 阻塞.程式執行讀取資料的 Goroutine. Buffer 第一筆資料被拉取, 所以 Buffer 空出一筆資料可以推入.main 推入第六筆資料, 程式正確結束. 此時 Channel 第一筆資料為 1  ","version":"Next","tagName":"h3"},{"title":"Close channel​","type":1,"pageTitle":"[Go] Tour: Goroutine 和 Channel 心得筆記","url":"/moco/golang/go-tour/go-tour_channel/#close-channel","content":" 從 Channel 拉取資料時, 可以藉由第二個回傳值確認 Channel 是否被關閉, 常會在迴圈中使用. 如果被關閉的話代表此 Channel 已經不再使用, 可以結束迴圈.  func main() { c := make(chan int) go func() { for i := 0; i &lt; 10; i++ { fmt.Println(&quot;push i:&quot;, i) c &lt;- i } close(c) // 關閉 Channel }() for { v, ok := &lt;-c if !ok { // 判斷 Channel 是否關閉 break } fmt.Println(&quot;read i:&quot;, v) } }   0 1 2 3 4 5 6 7 8 9   如果對 Closed Channel 推入資料的話會造成 Panic：  func main() { c := make(chan int) close(c) c &lt;- 0 // Panic!!! }   panic: send on closed channel   為了避免將資料推入已關閉的 Channel 中造成 Panic, Channel 的關閉應該由推入的 Goroutine 處理.  ","version":"Next","tagName":"h2"},{"title":"使用 range 巡訪 channel​","type":1,"pageTitle":"[Go] Tour: Goroutine 和 Channel 心得筆記","url":"/moco/golang/go-tour/go-tour_channel/#使用-range-巡訪-channel","content":" 在迴圈中拉取 Channel 中的資料, 除了可以用第二回傳值判斷 Channel 是否關閉,range 也是可以巡覽 Channel 的. 終止條件為 Channel 的狀態為已關閉的.  func main() { c := make(chan int) go func() { for i := 0; i &lt; 5; i++ { fmt.Println(&quot;push i:&quot;, i) c &lt;- i } close(c) // 關閉 Channel }() for i := range c { // 在 close 後跳出迴圈 fmt.Println(&quot;read i:&quot;, i) } }   push i: 0 push i: 1 read i: 0 read i: 1 push i: 2 push i: 3 read i: 2 read i: 3 push i: 4 read i: 4   使用 range 來巡訪 Channel 資料時, 同樣會造成讀取資料和推入資料的阻塞. 如上, 對於 Unbuddered Channel 寫入和讀取資料, push 和 read 兩個 Goroutine 會相互阻塞, 可能影響效能.  可搭配 Buffered Channel 使用, 適當情況下會減少阻塞, 提升效能.  func main() { c := make(chan int, 5) go func() { for i := 0; i &lt; 8; i++ { fmt.Println(&quot;push i:&quot;, i) c &lt;- i } close(c) // 關閉 Channel }() for i := range c { // 在 close 後跳出迴圈 fmt.Println(&quot;read i:&quot;, i) } }   push i: 0 push i: 1 push i: 2 push i: 3 push i: 4 push i: 5 push i: 6 read i: 0 read i: 1 read i: 2 read i: 3 read i: 4 read i: 5 read i: 6 push i: 7 read i: 7   另外要注意的是, range 結束條件和 buffer size 無關, 上例中 buffer size 為 5 的 Channel, 透過 range 仍可讀出 8 筆資料.range 結束僅以 channel close 為準.  ","version":"Next","tagName":"h3"},{"title":"Select​","type":1,"pageTitle":"[Go] Tour: Goroutine 和 Channel 心得筆記","url":"/moco/golang/go-tour/go-tour_channel/#select","content":" 在 Channel 推入/拉取時, 因 Channel 阻塞的特性, 會有一段等待的時間而造成 Goroutine 無法回應. 如果此 Goroutine 是負責處理畫面的, 使用者就會看到畫面 lag 的情況, 這是我們不想見的情況.  例如之前提到的例子:  func main() { ch := make(chan string) go func() { fmt.Println(&quot;calculate goroutine starts calculating&quot;) time.Sleep(time.Second) // Heavy calculation fmt.Println(&quot;calculate goroutine ends calculating&quot;) ch &lt;- &quot;FINISH&quot; fmt.Println(&quot;calculate goroutine finished&quot;) }() fmt.Println(&quot;main goroutine is waiting for channel to receive value&quot;) fmt.Println(&lt;-ch) // goroutine 執行會在此被迫等待 fmt.Println(&quot;main goroutine finished&quot;) }   main goroutine is waiting for channel to receive value # main goroutine 阻塞 calculate goroutine starts calculating calculate goroutine ends calculating calculate goroutine finished FINISH # main goroutine 解除阻塞 main goroutine finished   main goroutine 要拉取 ch 的資料時會被迫等待. 這時無法回饋目前的狀態給使用者, 造成卡頓.  這時可以使用 Go 提供的 select 語法, 讓開發者可以很輕鬆的處理 Channel 的多種情況, 包括阻塞時的處理.  func main() { ch := make(chan string) go func() { fmt.Println(&quot;calculate goroutine starts calculating&quot;) time.Sleep(time.Second) // Heavy calculation fmt.Println(&quot;calculate goroutine ends calculating&quot;) ch &lt;- &quot;FINISH&quot; time.Sleep(time.Second) fmt.Println(&quot;calculate goroutine finished&quot;) }() for { select { case &lt;-ch: // Channel 中有資料執行此區域 fmt.Println(&quot;main goroutine finished&quot;) return default: // Channel 阻塞的話執行此區域 fmt.Println(&quot;WAITING...&quot;) time.Sleep(500 * time.Millisecond) } } }   WAITING... # main goroutine 在阻塞時可以回應 calculate goroutine starts calculating WAITING... # main goroutine 在阻塞時可以回應 WAITING... # main goroutine 在阻塞時可以回應 calculate goroutine ends calculating main goroutine finished # main goroutine 解除阻塞並結束程式   將剛剛的例子改為 select 來處理, 可以使 Channel 的推入/拉取不會阻塞:  會在沒有阻塞的情況下才會執行對應的區塊case &lt;-ch: 會等到沒有阻塞情況時 (ch 內有資料) 才會執行default: 在所有的 case 都阻塞的情況下執行  因為有 default 可以設置, 當 Channel 阻塞時也可以藉由 default 輸出資訊讓使用者知道.  ","version":"Next","tagName":"h2"},{"title":"小結​","type":1,"pageTitle":"[Go] Tour: Goroutine 和 Channel 心得筆記","url":"/moco/golang/go-tour/go-tour_channel/#小結","content":" Channel 是 Goroutine 的好幫手, 前篇善用 Channel 的阻塞特性, 可以用來管理 Goroutine 共用變數存取等控制.  本篇說明 Channel 的阻塞時機 (推入阻塞及拉取阻塞), 以及 Unbuffered 及 Buffered Channel 對阻塞的差別. 則可藉由 Unbuffered Channel 降低效能上的損失.  Channel 傳回的第二個參數: ok, 可以判斷此 Channel 是否已經關閉, 並被 range 用在結束巡覽的判斷中.  最後, select 可以 Channel 在阻塞時讓 Goroutine 保持非阻塞的狀態避免卡頓.  藉由 Goroutine 及 Channel 簡單的語法但是強大的能力使工程師開發多工程式的時候可以寫出優雅又易於維護的代碼, 是 Go 語言的優勢之一  ","version":"Next","tagName":"h2"},{"title":"See Also​","type":1,"pageTitle":"[Go] Tour: Goroutine 和 Channel 心得筆記","url":"/moco/golang/go-tour/go-tour_channel/#see-also","content":" Go 的並發：Goroutine 與 Channel 介紹 - Limitless PingChannel 與Goroutine - Golang 筆記使用 Go Channel 及 Goroutine 時機 - 小惡魔 - AppleBOY[Golang] goroutines, channels, and concurrencyGoroutine和channel的详细理解（一） - 精彩每一天 ","version":"Next","tagName":"h2"},{"title":"go-std-lib_strings","type":0,"sectionRef":"#","url":"/moco/golang/package/go-std-lib_strings/","content":"go-std-lib_strings","keywords":"","version":"Next"},{"title":"[Go] Tour: Goroutine 心得筆記","type":0,"sectionRef":"#","url":"/moco/golang/go-tour/go-tour_goroutine/","content":"","keywords":"","version":"Next"},{"title":"Threading​","type":1,"pageTitle":"[Go] Tour: Goroutine 心得筆記","url":"/moco/golang/go-tour/go-tour_goroutine/#threading","content":" 先來了解執行緒. 單執行緒情況下, 程式碼會依序執行.  func say(s string) { for i := 0; i &lt; 5; i++ { time.Sleep(100 * time.Millisecond) fmt.Println(s) } } func main() { begin := time.Now() say(&quot;world&quot;) say(&quot;hello&quot;) diff := time.Now().Sub(begin) fmt.Printf(&quot;spent %d ms&quot;, diff.Milliseconds()) }   world world world world world hello hello hello hello hello spent 1000 ms   這個例子中, 會先執行完 say(&quot;world&quot;) 才執行 say(&quot;hello&quot;).  有時程式中個別函式之間並無先後順序關係, 若可以善用多執行緒執行, 則可大幅提升執行效率. 一般來說, Go 多執行緒最多可以同時執行和 CPU 數量相等的 Goroutine.  func say(s string) { for i := 0; i &lt; 5; i++ { time.Sleep(100 * time.Millisecond) fmt.Println(s) } } func main() { begin := time.Now() go say(&quot;world&quot;) say(&quot;hello&quot;) diff := time.Now().Sub(begin) fmt.Printf(&quot;spent %d ms&quot;, diff.Milliseconds()) }   world hello world hello hello world world hello hello spent 500 ms   say(&quot;world&quot;) 會在另一個執行緒 (Goroutine) 上, 和 main 程序同時執行.  ","version":"Next","tagName":"h2"},{"title":"Goroutine 介紹​","type":1,"pageTitle":"[Go] Tour: Goroutine 心得筆記","url":"/moco/golang/go-tour/go-tour_goroutine/#goroutine-介紹","content":" Goroutine 類似 golang 的 thread, 讓 Go 可以多工處理, main function 本身就是一個 Goroutine, 常見會和 Channel 搭配協同工作, 可以簡化 Goroutine 操作.  建立一個 Goroutine 就等於建立一個新執行緒. 建立 Goroutine 相當簡單, 僅需在函式呼叫前加 go 前綴聲明即可.  go f(x, y, z)   ","version":"Next","tagName":"h2"},{"title":"LifeCycle​","type":1,"pageTitle":"[Go] Tour: Goroutine 心得筆記","url":"/moco/golang/go-tour/go-tour_goroutine/#lifecycle","content":" 在 golang 中, 當 main Goroutine 結束後, 其他 Goroutine 都會強制結束. 因此 Goroutine 生命週期從被建立時開始, 到函式執行結束返回或 main Goroutine 結束時一起結束.  func say(s string) { for i := 0; i &lt; 5; i++ { time.Sleep(100 * time.Millisecond) fmt.Println(s) } } func main() { begin := time.Now() go say(&quot;world&quot;) go say(&quot;hello&quot;) time.Sleep(200 * time.Millisecond) diff := time.Now().Sub(begin) fmt.Printf(&quot;spent %d ms&quot;, diff.Milliseconds()) }   world hello world spent 200 ms   這段程式共有 main, say(&quot;world&quot;), say(&quot;hello&quot;) 三個 Goroutine. main Goroutune 僅需花費 200ms, 少於其他兩個 say Goroutine, 當 main 結束時, 另外兩個 Goroutine 會跟著強制停止.  用 time.Sleep 雖然可以延後 main 結束時間, 讓其他 Goroutine 有機會執行完成. 但若 sleep 時間太短, 仍無法讓其他 Goroutine 完成. 而如果 sleep 時間太長, 則會影響程式效率. 除非程式執行時間有所限制, 否則用 time.Sleep 來等候 Goroutine 並非好方法.  ","version":"Next","tagName":"h2"},{"title":"等候 Goroutine​","type":1,"pageTitle":"[Go] Tour: Goroutine 心得筆記","url":"/moco/golang/go-tour/go-tour_goroutine/#等候-goroutine","content":" 若程式必須等候所有 Goroutine 執行完畢, 透過 sleep 等候是不可靠的. Go 裡面的常見等候方式有 sync.WaitGroup 或 channel.  ","version":"Next","tagName":"h2"},{"title":"sync.WaitGroup​","type":1,"pageTitle":"[Go] Tour: Goroutine 心得筆記","url":"/moco/golang/go-tour/go-tour_goroutine/#syncwaitgroup","content":" Package sync provides basic synchronization primitives such as mutual exclusion locks. Other than the Once and WaitGroup types, most are intended for use by low-level library routines. Higher-level synchronization is better done via channels and communication.  Go 內建 sync 套件可以管理多個 Goroutine 之間的執行狀態. 在上面例子中, 若程式需等候所有 Goroutine 執行結束後才能結束, 可使用 sync.WaitGroup.  func say(s string, wg *sync.WaitGroup) { defer wg.Done() for i := 0; i &lt; 5; i++ { time.Sleep(100 * time.Millisecond) fmt.Println(s) } } func main() { wg := new(sync.WaitGroup) wg.Add(2) go say(&quot;world&quot;, wg) go say(&quot;hello&quot;, wg) wg.Wait() }   建立和需要等候的 Goroutine 數量相同的 WaitGroup counter.將 WaitGroup 傳入 Goroutine 中, 在函式執行結束時呼叫 wg.Done() 將 counter 減一. 常見會在函式最前面使用 defer wg.Done(), 以確保 Goroutine 結束時 wg.Done() 會被執行.wg.Wait() 會等候到 counter 為零為止.  WaitGroup 使用上相對簡單, 但要注意手動配置數量符合的 counter.  ","version":"Next","tagName":"h3"},{"title":"channel​","type":1,"pageTitle":"[Go] Tour: Goroutine 心得筆記","url":"/moco/golang/go-tour/go-tour_goroutine/#channel","content":" channel 通常拿來做 Goroutine 之間溝通訊息時使用, 但因其阻塞特性, 亦可拿來當作等候 Goroutine 的方法.  func say(s string, c chan string) { for i := 0; i &lt; 5; i++ { time.Sleep(100 * time.Millisecond) fmt.Println(s) } c &lt;- &quot;FINISH&quot; } func main() { ch := make(chan string) go say(&quot;world&quot;, ch) go say(&quot;hello&quot;, ch) &lt;-ch &lt;-ch }   建立了一個 channel 用以溝通訊息.建立了 say() Goroutine, 傳入 channel.main 函式中等候 channel 的資料, 此時若 channel 裡面沒有資料, 會阻塞程式執行. 直到某個 Goroutine 執行到 c &lt;- &quot;FINISH&quot; 時才會繼續執行.本例中建立了兩個 Goroutine, 所以需要讀取兩次 channel 資料.  Channel 阻塞的方法為 Go 語言中等待的主要方式.  要注意的是, Goroutine 常會和 Channel 搭配做訊息溝通, 若傳入的 Channel 會拿來溝通訊息, 同時也當作阻塞等待的話, 需要注意傳回值的判斷等.  ","version":"Next","tagName":"h3"},{"title":"共享變數​","type":1,"pageTitle":"[Go] Tour: Goroutine 心得筆記","url":"/moco/golang/go-tour/go-tour_goroutine/#共享變數","content":" 多執行緒下使用相同變數時, 要特別注意競爭問題.  func main() { total := 0 for i := 0; i &lt; 1000; i++ { go func() { total++ }() } time.Sleep(time.Second) fmt.Println(total) }   981   在 for 迴圈中建立的閉包參照了同一個 total 變數. 多執行緒情況下, 可能導致實際運行狀況如下:  假設此時 total 值為 70goroutine1 讀取 total (70), 運算 total++ = 71goroutine2 讀取 total (70), 運算 total++ = 71goroutine2 寫回 total 值 71goroutine1 寫回 total 值 71  goroutine1 和 goroutine2 同時進行加法運算, 並先後將計算後的值寫回記憶過, 可能導致運算錯誤. 在多個 goroutine 裡對同一個變數 total 做加法運算, 在賦值時無法確保其為安全的而導致運算錯誤, 此問題稱為 Race Condition.  在執行緒間使用同樣的變數時, 最重要的是確保變數在當前的正確性. Go 裡面有幾個常見方法:  ","version":"Next","tagName":"h2"},{"title":"sync.Mutex (互斥鎖)​","type":1,"pageTitle":"[Go] Tour: Goroutine 心得筆記","url":"/moco/golang/go-tour/go-tour_goroutine/#syncmutex-互斥鎖","content":" sync.Mutex (互斥鎖) 是 sync 套件中用以確保 critical section 正確性的工具物件. 互斥鎖提供兩個方法:  LockUnlock 在 Lock 及 Unlock 中間, 會使其他的 Goroutine 等待, 確保此區塊中的變數安全.  sync.Mutex 相當簡易好用, 宣告變數後, 在要需保護的程式區段前後分別加上 Lock / Unlock 即可. 如下:  func main() { total := 0 mux := sync.Mutex{} for i := 0; i &lt; 1000; i++ { go func() { mux.Lock() total++ mux.Unlock() }() } time.Sleep(time.Second) mux.Lock() fmt.Println(total) mux.Unlock() }   ","version":"Next","tagName":"h3"},{"title":"藉由 Channel 保證變數的安全性​","type":1,"pageTitle":"[Go] Tour: Goroutine 心得筆記","url":"/moco/golang/go-tour/go-tour_goroutine/#藉由-channel-保證變數的安全性","content":" 因為 Channel 推入及拉出時阻塞與等待的特性, 也可以把共享變數存入 Channel 之中, 拉出來做計算的值會保證是安全的.  func main() { total := 0 ch := make(chan int, 1) ch &lt;- total for i := 0; i &lt; 1000; i++ { go func() { ch &lt;- &lt;-ch + 1 }() } time.Sleep(time.Second) fmt.Println(&lt;-ch) }   將 total 資料寫入 Channel 之中.goroutine1 從 Channel 中讀取資料進行運算.goroutine2 要從 Channel 讀資料時, 因 Channel 中已無資料, 需等候.goroutine1 把運算結果寫回 Channel.goroutine2 等到 Channel 中有資料, 拉出後結束等待, 繼續做運算....  Channel 阻塞的特性, 搭配 Goroutine 可以用來作流程管控等功能. 但 Channel 還有其他特性, 拿 Channel 當作溝通資料之外的用途時, 仍需特別注意.  ","version":"Next","tagName":"h3"},{"title":"小結​","type":1,"pageTitle":"[Go] Tour: Goroutine 心得筆記","url":"/moco/golang/go-tour/go-tour_goroutine/#小結","content":" 善用 Goroutine 多執行緒特性可以避免等候, 增進程式效率. 需要等候的時機, 也可用 time.Sleep, sync.WaitGroup 或 Channel 的方式處理.  而在多執行緒程式中常要注意的 Race Condition, 在 Go 裡可以很簡單的用 sync.Mutex 和 Channel 來管理.  相對其他語言, Go 在多執行緒上的創建和管理都相當簡單, 大幅降低程式複雜度. 而 Channel 的阻塞特性, 在多執行緒中發揮方便強大的能力, 後篇繼續討論 Channel.  續: Go: Goroutine 和 Channel 心得筆記 ","version":"Next","tagName":"h2"},{"title":"Awesome Java Resources","type":0,"sectionRef":"#","url":"/moco/java/awesome/","content":"","keywords":"","version":"Next"},{"title":"Masters of Java​","type":1,"pageTitle":"Awesome Java Resources","url":"/moco/java/awesome/#masters-of-java","content":" Java | The Will Will Web  ","version":"Next","tagName":"h2"},{"title":"See Also​","type":1,"pageTitle":"Awesome Java Resources","url":"/moco/java/awesome/#see-also","content":"","version":"Next","tagName":"h2"},{"title":"[Java] Get started","type":0,"sectionRef":"#","url":"/moco/java/java_get-started/","content":"","keywords":"","version":"Next"},{"title":"Pre Requirement​","type":1,"pageTitle":"[Java] Get started","url":"/moco/java/java_get-started/#pre-requirement","content":" OpenJDKApache MavenVSCode Extensions  ","version":"Next","tagName":"h2"},{"title":"See Also​","type":1,"pageTitle":"[Java] Get started","url":"/moco/java/java_get-started/#see-also","content":"","version":"Next","tagName":"h2"},{"title":"[Go] Tour: defar 心得筆記","type":0,"sectionRef":"#","url":"/moco/golang/go-tour/go-tour_defer/","content":"","keywords":"","version":"Next"},{"title":"執行順序​","type":1,"pageTitle":"[Go] Tour: defar 心得筆記","url":"/moco/golang/go-tour/go-tour_defer/#執行順序","content":" ","version":"Next","tagName":"h2"},{"title":"defer 生效順序​","type":1,"pageTitle":"[Go] Tour: defar 心得筆記","url":"/moco/golang/go-tour/go-tour_defer/#defer-生效順序","content":" defer 執行順序是先進後出, 如下:  func main() { for i := 0; i &lt; 5; i++ { defer fmt.Printf(&quot;%d\\n&quot;, i) } }   4 3 2 1 0   若透過 defer 呼叫處理的函數有順序關係, 使用上需注意實際執行順序.  ","version":"Next","tagName":"h3"},{"title":"defer/return 順序與回傳值​","type":1,"pageTitle":"[Go] Tour: defar 心得筆記","url":"/moco/golang/go-tour/go-tour_defer/#deferreturn-順序與回傳值","content":" 先將 return 結果寫入返回值中 -&gt; 接著依序執行 defer 工作 -&gt; 最後函數攜帶返回值退出  func deferFunc() int { fmt.Println(&quot;defer func called&quot;) return 0 } func returnFunc() int { fmt.Println(&quot;return func called&quot;) return 0 } func returnAndDefer() int { defer deferFunc() return returnFunc() } func main() { returnAndDefer() }   eturn func called defer func called   單討論執行順序的話, defer func 在 return 之後執行. 但若討論到回傳值的話, defer func 可能會影響程式回傳結果, 使用上需注意.  pointer​  最直覺的, return pointer 狀況下, 若 defer func 會更改 pointer 物件內容, 則該物件最終結果會是 defer func 執行後的狀態.  type Test struct { Value int } func deferFunc(t *Test) { t.Value++ } func testFunc(i int) *Test { result := Test{} defer deferFunc(&amp;result) result.Value = i return &amp;result } func main() { r := testFunc(5) fmt.Println(r.Value) }   6   named return​  返回值的表達方式, 我們知道根據是否提前聲明有兩種方式: 一種是 func test() int 另一種是 func test() (i int) , 兩種情況都來說說:  func main() { fmt.Println(&quot;main:&quot;, test()) } func test() int { var i int defer func() { i++ fmt.Println(&quot;defer2的值:&quot;, i) }() defer func() { i++ fmt.Println(&quot;defer1的值:&quot;, i) }() return i }   defer1的值: 1 defer2的值: 2 main: 0   return 時已經先將返回值給記錄下來為 0. 由於 i 函數內部聲明, 即使 defer 函式更改, 也不會影響 return 的數值.  func main() { fmt.Println(&quot;main:&quot;, test()) } func test() (i int) { defer func() { i++ fmt.Println(&quot;defer2的值:&quot;, i) }() defer func() { i++ fmt.Println(&quot;defer1的值:&quot;, i) }() return i }   defer1的值: 1 defer2的值: 2 main: 2   返回的 i 在函式宣告時定義, 則 defer 對 i 進行的操作會影響最終 i 的值.  ","version":"Next","tagName":"h3"},{"title":"defer 定義和執行​","type":1,"pageTitle":"[Go] Tour: defar 心得筆記","url":"/moco/golang/go-tour/go-tour_defer/#defer-定義和執行","content":" defer 所執行的指令或函式, 會先把參數部分的值確定下來, 之後不會改變. 等待函式執行結束, 才將之前定義的參數數值帶入邏輯執行.  func test(i *int) int { return *i } func main() { var i = 1 // 宣告 defer 的時候，會先確認 test(&amp;i) 的值為 1，後面不會改變 defer fmt.Println(&quot;i1 =&quot;, test(&amp;i)) i++ // 同上，此時 test(&amp;i) 的值是2，後面不會變 defer fmt.Println(&quot;i2 =&quot;, test(&amp;i)) // 定義 defer 的時候，i 是一個指針類型，地址上的值更動，這裡跟著變 defer func(i *int) { fmt.Println(&quot;i3 =&quot;, *i) }(&amp;i) // 宣告 defer 時，i 的值是2，後面不會改變 defer func(i int) { fmt.Println(&quot;i4 =&quot;, i) }(i) defer func() { // 地址，所以後續跟著變 var c = &amp;i fmt.Println(&quot;i5 =&quot;, *c) }() // 執行 i=11 後才調用，此時 i 值已是11 defer func() { fmt.Println(&quot;i6 =&quot;, i) }() i = 11 }   ","version":"Next","tagName":"h3"},{"title":"常見使用場景​","type":1,"pageTitle":"[Go] Tour: defar 心得筆記","url":"/moco/golang/go-tour/go-tour_defer/#常見使用場景","content":" ","version":"Next","tagName":"h2"},{"title":"釋放占用的資源​","type":1,"pageTitle":"[Go] Tour: defar 心得筆記","url":"/moco/golang/go-tour/go-tour_defer/#釋放占用的資源","content":" func test() error { file, err := os.Open(&quot;path&quot;) if err != nil { return err } // 放在判斷 err 狀態之後 defer file.Close() //... return nil }   ","version":"Next","tagName":"h3"},{"title":"捕捉處理異常​","type":1,"pageTitle":"[Go] Tour: defar 心得筆記","url":"/moco/golang/go-tour/go-tour_defer/#捕捉處理異常","content":" 捕捉錯誤的 defer 通常會最先宣告, 以確保執行順序為最後被呼叫.  func test2() { defer func() { if err := recover(); err != nil { fmt.Println(err) } }() file, err := os.Open(&quot;path&quot;) if err != nil { panic(err) } defer file.Close() //... return }   ","version":"Next","tagName":"h3"},{"title":"輸出日志 等收尾工作​","type":1,"pageTitle":"[Go] Tour: defar 心得筆記","url":"/moco/golang/go-tour/go-tour_defer/#輸出日志-等收尾工作","content":" func test3() { t1 := time.Now() defer func() { fmt.Printf(&quot;耗時: %f s&quot;, time.Now().Sub(t1).Seconds()) }() //... return }   ","version":"Next","tagName":"h3"},{"title":"常見錯誤​","type":1,"pageTitle":"[Go] Tour: defar 心得筆記","url":"/moco/golang/go-tour/go-tour_defer/#常見錯誤","content":" func test4() error { f, err := os.Open(&quot;A.txt&quot;) if err != nil { return err } defer func() { f.Close() }()//錯誤: 關閉是B文件,f引用被重新賦值 f, err = os.Open(&quot;B.txt&quot;) if err != nil { return err } defer func() { f.Close() }() //關閉是B文件 list := []int{1, 2} for _, i := range list { defer fmt.Println(i) //輸出 2 1 //i為值類型參數被復制 defer func() { fmt.Println(i) }() //錯誤: 輸出 2 2 //函數體內對i引用,留最終值 } return nil }   ","version":"Next","tagName":"h2"},{"title":"See Also​","type":1,"pageTitle":"[Go] Tour: defar 心得筆記","url":"/moco/golang/go-tour/go-tour_defer/#see-also","content":" Defer, Panic, and Recover - The Go BlogGolang 的defer執行規則說明 - WalkonNetGolang中的Defer必掌握的7知識點 - MdEditor ","version":"Next","tagName":"h2"},{"title":"java_hashset-arraylist-contains-performance","type":0,"sectionRef":"#","url":"/moco/java/internal/java_hashset-arraylist-contains-performance/","content":"java_hashset-arraylist-contains-performance","keywords":"","version":"Next"},{"title":"cvs_jdbc","type":0,"sectionRef":"#","url":"/moco/java/jdbc/cvs_jdbc/","content":"cvs_jdbc","keywords":"","version":"Next"},{"title":"[Kotlin] 30天從零撰寫 Kotlin 語言\b\b並應用於 Spring Boot 開發","type":0,"sectionRef":"#","url":"/moco/java/kotlin/kotlin_fron-zero-to-springboot-services/","content":"","keywords":"","version":"Next"},{"title":"Basic in Kotlin​","type":1,"pageTitle":"[Kotlin] 30天從零撰寫 Kotlin 語言\b\b並應用於 Spring Boot 開發","url":"/moco/java/kotlin/kotlin_fron-zero-to-springboot-services/#basic-in-kotlin","content":" ","version":"Next","tagName":"h2"},{"title":"變數型別​","type":1,"pageTitle":"[Kotlin] 30天從零撰寫 Kotlin 語言\b\b並應用於 Spring Boot 開發","url":"/moco/java/kotlin/kotlin_fron-zero-to-springboot-services/#變數型別","content":" In Kotlin, everything is an object in the sense that we can call member functions and properties on any variable.  變數宣告​  Kotlin 在變數宣告時主要會使用到兩種關鍵字 val 和 var:  val 用於唯讀變數，一旦給值就無法再修改var 用於需要重新修改數值的情況  fun main() { val readOnlyVariable = &quot;鐵人賽第十二屆&quot; // 宣告一個唯讀變數 var playerName = &quot;選手一號&quot; // 宣告一個可重新修改數值的變數 playerName = &quot;選手二號&quot; // 重新賦予新數值 }   Kotlin 官方這邊也有建議開發者在開發上建議優先使用 val, 遇到需要修改數值時再轉為 var 即可. 若使用 var 宣告變數, 開發者若沒有在程式中修改過, Intellij 編輯器也會提示建議改為 val.  空值 (null) 型態​  Kotlin 預設宣告都只能是非 null 型態, 這樣能夠有效避免開發者經常出現錯誤的問題. 而如果在開發情境上確實有必要使用 null 值, 則可以將變數定義為 nullable 狀態, 在變數的型態定義上加上 ? 即可:  fun main() { var test: String? = &quot;鐵人賽&quot; test = null println(test) // 印出 null }   型別判斷處理​  Kotlin 變數上有個特色是型別判斷處理, 允許開發者省略型別定義, 可對於已指派預設值的宣告變數自動定義型別.  ","version":"Next","tagName":"h3"},{"title":"See Also​","type":1,"pageTitle":"[Kotlin] 30天從零撰寫 Kotlin 語言\b\b並應用於 Spring Boot 開發","url":"/moco/java/kotlin/kotlin_fron-zero-to-springboot-services/#see-also","content":" ","version":"Next","tagName":"h2"},{"title":"Resources​","type":1,"pageTitle":"[Kotlin] 30天從零撰寫 Kotlin 語言\b\b並應用於 Spring Boot 開發","url":"/moco/java/kotlin/kotlin_fron-zero-to-springboot-services/#resources","content":" Kotlin Programming Language Kotlin Playground: Edit, Run, Share Kotlin Code Online ","version":"Next","tagName":"h3"},{"title":"maven_thirdparty-jar","type":0,"sectionRef":"#","url":"/moco/java/maven/maven_thirdparty-jar/","content":"","keywords":"","version":"Next"},{"title":"See Also​","type":1,"pageTitle":"maven_thirdparty-jar","url":"/moco/java/maven/maven_thirdparty-jar/#see-also","content":"","version":"Next","tagName":"h2"},{"title":"[Kotlin] Get Started","type":0,"sectionRef":"#","url":"/moco/java/kotlin/kotlin_get-started.md_get-started/","content":"","keywords":"","version":"Next"},{"title":"See Also​","type":1,"pageTitle":"[Kotlin] Get Started","url":"/moco/java/kotlin/kotlin_get-started.md_get-started/#see-also","content":" ","version":"Next","tagName":"h2"},{"title":"Resources​","type":1,"pageTitle":"[Kotlin] Get Started","url":"/moco/java/kotlin/kotlin_get-started.md_get-started/#resources","content":" Kotlin Programming Language Kotlin Playground: Edit, Run, Share Kotlin Code Online ","version":"Next","tagName":"h3"},{"title":"Apache Maven","type":0,"sectionRef":"#","url":"/moco/java/maven/sdk_apache-maven/","content":"","keywords":"","version":"Next"},{"title":"Installation​","type":1,"pageTitle":"Apache Maven","url":"/moco/java/maven/sdk_apache-maven/#installation","content":" Download Maven Binary tar.gz archivefrom Maven – Download Apache MavenFollow Installing Apache Maven, Extract distribution archive in any directoryAdd the bin directory of the created directory apache-maven to the PATH environment variableConfirm with mvn -v in a new shell. The result should look similar to Apache Maven 3.9.0 (9b58d2bad23a66be161c4664ef21ce219c2c8584) Maven home: /opt/apache-maven-3.9.0 Java version: 1.8.0_45, vendor: Oracle Corporation Java home: /Library/Java/JavaVirtualMachines/jdk1.8.0_45.jdk/Contents/Home/jre Default locale: en_US, platform encoding: UTF-8 OS name: &quot;mac os x&quot;, version: &quot;10.8.5&quot;, arch: &quot;x86_64&quot;, family: &quot;mac&quot;   ","version":"Next","tagName":"h2"},{"title":"Brief Intro​","type":1,"pageTitle":"Apache Maven","url":"/moco/java/maven/sdk_apache-maven/#brief-intro","content":" ","version":"Next","tagName":"h2"},{"title":"See Also​","type":1,"pageTitle":"Apache Maven","url":"/moco/java/maven/sdk_apache-maven/#see-also","content":" Maven – Welcome to Apache Maven重新認識 Apache Maven 建置與套件管理工具 | The Will Will Web ","version":"Next","tagName":"h2"},{"title":"[Java] Serialize with Gson","type":0,"sectionRef":"#","url":"/moco/java/packages/java-lib_serialize-gson/","content":"","keywords":"","version":"Next"},{"title":"Introduction​","type":1,"pageTitle":"[Java] Serialize with Gson","url":"/moco/java/packages/java-lib_serialize-gson/#introduction","content":" ","version":"Next","tagName":"h2"},{"title":"See Also​","type":1,"pageTitle":"[Java] Serialize with Gson","url":"/moco/java/packages/java-lib_serialize-gson/#see-also","content":" ","version":"Next","tagName":"h2"},{"title":"Gson API documentation​","type":1,"pageTitle":"[Java] Serialize with Gson","url":"/moco/java/packages/java-lib_serialize-gson/#gson-api-documentation","content":" com.google.gson (Gson 2.10.1 API)SerializedName (Gson 2.10.1 API) Gson @SerializedName to Change Field Name MappingDifference between Gson @Expose and @SerializedName | Baeldung  ","version":"Next","tagName":"h3"},{"title":"References​","type":1,"pageTitle":"[Java] Serialize with Gson","url":"/moco/java/packages/java-lib_serialize-gson/#references","content":" Gson 泛型處理方式. Gson 轉換博大精深，今天要探討的是泛型轉換處理方式 | by 邦哥不會寫程式 | 程式裡有蟲 | Medium最全Gson使用介绍，通俗易懂 - 知乎Day 10：Gson 資料解析 - iT 邦幫忙::一起幫忙解決難題，拯救 IT 人的一天Gson：Google开源的JSON解析库 | 二哥的Java进阶之路 ","version":"Next","tagName":"h3"},{"title":"[Java] Jackson VS Gson","type":0,"sectionRef":"#","url":"/moco/java/packages/java-lib_serialize-jackson-vs-gson/","content":"","keywords":"","version":"Next"},{"title":"Conclusion​","type":1,"pageTitle":"[Java] Jackson VS Gson","url":"/moco/java/packages/java-lib_serialize-jackson-vs-gson/#conclusion","content":" 先說結論, 團隊最終選擇 Gson. 和功能效能等其他原因無關, 單純因為既有專案中, 使用 Gson 的較多.  團隊運行決策中, 很多考量無法僅參考客觀因素, 各種主觀意見和歷史背景都會影響討論決策.  沒有對錯, 都是取捨.  ","version":"Next","tagName":"h2"},{"title":"Annoatation schema compare​","type":1,"pageTitle":"[Java] Jackson VS Gson","url":"/moco/java/packages/java-lib_serialize-jackson-vs-gson/#annoatation-schema-compare","content":" ","version":"Next","tagName":"h2"},{"title":"Features​","type":1,"pageTitle":"[Java] Jackson VS Gson","url":"/moco/java/packages/java-lib_serialize-jackson-vs-gson/#features","content":" ","version":"Next","tagName":"h2"},{"title":"Alias​","type":1,"pageTitle":"[Java] Jackson VS Gson","url":"/moco/java/packages/java-lib_serialize-jackson-vs-gson/#alias","content":" ","version":"Next","tagName":"h3"},{"title":"JsonUnwrapped​","type":1,"pageTitle":"[Java] Jackson VS Gson","url":"/moco/java/packages/java-lib_serialize-jackson-vs-gson/#jsonunwrapped","content":" ","version":"Next","tagName":"h3"},{"title":"See Also​","type":1,"pageTitle":"[Java] Jackson VS Gson","url":"/moco/java/packages/java-lib_serialize-jackson-vs-gson/#see-also","content":" @JsonProperty和@SerializedName对比_@serializedname @jsonproperty-CSDN博客 ","version":"Next","tagName":"h2"},{"title":"[Java] Serialize with Jackson","type":0,"sectionRef":"#","url":"/moco/java/packages/java-lib_serialize-jackson/","content":"","keywords":"","version":"Next"},{"title":"See Also​","type":1,"pageTitle":"[Java] Serialize with Jackson","url":"/moco/java/packages/java-lib_serialize-jackson/#see-also","content":" ","version":"Next","tagName":"h2"},{"title":"Jackson annotations API documentation​","type":1,"pageTitle":"[Java] Serialize with Jackson","url":"/moco/java/packages/java-lib_serialize-jackson/#jackson-annotations-api-documentation","content":" JsonAlias (Jackson-annotations 2.9.0 API) 浅谈Jackson中@JsonProperty和@JsonAlias注解_jackson jsonproperty-CSDN博客  ","version":"Next","tagName":"h3"},{"title":"References​","type":1,"pageTitle":"[Java] Serialize with Jackson","url":"/moco/java/packages/java-lib_serialize-jackson/#references","content":" Jackson Annotation Examples | Baeldung好用的Jackson , 做一個POJO 和 JSON轉換的JSONUtils - HackMD ","version":"Next","tagName":"h3"},{"title":"OpenJDK","type":0,"sectionRef":"#","url":"/moco/java/sdk_open-jdk/","content":"","keywords":"","version":"Next"},{"title":"JDK Version​","type":1,"pageTitle":"OpenJDK","url":"/moco/java/sdk_open-jdk/#jdk-version","content":" React Native 需要 JDK 11, 可以透過 javac -version 命令確認機器上的 JDK 版本. 但若開發不同專案需要不同版本的 JDK 時, 可以在電腦安裝多個 OpenJDK 版本, 透過環境變數來決定使用版本.  brew tap homebrew/cask-versions brew install --cask zulu11 // Java 11 brew install --cask zulu8 // Java 1.8   ## OpenJDK ## export JAVA_8_HOME=$(/usr/libexec/java_home -v1.8) export JAVA_11_HOME=$(/usr/libexec/java_home -v11) alias java8='export JAVA_HOME=$JAVA_8_HOME' alias java11='export JAVA_HOME=$JAVA_11_HOME' # default to Java 11 java11   若要改用 Java 1.8 時, 下指令 java8 即可切換. ","version":"Next","tagName":"h2"},{"title":"[SpringBoot] Docker versioning w/ pom.xml","type":0,"sectionRef":"#","url":"/moco/java/springboot/misc_docker-versioning/","content":"","keywords":"","version":"Next"},{"title":"See Also​","type":1,"pageTitle":"[SpringBoot] Docker versioning w/ pom.xml","url":"/moco/java/springboot/misc_docker-versioning/#see-also","content":" java - What is the best practice to get the file name that was defined in the pom.xml, from within the docker file? - Stack Overflow ","version":"Next","tagName":"h2"},{"title":"Awesome Spring Boot Resources","type":0,"sectionRef":"#","url":"/moco/java/springboot/awesome/","content":"","keywords":"","version":"Next"},{"title":"Spring Boot​","type":1,"pageTitle":"Awesome Spring Boot Resources","url":"/moco/java/springboot/awesome/#spring-boot","content":" GitHub - spring-projects/spring-boot: Spring BootSpring Initializr  ","version":"Next","tagName":"h2"},{"title":"Spring Boot Reference Documentation​","type":1,"pageTitle":"Awesome Spring Boot Resources","url":"/moco/java/springboot/awesome/#spring-boot-reference-documentation","content":" Getting Started  ","version":"Next","tagName":"h3"},{"title":"Spring | Guides​","type":1,"pageTitle":"Awesome Spring Boot Resources","url":"/moco/java/springboot/awesome/#spring--guides","content":" Getting Started | Building an Application with Spring BootGetting Started | Building a Guide with VS Code  ","version":"Next","tagName":"h3"},{"title":"Masters of Spring Boot​","type":1,"pageTitle":"Awesome Spring Boot Resources","url":"/moco/java/springboot/awesome/#masters-of-spring-boot","content":" Java | The Will Will Web  ","version":"Next","tagName":"h2"},{"title":"See Also​","type":1,"pageTitle":"Awesome Spring Boot Resources","url":"/moco/java/springboot/awesome/#see-also","content":"","version":"Next","tagName":"h2"},{"title":"[SpringBoot] Dockerize Spring Boot Application","type":0,"sectionRef":"#","url":"/moco/java/springboot/misc_dockerize/","content":"","keywords":"","version":"Next"},{"title":"Run w/ Java source​","type":1,"pageTitle":"[SpringBoot] Dockerize Spring Boot Application","url":"/moco/java/springboot/misc_dockerize/#run-w-java-source","content":" FROM eclipse-temurin WORKDIR /app COPY .mvn/ .mvn COPY mvnw pom.xml ./ RUN ./mvnw dependency:go-offline COPY src ./src CMD [&quot;./mvnw&quot;, &quot;spring-boot:run&quot;]   這個 Dockerfile 把 source code 打包進 container 初始化專案檔案後, 透過 mvn 來編譯與啟動 sprint boot application.  這樣的 image 需要把完整編譯環境和程式都放入 container 中, 優點是若 CI/CD 環境中沒有 JDK 環境, 仍可編譯出可以正常執行的 Spring Boot container.  但一般來說, 除非部屬執行 container 環境都是自家控管的, 否則不會採用這種方式. 畢竟 container 中檔案是無法被保護, 原始碼放入 container 部屬出去, 等於程式裸奔在外. 若程式有重要商務邏輯或加解密資訊, 是相當危險的.  Ref: Build &amp; Deploy a Spring Boot application in Docker container | by Dhruv Saksena | Medium  ","version":"Next","tagName":"h2"},{"title":"Run w/ JAR binary​","type":1,"pageTitle":"[SpringBoot] Dockerize Spring Boot Application","url":"/moco/java/springboot/misc_dockerize/#run-w-jar-binary","content":" FROM openjdk:11-jdk-alpine VOLUME /tmp ARG JAR_FILE COPY ${JAR_FILE} app.jar ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;/app.jar&quot;]   mvn install dockerfile:build   相對於前者, 這個方式是先把 Java 編譯成 JAR 檔, 需準備基本的 Java runtime container, 把 JAR 放入 container 中即可執行.  若要部屬到外部環境, 編譯後的 binary 較不容易被破解.  但若要在 CI/CD 中打包 container, 則需確定 CI/CD runner 上是正確對應 JDK 版本. 可能不同專案使用了不同 JDK 或 mvn 版本, 造成 CI/CD 設定上的複雜或出錯.  不考慮 CI/CD 情況, 由 develop 手動 build docker image 的話, 這是適合的方式.  ","version":"Next","tagName":"h2"},{"title":"Multi-Stage Build​","type":1,"pageTitle":"[SpringBoot] Dockerize Spring Boot Application","url":"/moco/java/springboot/misc_dockerize/#multi-stage-build","content":" Multi-stage builds are useful to anyone who has struggled to optimizeDockerfiles while keeping them easy to read and maintain.  Docker 支援 Multi-Stage Build, 可以把不同階段的需求拆開到在不同 docker 中執行, 再把最終需要部署的檔案分別複製到一個 docker.  常見是透過有完整開發環境的 container 來編譯程式, 再把編譯後的程式放到最基本的執行環境中發佈.  FROM eclipse-temurin:17-jdk-alpine as build WORKDIR /workspace/app COPY mvnw . COPY .mvn .mvn COPY pom.xml . COPY src src RUN ./mvnw install -DskipTests RUN mkdir -p target/dependency &amp;&amp; (cd target/dependency; jar -xf ../*.jar) FROM eclipse-temurin:17-jdk-alpine VOLUME /tmp ARG DEPENDENCY=/workspace/app/target/dependency COPY --from=build ${DEPENDENCY}/BOOT-INF/lib /app/lib COPY --from=build ${DEPENDENCY}/META-INF /app/META-INF COPY --from=build ${DEPENDENCY}/BOOT-INF/classes /app ENTRYPOINT [&quot;java&quot;,&quot;-cp&quot;,&quot;app:app/lib/*&quot;,&quot;hello.Application&quot;]   以這個例子來說, 先建立了 builder 這個 container, 把專案設定和原始程式檔都複製進 builder 中進行專案初始化和編譯.  再建立一個基本的執行環境 container, 把 builder 中所編譯的 JAR 和相關環境檔案複製過來.  如此一來, 用來部署的 container 裡面只會有 JAR binary, 可避免資安問題. 在 CI/CD 流程時, 編譯 JAR 是在 docker 中被執行, 亦可避免環境設定問題造成的錯誤.  可說是集前兩個方式的優點於一身的方式.  Ref: Build, Package, and Run Spring Boot Apps With Docker - DZone  ","version":"Next","tagName":"h2"},{"title":"See Also​","type":1,"pageTitle":"[SpringBoot] Dockerize Spring Boot Application","url":"/moco/java/springboot/misc_dockerize/#see-also","content":" 9 Tips for Containerizing Your Spring Boot Code | DockerGetting Started | Spring Boot DockerMulti-stage builds ","version":"Next","tagName":"h2"},{"title":"[SpringBoot] Filter","type":0,"sectionRef":"#","url":"/moco/java/springboot/sb_filter/","content":"","keywords":"","version":"Next"},{"title":"See Also​","type":1,"pageTitle":"[SpringBoot] Filter","url":"/moco/java/springboot/sb_filter/#see-also","content":" Spring boot Filter 機制，攔截請求與回應 - Bingdoal's Note ","version":"Next","tagName":"h2"},{"title":"[SpringBoot] Get started","type":0,"sectionRef":"#","url":"/moco/java/springboot/sb_get-started/","content":"","keywords":"","version":"Next"},{"title":"See Also​","type":1,"pageTitle":"[SpringBoot] Get started","url":"/moco/java/springboot/sb_get-started/#see-also","content":" Getting Started | Building an Application with Spring Boot從無到有上手你的第一個 Spring Boot 應用程式 | The Will Will Web30天帶你潮玩Spring Boot Zone :: 第 11 屆 iThome 鐵人賽Spring Boot 初學用法介紹 - HackMD ","version":"Next","tagName":"h2"},{"title":"[Spring Boot] JWT","type":0,"sectionRef":"#","url":"/moco/java/springboot/sb_jwt/","content":"","keywords":"","version":"Next"},{"title":"See Also​","type":1,"pageTitle":"[Spring Boot] JWT","url":"/moco/java/springboot/sb_jwt/#see-also","content":"","version":"Next","tagName":"h2"},{"title":"[SpringBoot] Project Source Tree Structure","type":0,"sectionRef":"#","url":"/moco/java/springboot/sb_src-tree/","content":"","keywords":"","version":"Next"},{"title":"By feature​","type":1,"pageTitle":"[SpringBoot] Project Source Tree Structure","url":"/moco/java/springboot/sb_src-tree/#by-feature","content":" In this approach, all classes pertaining to a certain feature are placed in the same package. The structure by feature looks is shown in below example:  com +- gfg +- demo +- MyApplication.java | +- customer | +- Customer.java | +- CustomerController.java | +- CustomerService.java | +- CustomerRepository.java | +- order +- Order.java +- OrderController.java +- OrderService.java +- OrderRepository.java   The advantages of this structure is as follows:  Find a class to be modified is easy.By deleting a particular sub-package, all the classes related to a certain feature can be deleted.Testing and Refactoring is easy.Features can be shipped separately.  ","version":"Next","tagName":"h2"},{"title":"By Layer​","type":1,"pageTitle":"[SpringBoot] Project Source Tree Structure","url":"/moco/java/springboot/sb_src-tree/#by-layer","content":" Another way to place the classes is by layer i.e; all controllers can be placed in controllers package and services under services package and all entities under domain or model etc.  com +- gfg +- demo +- MyApplication.java | +- domain | +- Customer.java | +- Order.java | +- controllers | +- OrderController.java | +- CustomerController.java | +- services | +- CustomerService.java | +- OrderService.java | +- repositories +- CustomerRepository.java +- OrderRepository.java   Though the above structure looks feasible and easy to locate classes by a layer. It has few disadvantages when compared to Structure by Feature.  Features or Modules cannot be shipped separately.Hard to locate a class pertaining to a certain feature.Code Refactoring on a certain feature is difficult since the feature classes located in every layer.  ","version":"Next","tagName":"h2"},{"title":"Summary​","type":1,"pageTitle":"[SpringBoot] Project Source Tree Structure","url":"/moco/java/springboot/sb_src-tree/#summary","content":" 相對於其他框架常見會用 controller / model / middleware / ... 等來設計專案目錄結構, 在 Spring Boot 下, 若功能耦合性低, 依各功能需求來設計專案目錄結構, 似乎是更適合的方式.  ","version":"Next","tagName":"h2"},{"title":"See Also​","type":1,"pageTitle":"[SpringBoot] Project Source Tree Structure","url":"/moco/java/springboot/sb_src-tree/#see-also","content":" Spring Boot - Code Structure - GeeksforGeeksSpring Boot Project - Code &amp; Folder Structure and Best Practices ","version":"Next","tagName":"h2"},{"title":"[Spring Boot] Web Services & WSDL","type":0,"sectionRef":"#","url":"/moco/java/springboot/sb_web-service/","content":"","keywords":"","version":"Next"},{"title":"See Also​","type":1,"pageTitle":"[Spring Boot] Web Services & WSDL","url":"/moco/java/springboot/sb_web-service/#see-also","content":" Spring Web Service ─ Web Service 簡介與 Server 端實作 ","version":"Next","tagName":"h2"},{"title":"[Spring] SpEL expressions","type":0,"sectionRef":"#","url":"/moco/java/springboot/spring/spring_spel-expressions/","content":"","keywords":"","version":"Next"},{"title":"See Also​","type":1,"pageTitle":"[Spring] SpEL expressions","url":"/moco/java/springboot/spring/spring_spel-expressions/#see-also","content":" 6. Spring Expression Language (SpEL) ","version":"Next","tagName":"h2"},{"title":"Around kywk.moco","type":0,"sectionRef":"#","url":"/moco/kywk.moco/","content":"import Tabs from '@theme/Tabs'; import TabItem from '@theme/TabItem'; Around kywk.moco ├── 52projects │ └── pm ├── bootcamp │ ├── algorithm │ └── beginner ├── techstack │ ├── grpc │ ├── mssql │ ├── mysql │ └── openapi ├── devsecops │ ├── cicd │ │ └── fastlane │ ├── docker │ │ └── dockerfile │ ├── security │ └── sre ├── golang │ ├── gin │ ├── go-tour │ └── package ├── java │ └── springboot ├── node.js │ ├── express │ └── typescript ├── python ├── frontend │ ├── electron │ ├── flutter │ ├── reactnative │ │ ├── component │ │ ├── env-setup │ │ └── the-basics │ └── web ├── utilities │ ├── cli │ └── vscode ├── machintosh ├── obsidian └── miscellaneous ├── blockchain └── dart ","keywords":"","version":"Next"},{"title":"[Spring] @Value Defaults","type":0,"sectionRef":"#","url":"/moco/java/springboot/spring/spring_value-defaults/","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"[Spring] @Value Defaults","url":"/moco/java/springboot/spring/spring_value-defaults/#overview","content":" Spring's @Value annotation provides a convenient way to inject property values into components. It's also quite useful to provide sensible defaults for cases where a property may not be present— how to specify a default value for the @Value Spring annotation.  ","version":"Next","tagName":"h2"},{"title":"String Defaults​","type":1,"pageTitle":"[Spring] @Value Defaults","url":"/moco/java/springboot/spring/spring_value-defaults/#string-defaults","content":" Let's look at the basic syntax for setting a default value for a String property:  @Value(&quot;${some.key:my default value}&quot;) private String stringWithDefaultValue;   If some.key cannot be resolved, stringWithDefaultValue will be set to the default value of my default value.  Similarly, we can set a zero-length String as the default value:  @Value(&quot;${some.key:}&quot;) private String stringWithBlankDefaultValue;   @Value annotation : 後面即為 default value. 沒有給任何值的話並不為 null, 而因不同物件會有不同資料內容. String 的話會是空字串 &quot;&quot;  ","version":"Next","tagName":"h2"},{"title":"Primitives​","type":1,"pageTitle":"[Spring] @Value Defaults","url":"/moco/java/springboot/spring/spring_value-defaults/#primitives","content":" To set a default value for primitive types such as boolean and int, we use the literal value:  @Value(&quot;${some.key:true}&quot;) private boolean booleanWithDefaultValue;   @Value(&quot;${some.key:42}&quot;) private int intWithDefaultValue;   If we wanted to, we could use primitive wrappers instead by changing the types to Boolean and Integer.  ","version":"Next","tagName":"h2"},{"title":"Arrays​","type":1,"pageTitle":"[Spring] @Value Defaults","url":"/moco/java/springboot/spring/spring_value-defaults/#arrays","content":" We can also inject a comma , separated list of values into an array:  @Value(&quot;${some.key:one,two,three}&quot;) private String[] stringArrayWithDefaults; @Value(&quot;${some.key:1,2,3}&quot;) private int[] intArrayWithDefaults;   In the first example above, the values one, two and three are injected as defaults into stringArrayWithDefaults.  ","version":"Next","tagName":"h2"},{"title":"Using SpEL​","type":1,"pageTitle":"[Spring] @Value Defaults","url":"/moco/java/springboot/spring/spring_value-defaults/#using-spel","content":" We can also use Spring Expression Language (SpEL) to specify an expression and a default.  In the example below, we expect some.system.key to be set as a system property, and if it is not set, we want to use my default system property value as a default:  @Value(&quot;#{systemProperties['some.key'] ?: 'my default system property value'}&quot;) private String spelWithDefaultValue;   ","version":"Next","tagName":"h2"},{"title":"Conclusion​","type":1,"pageTitle":"[Spring] @Value Defaults","url":"/moco/java/springboot/spring/spring_value-defaults/#conclusion","content":" Spring @Value 裡面的的格式規範類似 YAML, 用 , 區隔陣列元素, 非必要並無須特別加上 &quot;&quot; ... 等. 但若字串中有混雜特殊字元等導致誤判, 可利用 ' 單引號來定義字串.  This article looked at how to set a default value for a property whose value we would like to have injected using Spring's @Value annotation.  As usual, all the code samples used in this article can found in the GitHub project.  ","version":"Next","tagName":"h2"},{"title":"See Also​","type":1,"pageTitle":"[Spring] @Value Defaults","url":"/moco/java/springboot/spring/spring_value-defaults/#see-also","content":" GitHub project@Value Annotation ","version":"Next","tagName":"h2"},{"title":"Awesome Machintosh Resources","type":0,"sectionRef":"#","url":"/moco/machintosh/awesome/","content":"","keywords":"","version":"Next"},{"title":"Machintosh​","type":1,"pageTitle":"Awesome Machintosh Resources","url":"/moco/machintosh/awesome/#machintosh","content":" ","version":"Next","tagName":"h2"},{"title":"Hackintosh​","type":1,"pageTitle":"Awesome Machintosh Resources","url":"/moco/machintosh/awesome/#hackintosh","content":" Hackintosh Instructions, Hackintosh How To Guides: Hackintosh.com ","version":"Next","tagName":"h2"},{"title":"[Spring Boot] Start from scratch","type":0,"sectionRef":"#","url":"/moco/java/springboot/sb_from-scratch/","content":"","keywords":"","version":"Next"},{"title":"Maven Project​","type":1,"pageTitle":"[Spring Boot] Start from scratch","url":"/moco/java/springboot/sb_from-scratch/#maven-project","content":" 在新資料夾進行 mkdir sandbox/helloworld  ","version":"Next","tagName":"h2"},{"title":"pom.xml for Apache Maven​","type":1,"pageTitle":"[Spring Boot] Start from scratch","url":"/moco/java/springboot/sb_from-scratch/#pomxml-for-apache-maven","content":" pom.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.duotify&lt;/groupId&gt; &lt;artifactId&gt;app1&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.7.9&lt;/version&gt; &lt;/parent&gt; &lt;!-- Additional lines to be added here... --&gt; &lt;/project&gt;   建立後執行 mvn package 就會產生 target/app1-0.0.1-SNAPSHOT.jar 檔案, 不過這個檔案很小, 目前沒有什麼實質內容, 所以這個 jar 檔是沒有用的.  ","version":"Next","tagName":"h3"},{"title":"Spring Boot Parent POM​","type":1,"pageTitle":"[Spring Boot] Start from scratch","url":"/moco/java/springboot/sb_from-scratch/#spring-boot-parent-pom","content":" 剛剛的 pom.xml 檔案可以看到以下 &lt;parent&gt; 片段, 明確的指定了一個名為 spring-boot-starter-parent 的 Parent POM 檔:  &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.7.9&lt;/version&gt; &lt;/parent&gt;   Spring Boot 框架整理了許多 Starters 套件, 可以大幅簡化在開發不同應用程式時的上手門檻. 而這份 spring-boot-starter-parent POM 檔裡面, 就定義了所有 Starters 套件的預設值. 雖然這些套件不一定會用到, 但是當需要用到的時候, 也不用花時間瞭解設定, 因為 Spring Boot 已經全部把大多數人都會設定的屬性(Properties) / 套件版本(version) / 常用的 Plugins, 全部都寫在這份 Parent POM 檔中, 並自動繼承給 Spring Boot 專案.  可以從以下路徑找到 spring-boot-starter-parent 這個 POM 檔:  ~/.m2/repository/org/springframework/boot/spring-boot-starter-parent/2.7.9/spring-boot-starter-parent-2.7.9.pom   ","version":"Next","tagName":"h3"},{"title":"加入套件相依性​","type":1,"pageTitle":"[Spring Boot] Start from scratch","url":"/moco/java/springboot/sb_from-scratch/#加入套件相依性","content":" Spring Boot 就是一個 Java 應用程式, 應用程式所需參考到的那些 JARs 檔, 完全可以透過 Maven 或 Gradle 來進行管裡. 以 Maven 為例, spring-boot-starter-parent 這個 POM 檔, 透過 Dependency Management 機制, 預先定義好了會用到的相依套件, 也指定好了版本資訊. 所以在你專案下的 pom.xml 是不需要指定 &lt;version&gt; 版本資訊的, 直接使用 groupId 與 &lt;artifactId&gt; 就可以順利的載入相依套件.  這只是 Maven 的繼承效果, 想要自己決定想採用的版本, 還是可以加上 &lt;version&gt; 元素來指定版本. 不過最好思考一下為什麼要這麼做? 因為如果未來想要將 Spring Boot 升級版本時, 只要調整一下 spring-boot-starter-parent 這個 Parent POM 的版本, 所有「測試過的」相依套件就會一併升級到沒問題的版本, 自己指定套件版本反而是有升級風險的.  可以利用 mvn dependency:tree 查看專案的套件相依資訊, 此時只會看到一個 com.duotify:app1:jar:0.0.1-SNAPSHOT 套件 (就是目前專案) 而已, 因為並沒有在 pom.xml 宣告使用任何相依套件:  mvn dependency:tree [INFO] com.duotify:app1:jar:0.0.1-SNAPSHOT   要用 Spring 來開發 Web 的話 (包含 MVC 或 API 開發), 一般會使用 spring-boot-starter-web 這個 Starters 套件, 只要加入 spring-boot-starter-web 到 pom.xml 之中即可:  &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt;   同前, 一般來說不需要加上 &lt;version&gt; 元素, 直接繼承使用 Parent POM 定義的版本才是最佳實務(Best Practices).  加完之後的 pom.xml 檔案內容如下:  pom.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.duotify&lt;/groupId&gt; &lt;artifactId&gt;app1&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.7.3&lt;/version&gt; &lt;/parent&gt; &lt;!-- Additional lines to be added here... --&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/project&gt;   再執行一次 mvn dependency:tree 查看專案的套件相依資訊, 就會非常多了:  [INFO] com.duotify:app1:jar:0.0.1-SNAPSHOT [INFO] \\- org.springframework.boot:spring-boot-starter-web:jar:2.7.3:compile [INFO] +- org.springframework.boot:spring-boot-starter:jar:2.7.3:compile [INFO] | +- org.springframework.boot:spring-boot:jar:2.7.3:compile [INFO] | +- org.springframework.boot:spring-boot-autoconfigure:jar:2.7.3:compile [INFO] | +- org.springframework.boot:spring-boot-starter-logging:jar:2.7.3:compile [INFO] | | +- ch.qos.logback:logback-classic:jar:1.2.11:compile [INFO] | | | +- ch.qos.logback:logback-core:jar:1.2.11:compile [INFO] | | | \\- org.slf4j:slf4j-api:jar:1.7.36:compile [INFO] | | +- org.apache.logging.log4j:log4j-to-slf4j:jar:2.17.2:compile [INFO] | | | \\- org.apache.logging.log4j:log4j-api:jar:2.17.2:compile [INFO] | | \\- org.slf4j:jul-to-slf4j:jar:1.7.36:compile [INFO] | +- jakarta.annotation:jakarta.annotation-api:jar:1.3.5:compile [INFO] | +- org.springframework:spring-core:jar:5.3.22:compile [INFO] | | \\- org.springframework:spring-jcl:jar:5.3.22:compile [INFO] | \\- org.yaml:snakeyaml:jar:1.30:compile [INFO] +- org.springframework.boot:spring-boot-starter-json:jar:2.7.3:compile [INFO] | +- com.fasterxml.jackson.core:jackson-databind:jar:2.13.3:compile [INFO] | | +- com.fasterxml.jackson.core:jackson-annotations:jar:2.13.3:compile [INFO] | | \\- com.fasterxml.jackson.core:jackson-core:jar:2.13.3:compile [INFO] | +- com.fasterxml.jackson.datatype:jackson-datatype-jdk8:jar:2.13.3:compile [INFO] | +- com.fasterxml.jackson.datatype:jackson-datatype-jsr310:jar:2.13.3:compile [INFO] | \\- com.fasterxml.jackson.module:jackson-module-parameter-names:jar:2.13.3:compile [INFO] +- org.springframework.boot:spring-boot-starter-tomcat:jar:2.7.3:compile [INFO] | +- org.apache.tomcat.embed:tomcat-embed-core:jar:9.0.65:compile [INFO] | +- org.apache.tomcat.embed:tomcat-embed-el:jar:9.0.65:compile [INFO] | \\- org.apache.tomcat.embed:tomcat-embed-websocket:jar:9.0.65:compile [INFO] +- org.springframework:spring-web:jar:5.3.22:compile [INFO] | \\- org.springframework:spring-beans:jar:5.3.22:compile [INFO] \\- org.springframework:spring-webmvc:jar:5.3.22:compile [INFO] +- org.springframework:spring-aop:jar:5.3.22:compile [INFO] +- org.springframework:spring-context:jar:5.3.22:compile [INFO] \\- org.springframework:spring-expression:jar:5.3.22:compile   ","version":"Next","tagName":"h3"},{"title":"Hello World​","type":1,"pageTitle":"[Spring Boot] Start from scratch","url":"/moco/java/springboot/sb_from-scratch/#hello-world","content":" ","version":"Next","tagName":"h2"},{"title":"第一支 Spring Boot 程式​","type":1,"pageTitle":"[Spring Boot] Start from scratch","url":"/moco/java/springboot/sb_from-scratch/#第一支-spring-boot-程式","content":" 基本專案設定完成後, 撰寫第一支 Spring Boot Java 程式. 建立 src/main/java/com/duotify/app1/MyApplication.java 檔案.  helloworld.java package com.duotify.app1; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.EnableAutoConfiguration; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; @RestController @EnableAutoConfiguration public class MyApplication { @RequestMapping(&quot;/&quot;) String home() { return &quot;Hello World!&quot;; } public static void main(String[] args) { SpringApplication.run(MyApplication.class, args); } }   Spring Boot 框架設計上大量使用了依賴注入來減少程式耦合, 程式中透過類別標注 (Annotations) 來提高程式可讀性之外, 也讓 Spring Framework 透過 Component scanning 找到相對硬的服務.  類別上的 @RestController 標注 (Annotations), 在 Spring 裡面又被稱為是一種 Stereotype Annotations (刻板印象標注). 這可以提高程式碼的可讀性, 讓熟悉Spring 框架的開發人員看到 @RestController 標注, 就一目了然的知道這個類別其實就是一個支援 REST 功能的 Controller (控制器). 這樣的設計會讓開發人員自動形成一種刻板印象 (Stereotype), 看到這類標注就會自動識別這個類別的角色與用途, 猜想是官方所以用 Stereotype 這個單字的主因.  除此之外, Stereotype Annotations 還可以賦予「類別」一個角色, 讓 Spring Framework 可以透過 Component scanning 快速的找到相對應的服務. Spring 內建的 Stereotype Annotations 可以從 org.springframework.stereotype 查閱, 基本上所有的 Stereotype Annotations 都會繼承自 org.springframework.stereotype.Component (@Component) 型別.  類別上的 @EnableAutoConfiguration 標注 (Annotations) 則會讓 Spring Boot 自動找出所有相依套件中 JAR 檔的類別, 並自動建立與註冊成 Spring Beans 元件, 讓 Spring Boot 可以在需要的時候使用這些可重複利用這些的 Spring Beans 元件.  在 home() 方法上的 @RequestMapping(&quot;/&quot;) 是定義控制器的路由, 決定網址的結構.  ","version":"Next","tagName":"h3"},{"title":"啟動 Spring Boot 網站​","type":1,"pageTitle":"[Spring Boot] Start from scratch","url":"/moco/java/springboot/sb_from-scratch/#啟動-spring-boot-網站","content":" mvn spring-boot:run     透過瀏覽器開啟 http://localhost:8080/ 即可看到網站  ","version":"Next","tagName":"h3"},{"title":"Package & Deploy​","type":1,"pageTitle":"[Spring Boot] Start from scratch","url":"/moco/java/springboot/sb_from-scratch/#package--deploy","content":" ","version":"Next","tagName":"h2"},{"title":"打包應用程式 *.jar 檔​","type":1,"pageTitle":"[Spring Boot] Start from scratch","url":"/moco/java/springboot/sb_from-scratch/#打包應用程式-jar-檔","content":" 現在執行 mvn package 封裝 target/app1-0.0.1-SNAPSHOT.jar 檔案的話, 檔案依然只有 2.4KB 而已. 因為目前只有打包 MyApplication, 並不包含 Tomcat 之類的套件, 還無法成為一個可以獨立運作的執行檔.  Java 並沒有提供一種稱為 Nested JAR 的封裝方式, 也就是在一個 JAR 檔裡面包含其他需要用到的 JAR 檔. 所以如果要部署一個包含相依套件的應用程式, 就會需要部署好幾個檔案, 使用上較為不便. 想要發佈一個__自我包含所有 JAR 檔的 JAR 可執行檔(self-contained executable jar file)__, 通常會把應用程式打包成俗稱 ÜBER JAR 或 FAT JAR 的格式. 詳見 The Executable Jar Format 文件說明.  Spring Boot 亦可打包成 Tomcat 所支援的 WAR 格式, 另篇討論.  若應用程式封裝打包的需求, 可透過 spring-boot-maven-plugin plugin 達成目的. 只要在專案的 pom.xml 加入以下設定即可:  &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;   加完之後的 pom.xml 檔案內容如下:  pom.xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.duotify&lt;/groupId&gt; &lt;artifactId&gt;app1&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.7.3&lt;/version&gt; &lt;/parent&gt; &lt;!-- Additional lines to be added here... --&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt; &lt;/project&gt;   理論上 spring-boot-maven-plugin plugin 還有 &lt;executions&gt; 與 &lt;configuration&gt; 需要設定才對. 但是 Spring Boot 提供的 Parent POM 已經設定了這些內容, 所以才會看起來這麼簡單!  spring-boot-maven-plugin configuration spring-boot-maven-plugin plugin 完整的設定內容如下 (從 spring-boot-starter-parent PQM 取出): &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;executions&gt; &lt;execution&gt; &lt;id&gt;repackage&lt;/id&gt; &lt;goals&gt; &lt;goal&gt;repackage&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;configuration&gt; &lt;mainClass&gt;${start-class}&lt;/mainClass&gt; &lt;/configuration&gt; &lt;/plugin&gt;   加入 spring-boot-maven-plugin 敘述後執行 mvn package 封裝 target/app1-0.0.1-SNAPSHOT.jar, 這個時候檔案大小就有 17MB 了, 本身包含了 Tomcat 套件而且可以獨立運作執行.    圖中的 app1-0.0.1-SNAPSHOT.jar.original 是應用程式原始的 JAR 檔, 因為被 spring-boot-maven-plugin 執行過 repackage 目標(Goal), 所以在執行__重新封裝__(repackage)時加入了 Tomcat 進去.  執行 java -jar target/app1-0.0.1-SNAPSHOT.jar, Spring Boot 應用程式可以順利執行並啟動了! 👍    ","version":"Next","tagName":"h3"},{"title":"Docker​","type":1,"pageTitle":"[Spring Boot] Start from scratch","url":"/moco/java/springboot/sb_from-scratch/#docker","content":" See: Containerizing Spring Boot Application  ","version":"Next","tagName":"h3"},{"title":"Summary​","type":1,"pageTitle":"[Spring Boot] Start from scratch","url":"/moco/java/springboot/sb_from-scratch/#summary","content":" Spring Boot 提供一套簡潔的架構, 可以快速完成任務. 但是神奇的架構背後, 其實有很多值得探討的地方. 越是抽絲剝繭釐清了背後的原理之後, 才有辦法舉一反三. 思考並在正確的時間點做出正確的技術決策.  ","version":"Next","tagName":"h2"},{"title":"See Also​","type":1,"pageTitle":"[Spring Boot] Start from scratch","url":"/moco/java/springboot/sb_from-scratch/#see-also","content":" Getting Started | Building an Application with Spring BootSpring Boot Reference Documentation Getting StartedThe Executable Jar Format java - What is an uber jar? - Stack OverflowSpring Annotation Programming Model · spring-projects/spring-framework Wiki · GitHub ","version":"Next","tagName":"h2"},{"title":"[Mac] 掛載 EFI 磁區方式","type":0,"sectionRef":"#","url":"/moco/machintosh/hackintosh_mount-efi-partition/","content":"","keywords":"","version":"Next"},{"title":"EFI 系統磁區​","type":1,"pageTitle":"[Mac] 掛載 EFI 磁區方式","url":"/moco/machintosh/hackintosh_mount-efi-partition/#efi-系統磁區","content":" EFI系統磁碟分割區是什麼?  EFI 系統分割區是一個 FAT 或 FAT32 格式的磁碟分割區. UEFI 韌體可從 ESP 加載 EFI 啟動程式或者 EFI 應用程式. 維基百科  EFI 分割區有什麼? 它包含了 4 個主要部分：啟動程式, 裝置驅動程式, 系統工具套件, 資料檔. 黑蘋果能正確在非官方機型上執行, 主要就是透過 EFI 提供相容於官方機型的驅動程式.  而 EFI 磁區雖然只是個標準的 FAT/FAT32 分割區, 但在 macOS 預設是不會被掛載的. 很多黑蘋果設定工具會提供掛載 EFI 磁區的功能.  但畢竟 EFI 磁區就是個標準的 FAT/FAT32 磁區, macOS 內建的 diskutil 就可以掛載 EFI 磁區了.  ","version":"Next","tagName":"h2"},{"title":"diskutil​","type":1,"pageTitle":"[Mac] 掛載 EFI 磁區方式","url":"/moco/machintosh/hackintosh_mount-efi-partition/#diskutil","content":" diskutil 是 macOS 內建的 CLI 工具之一. macOS 上跟磁碟操作相關軟體, 雖有著不同 UI 設計與操作流程外, 底層大多是呼叫 diskutil 來完成磁碟控制動作.  找出 EFI 磁區  $ diskutil list   上述指令會列出所有的磁碟機與分割, 這裡的磁碟機不僅是實體硬碟, 也包含虛擬硬碟區. 若有已掛載的 dmg 檔, 也會成列出來.    標準 GUID_partition_scheme 分割的磁碟, 會包含一個 EFI 磁區和其他磁區. 記住 EFI 磁區最後面的識別代碼.  掛載 EFI 磁區  $ sudo diskutil mount &lt;EFI_IDENTIFIER&gt;   這個指令會掛載 macOS 所支援的檔案系統, 預設掛載到 /Volume/PARTITION_NAME 資料夾. EFI 磁區為 FAT/FAT32 檔案系統, 是 macOS 預設支援的格式, 所以會被掛載到 /Volume/EFI.    掛載完後就可以用任何工具去處理 EFI 的設定配置檔了.  ","version":"Next","tagName":"h2"},{"title":"See Also​","type":1,"pageTitle":"[Mac] 掛載 EFI 磁區方式","url":"/moco/machintosh/hackintosh_mount-efi-partition/#see-also","content":" MacOS 磁碟管理工具 diskutil 介紹 ","version":"Next","tagName":"h2"},{"title":"[Mac] Macbook Air 2011 安裝 Mojava/Catalina","type":0,"sectionRef":"#","url":"/moco/machintosh/hackintosh_mba2011/","content":"","keywords":"","version":"Next"},{"title":"準備工作​","type":1,"pageTitle":"[Mac] Macbook Air 2011 安裝 Mojava/Catalina","url":"/moco/machintosh/hackintosh_mba2011/#準備工作","content":" 確認主機型號，並非所有舊電腦都可以透過 Patcher 安裝 Mojava/Catalina， 官方有列出支援的主機，請自行參考官網說明。    Macbook Air 2011 系統型號為 MacBookAir4.2在官方支援的機型中，可以進行後續準備動作。  16G 以上隨身碟macOS Mojava PatchermacOS Mojava Installer 建議預先下載官方 macOS 系統安裝程序，亦可透過 Mojava Patcher 下載。   ","version":"Next","tagName":"h2"},{"title":"製作安裝碟​","type":1,"pageTitle":"[Mac] Macbook Air 2011 安裝 Mojava/Catalina","url":"/moco/machintosh/hackintosh_mba2011/#製作安裝碟","content":" 將隨身碟格式化成GUID的擴充格式（日誌式）    執行 macOS Mojava Patcher    分別選擇已下載的 Installer、剛剛格式化的隨身碟後按 Start Operation...    系統會跳出一些存取權限的請求警示視窗，一一確認後即開始製作安裝碟。      ","version":"Next","tagName":"h2"},{"title":"安裝系統​","type":1,"pageTitle":"[Mac] Macbook Air 2011 安裝 Mojava/Catalina","url":"/moco/machintosh/hackintosh_mba2011/#安裝系統","content":" USB 開機碟製作完成後，在 Macbook Air 2011 上使用隨身碟開機與安裝系統， 安裝選單介面略有不同，但安裝流程和一般安裝 macOS 並無不同。      安裝完成之後，會重新啟動電腦。 正常來說，重新啟動之後就完成系統安裝， 不過不要忘了這台電腦是不被原廠允許安裝這個作業系統的， 所以需要再次透過 USB 隨身碟開機，安裝修正檔。  ","version":"Next","tagName":"h2"},{"title":"安裝修正檔​","type":1,"pageTitle":"[Mac] Macbook Air 2011 安裝 Mojava/Catalina","url":"/moco/machintosh/hackintosh_mba2011/#安裝修正檔","content":" 第一次開機的時候按下 Option 不放，再次選擇USB安裝磁碟。 這次回來安裝畫面之後，選擇下方的這個 macOS Post Install。    執行之後，軟體自動判斷你這台機型應該是哪台， 可以確認一下軟體判斷的是否為前面步驟所查的型號 MacBookAir4,2下面這一堆有的打勾、有的沒打勾的，就是適合這台安裝的一些修正。    選擇所要安裝的系統磁碟後安裝， 等候修正程序安裝完成之後重新開機就可以正確進入 macOS 10.14。    第一次進入系統後會自動跳出 Patch Updater， 讓他自動安裝需要的更新後再次重新開機，就可以快樂使用 Mojave 了。    後續的系統更新有時可以直接安裝，有時會有問題。 出錯時大多情況下重新跑一次 Patch Updater 即可。 不過在進行系統更新前，最好先去 Mojava Patcher 官網確認支援情況後再更新。 也就是非必要的話，無須第一時間更新系統。  ","version":"Next","tagName":"h2"},{"title":"後記​","type":1,"pageTitle":"[Mac] Macbook Air 2011 安裝 Mojava/Catalina","url":"/moco/machintosh/hackintosh_mba2011/#後記","content":" 因手上其他筆電皆為 macOS BigSur，介面操作和權限管理上和 Catalina 較為相近， 所以又把 MacBook Air 重新安裝 Catalina。  安裝流程大致雷同，就不另筆記了。  ","version":"Next","tagName":"h2"},{"title":"See Also​","type":1,"pageTitle":"[Mac] Macbook Air 2011 安裝 Mojava/Catalina","url":"/moco/machintosh/hackintosh_mba2011/#see-also","content":" 上述流程和參考資料幾乎一樣，有部分內容也是直接引用參考資料。 所以發文，一來自己紀錄過會比較有記憶點， 二者網路資源隨時消逝，可能下回有需要安裝時就找不到資源了。  感謝前人整理的資訊，本篇安裝筆記分享之。  最後再次提醒： 越獄安裝 macOS Mojava/Catalina 在非官方支援的硬體設備中，仍存有不穩定的風險，後果自負。  [OS X] 《吉米教你用》JB的方式讓你的老Mac可以跑macOS Mojave 10.14 - iPhone4.TW [OS X] 《吉米教你用》JB的方式讓你的老Mac可以跑macOS Catalina 10.15 - iPhone4.TW非支援機種 macOS 10.15 Catalina USB 安裝工具與重灌 | 民樂電腦在官方不支援macOS Catalina的裝置安裝macOS Catalina - 酷小易macOS Catalina Patcher(如何在旧mac上安装Catalina系统) - 知乎 如何取得舊版 macOS 作業系統 - 我和我的黑蘋果 ","version":"Next","tagName":"h2"},{"title":"[Spring] @Value Annotation","type":0,"sectionRef":"#","url":"/moco/java/springboot/spring/spring_value-annotation/","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"[Spring] @Value Annotation","url":"/moco/java/springboot/spring/spring_value-annotation/#overview","content":" The @Value Spring annotation can be used for injecting values into fields in Spring-managed beans, and it can be applied at the field or constructor/method parameter level.  ","version":"Next","tagName":"h2"},{"title":"Setting Up the Application​","type":1,"pageTitle":"[Spring] @Value Annotation","url":"/moco/java/springboot/spring/spring_value-annotation/#setting-up-the-application","content":" To configure a simple Spring application configuration class for describe this annotation. We needs a properties file to define the values we want to inject with the @Value annotation. And so, we'll first need to define a @PropertySource in our configuration class — with the properties file name.  Let's define the properties file:  value.from.file=Value got from the file priority=high listOfValues=A,B,C   ","version":"Next","tagName":"h2"},{"title":"Usage Examples​","type":1,"pageTitle":"[Spring] @Value Annotation","url":"/moco/java/springboot/spring/spring_value-annotation/#usage-examples","content":" ","version":"Next","tagName":"h2"},{"title":"Valued​","type":1,"pageTitle":"[Spring] @Value Annotation","url":"/moco/java/springboot/spring/spring_value-annotation/#valued","content":" As a basic and mostly useless example, we can only inject “string value” from the annotation to the field:  @Value(&quot;string value&quot;) private String stringValue;   上面語法在 annotation 直接給值, 將 stringValue 設為 &quot;string value&quot;, 效果和 private String stringValue = &quot;string value&quot; 是一樣的. 實務上並無使用 annotation 的意義.  ","version":"Next","tagName":"h3"},{"title":"PropertySource​","type":1,"pageTitle":"[Spring] @Value Annotation","url":"/moco/java/springboot/spring/spring_value-annotation/#propertysource","content":" Using the @PropertySource annotation allows us to work with values from properties files with the @Value annotation.  In the following example, we get Value got from the file assigned to the field:  @Value(&quot;${value.from.file}&quot;) private String valueFromFile;   類似 BASH 的字串處理, 字串中的 ${VARIABLE} 會先行解析為對應的值. 而 Spring Framework 中會找尋 application properties 是否存在對應的 Key.  ","version":"Next","tagName":"h3"},{"title":"System properties​","type":1,"pageTitle":"[Spring] @Value Annotation","url":"/moco/java/springboot/spring/spring_value-annotation/#system-properties","content":" We can also set the value from system properties with the same syntax.  Let's assume that we have defined a system property named systemValue:  @Value(&quot;${systemValue}&quot;) private String systemValue;   ","version":"Next","tagName":"h3"},{"title":"Default value​","type":1,"pageTitle":"[Spring] @Value Annotation","url":"/moco/java/springboot/spring/spring_value-annotation/#default-value","content":" Default values can be provided for properties that might not be defined. Here, the value some default will be injected:  @Value(&quot;${unknown.param:some default}&quot;) private String someDefault;   @Value annotation 各種物件 default value 的進一步介紹可參考 @Value Defaults  ","version":"Next","tagName":"h3"},{"title":"Properties priority​","type":1,"pageTitle":"[Spring] @Value Annotation","url":"/moco/java/springboot/spring/spring_value-annotation/#properties-priority","content":" If the same property is defined as a system property and in the properties file, then the system property would be applied.  Suppose we had a property priority defined as a system property with the value System property and defined as something else in the properties file. The value would be System property:  @Value(&quot;${priority}&quot;) private String prioritySystemProperty;   在 Sprint Framework 中, System property 的優先度高於其他設定, 若有多個 property 中有相同名字, 會以 System property 為引用的值.  ","version":"Next","tagName":"h3"},{"title":"List / Array​","type":1,"pageTitle":"[Spring] @Value Annotation","url":"/moco/java/springboot/spring/spring_value-annotation/#list--array","content":" To inject a bunch of values, it would be convenient to define them as comma-separated values for the single property in the properties file or as a system property and to inject into an array.  In the first section, we defined comma-separated values in the listOfValues of the properties file, so the array values would be [“A”, “B”, “C”]:  @Value(&quot;${listOfValues}&quot;) private String[] valuesArray;   ","version":"Next","tagName":"h3"},{"title":"Advanced Examples With SpEL​","type":1,"pageTitle":"[Spring] @Value Annotation","url":"/moco/java/springboot/spring/spring_value-annotation/#advanced-examples-with-spel","content":" We can also use SpEL expressions to get the value.  If we have a system property named priority, then its value will be applied to the field:  @Value(&quot;#{systemProperties['priority']}&quot;) private String spelValue;   If we have not defined the system property, then the null value will be assigned.  上面語法讀取 systemProperties 中的 priority 來注入使用. 透過 SpEL 來讀取 property 可避免多個 property 有相同 key 導致執行時錯誤.  若 PropertySource 中有 priority 的值為 &quot;propertySource priority&quot;, 而 systemProperty 中找不到 priority:  @Value(&quot;${priority}&quot;) private String priorityProperty; @Value(&quot;#{systemProperties['priority']}&quot;) private String spelValue;   priorityProperty 的值為 &quot;propertySource priority&quot;, 而 spelValue 為 null.  ","version":"Next","tagName":"h2"},{"title":"default value​","type":1,"pageTitle":"[Spring] @Value Annotation","url":"/moco/java/springboot/spring/spring_value-annotation/#default-value-1","content":" The default value in the SpEL expression a bit complex then behind,some default value for the field if the system property is not defined:  @Value(&quot;#{systemProperties['unknown'] ?: 'some default'}&quot;) private String spelSomeDefault;   ","version":"Next","tagName":"h3"},{"title":"from other beans​","type":1,"pageTitle":"[Spring] @Value Annotation","url":"/moco/java/springboot/spring/spring_value-annotation/#from-other-beans","content":" Suppose we have a bean named someBean with a field someValue equal to 10. Then, 10 will be assigned to the field:  @Value(&quot;#{someBean.someValue}&quot;) private Integer someBeanValue;   ","version":"Next","tagName":"h3"},{"title":"List​","type":1,"pageTitle":"[Spring] @Value Annotation","url":"/moco/java/springboot/spring/spring_value-annotation/#list","content":" We can manipulate properties to get a List of values, here, a list of string values A, B, and C:  @Value(&quot;#{'${listOfValues}'.split(',')}&quot;) private List&lt;String&gt; valuesList;   ","version":"Next","tagName":"h3"},{"title":"Using @Value With Maps​","type":1,"pageTitle":"[Spring] @Value Annotation","url":"/moco/java/springboot/spring/spring_value-annotation/#using-value-with-maps","content":" We can also use the @Value annotation to inject a Map property.  First, we'll need to define the property in the {key: ‘value' } form in our properties file:  valuesMap={key1: '1', key2: '2', key3: '3'}   Note that the values in the Map must be in single quotes.  Now we can inject this value from the property file as a Map:  @Value(&quot;#{${valuesMap}}&quot;) private Map&lt;String, Integer&gt; valuesMap;   If we need to get the value of a specific key in the Map, all we have to do is add the key's name in the expression:  @Value(&quot;#{${valuesMap}.key1}&quot;) private Integer valuesMapKey1;   If we're not sure whether the Map contains a certain key, we should choosea safer expression that will not throw an exception but set the value to nullwhen the key is not found:  @Value(&quot;#{${valuesMap}['unknownKey']}&quot;) private Integer unknownMapKey;   We can also set default values for the properties or keys that might not exist:  @Value(&quot;#{${unknownMap : {key1: '1', key2: '2'}}}&quot;) private Map&lt;String, Integer&gt; unknownMap; @Value(&quot;#{${valuesMap}['unknownKey'] ?: 5}&quot;) private Integer unknownMapKeyWithDefaultValue;   Map entries can also be filtered before injection.  Let's assume we need to get only those entries whose values are greater than one:  @Value(&quot;#{${valuesMap}.?[value&gt;'1']}&quot;) private Map&lt;String, Integer&gt; valuesMapFiltered;   We can also use the @Value annotation to inject all current system properties:  @Value(&quot;#{systemProperties}&quot;) private Map&lt;String, String&gt; systemPropertiesMap;   ","version":"Next","tagName":"h2"},{"title":"Using @Value With Constructor Injection​","type":1,"pageTitle":"[Spring] @Value Annotation","url":"/moco/java/springboot/spring/spring_value-annotation/#using-value-with-constructor-injection","content":" When we use the @Value annotation, we're not limited to a field injection.We can also use it together with constructor injection.  Let's see this in practice:  @Component @PropertySource(&quot;classpath:values.properties&quot;) public class PriorityProvider { private String priority; @Autowired public PriorityProvider(@Value(&quot;${priority:normal}&quot;) String priority) { this.priority = priority; } // standard getter }   In the above example, we inject a priority directly into our PriorityProvider‘s constructor.  Note that we also provide a default value in case the property isn't found.  ","version":"Next","tagName":"h2"},{"title":"Using @Value With Setter Injection​","type":1,"pageTitle":"[Spring] @Value Annotation","url":"/moco/java/springboot/spring/spring_value-annotation/#using-value-with-setter-injection","content":" Analogous to the constructor injection, we can also use @Value with setter injection.  Let's take a look:  @Component @PropertySource(&quot;classpath:values.properties&quot;) public class CollectionProvider { private List&lt;String&gt; values = new ArrayList&lt;&gt;(); @Autowired public void setValues(@Value(&quot;#{'${listOfValues}'.split(',')}&quot;) List&lt;String&gt; values) { this.values.addAll(values); } // standard getter }   We use the SpEL expression to inject a list of values into the setValues method.  ","version":"Next","tagName":"h2"},{"title":"Using @Value With Records​","type":1,"pageTitle":"[Spring] @Value Annotation","url":"/moco/java/springboot/spring/spring_value-annotation/#using-value-with-records","content":" Java 14 introduced records to facilitate the creation of an immutable class.The Spring framework supports @Value for record injection since version 6.0.6:  @Component @PropertySource(&quot;classpath:values.properties&quot;) public record PriorityRecord(@Value(&quot;${priority:normal}&quot;) String priority) {}   Here, we inject the value directly into the record's constructor.  ","version":"Next","tagName":"h2"},{"title":"Conclusion​","type":1,"pageTitle":"[Spring] @Value Annotation","url":"/moco/java/springboot/spring/spring_value-annotation/#conclusion","content":" This article examined the various possibilities of using the @Value annotation with simple properties defined in the file, with system properties, and with properties calculated with SpEL expressions.  As always, the example application is available on the GitHub project.  ","version":"Next","tagName":"h2"},{"title":"See Also​","type":1,"pageTitle":"[Spring] @Value Annotation","url":"/moco/java/springboot/spring/spring_value-annotation/#see-also","content":" GitHub projectValue Defaults ","version":"Next","tagName":"h2"},{"title":"[Mac] Maestral, Open source Dropbox client","type":0,"sectionRef":"#","url":"/moco/machintosh/mac-app_maestral/","content":"","keywords":"","version":"Next"},{"title":"Features​","type":1,"pageTitle":"[Mac] Maestral, Open source Dropbox client","url":"/moco/machintosh/mac-app_maestral/#features","content":" ","version":"Next","tagName":"h2"},{"title":"CLI mode​","type":1,"pageTitle":"[Mac] Maestral, Open source Dropbox client","url":"/moco/machintosh/mac-app_maestral/#cli-mode","content":" View and restore previous file versions, Create and revoke shared links, See a live view of all sync activity Directly from the CLI commands.  ","version":"Next","tagName":"h3"},{"title":"Multi-user​","type":1,"pageTitle":"[Mac] Maestral, Open source Dropbox client","url":"/moco/machintosh/mac-app_maestral/#multi-user","content":" The CLI allows configuring an unlimited number of Dropbox accounts. Just pass a new config name when linking a new account.  ","version":"Next","tagName":"h3"},{"title":".mignore​","type":1,"pageTitle":"[Mac] Maestral, Open source Dropbox client","url":"/moco/machintosh/mac-app_maestral/#mignore","content":" Exclude local items from syncing by placing an .mignore file in the Dropbox root with patterns matching any number of items.  ","version":"Next","tagName":"h3"},{"title":"Unlimited number of devices​","type":1,"pageTitle":"[Mac] Maestral, Open source Dropbox client","url":"/moco/machintosh/mac-app_maestral/#unlimited-number-of-devices","content":" Maestral is not an official Dropbox App. It therefore does not count towards the three devices limit for Basic Dropbox accounts.  ","version":"Next","tagName":"h3"},{"title":"CROS​","type":1,"pageTitle":"[Mac] Maestral, Open source Dropbox client","url":"/moco/machintosh/mac-app_maestral/#cros","content":" 初步使用發現的缺點大概是初始同步時比官方 App 來得慢, 且不支援 Lan sync. 其他幾乎沒有什麼缺點, 是個取代官方 App 的好工具. ","version":"Next","tagName":"h3"},{"title":"[Mac] MarkText","type":0,"sectionRef":"#","url":"/moco/machintosh/mac-app_marktext/","content":"","keywords":"","version":"Next"},{"title":"install​","type":1,"pageTitle":"[Mac] MarkText","url":"/moco/machintosh/mac-app_marktext/#install","content":" $ brew install --cask marktext   ","version":"Next","tagName":"h2"},{"title":"troubleshooting​","type":1,"pageTitle":"[Mac] MarkText","url":"/moco/machintosh/mac-app_marktext/#troubleshooting","content":" Apple M1 系列安裝後會出現套件損毀訊息, 需執行以下指令修復  $ xattr -cr MarkText.app   Ref: Cannot install MarkText 0.17.0rc2-arm64 on M1 MacBook Air · Issue #2983 · marktext/marktext ","version":"Next","tagName":"h3"},{"title":"[Mac] Raycast","type":0,"sectionRef":"#","url":"/moco/machintosh/mac-app_raycast/","content":"","keywords":"","version":"Next"},{"title":"See Also​","type":1,"pageTitle":"[Mac] Raycast","url":"/moco/machintosh/mac-app_raycast/#see-also","content":" Mac 生產力工具排名要大洗牌了？Raycast 讓一切操作在彈指之間輕鬆完成！ - YouTubeRaycast：Mac OS 最強生產力工具 App，告訴你為什麼它比 Alfred 跟 Spotlight 更好用 - YouTube【MacBook】免费效率软件推荐 raycast能做的10件事 - YouTube ","version":"Next","tagName":"h2"},{"title":"[Mac] iftop 安裝失敗與解決方式","type":0,"sectionRef":"#","url":"/moco/machintosh/mac-note_install-iftop/","content":"[Mac] iftop 安裝失敗與解決方式 測試 Rclone 伺服機端傳輸時發覺 macOS 並無 iftop 指令, 習慣性地用 brew 安裝了. $ brew install iftop ... ... iftop requires root privileges so you will need to run `sudo iftop`. You should be certain that you trust any software you grant root privileges. 安裝完成後提示 iftop 這個指令需要用 root 權限執行. 然而使用 sudo iftop 之後卻出現 command not found 的錯誤. $sudo iftop sudo: iftop: command not found 上網查了查, 看到這篇 一次macbook安装iftop失败的经历及解决方式_偷懒的加菲-CSDN博客 跟著該文敘述一一確認後, 發覺我電腦上只存在著 sbin 不在 path 環境變數的問題. $ sudo vim /etc/paths 打開後發覺裡面有 /usr/local/bin, 但沒有 /usr/local/sbin. 手動把 /usr/local/sbin 加入, 存檔, 重啟終端機. 成功. 紀錄之.","keywords":"","version":"Next"},{"title":"[Mac] 製作 macOS 安裝 ISO 檔","type":0,"sectionRef":"#","url":"/moco/machintosh/mac-note_make-installer-iso/","content":"[Mac] 製作 macOS 安裝 ISO 檔 Apple 官方有 如何製作 macOS 啟動安裝程式 的詳盡說明. 在這篇說明中並沒有明指特定開機媒體, 可以為任何可掛載的裝置. 網路上有不少如何 製作 macOS 系統安裝隨身碟 的文章, 主要步驟和指令也和官方一樣, 只是更詳盡的說明如格式化或命名 USB 隨身碟, 避免初學者混淆犯錯. 製作 macOS installer ISO 基本概念為, 建立一個 dmg 檔後掛載, 把下載的 macOS installer 透過官方 createinstallmedia 指令安裝到剛剛掛載的磁碟, 卸載後再把 dmg 檔轉為 ISO 格式. 流程與指令如後: 建立一個 13GB 大小的 dmg 檔，存在 /tmp 目錄 macOS Big Sur 來講, 大小約 12.5GB. 以 hdiutil 指令來產生一個 dmg檔. $ hdiutil create -o /tmp/bigSur -size 13000m -layout SPUD -fs HFS+J 掛載 dmg 檔 $ hdiutil attach /tmp/bigSur.dmg -noverify -mountpoint /Volumes/install_build 將安裝程式轉到 volume 透過官方的 createinstallmedia 指令製作 installer media. $ cd /Applications/Install\\ macOS\\ Big\\ Sur.app/Contents/Resources $ sudo ./createinstallmedia --volume /Volumes/install_build 卸載 volume $ umount /Volumes/install_build 將 dmg 轉為 cdr 格式 $ hdiutil convert /tmp/bigSur.dmg -format UDTO -o /tmp/bigSur $ mv /tmp/bigSur.cdr /tmp/bigSur.iso 在 tmp 目錄裡, 雖然已經轉成 iso 檔, 但 dmg 檔還是會留著. 可自行評估空間決定是否需要留著 dmg 檔. Reference 將下載在電腦裡的macOS 安裝程式轉成 iso檔 - 彼得潘的 Swift iOS App 開發教室 - Medium[macOS]製作 macOS Big Sur 11.0 系統安裝映像檔(ISO、DMG) - 科技阿宅王","keywords":"","version":"Next"},{"title":"[Mac] macOS BigSur 刪除 Mojava/Catalina 映像檔","type":0,"sectionRef":"#","url":"/moco/machintosh/mac-note_remove-installer-dmg/","content":"","keywords":"","version":"Next"},{"title":"SIP​","type":1,"pageTitle":"[Mac] macOS BigSur 刪除 Mojava/Catalina 映像檔","url":"/moco/machintosh/mac-note_remove-installer-dmg/#sip","content":" 在 OS X El Capital 及後來的版本中, macOS 多了個與系統安全有關的模式 -系統完整保護 (System Integrity Protection, 簡稱 SIP). 能在一定程度上保護 macOS 避免一些惡意軟體侵襲. 但也會造成少數正當程式無法安裝, 或像這次的情況一樣, Installer DMG 無法刪除等奇怪問題.  而 macOS SIP 該不該打開眾說紛紜, 對於工程師或資深玩家來說, SIP 大多時候是造成困擾的, 因此也有不少建議關閉的文章.  macOS安装某些应用为什么要关闭sip，关闭sip的利与弊_放飞梦想展翅高飞的博客-CSDN博客关闭 macOS 的 System Integrity Protection 有哪些风险？ - 知乎  ","version":"Next","tagName":"h3"},{"title":"檢查 SIP 是否啟用​","type":1,"pageTitle":"[Mac] macOS BigSur 刪除 Mojava/Catalina 映像檔","url":"/moco/machintosh/mac-note_remove-installer-dmg/#檢查-sip-是否啟用","content":" $ csrutil status     ","version":"Next","tagName":"h3"},{"title":"關閉 SIP​","type":1,"pageTitle":"[Mac] macOS BigSur 刪除 Mojava/Catalina 映像檔","url":"/moco/machintosh/mac-note_remove-installer-dmg/#關閉-sip","content":" 重新開機後按住 Command + R, 進入復原模式. 實用工具 &gt; 終端機  $ csrutil disable   輸入後重新開機回 macOS, 就可以把映像檔刪掉了.  ","version":"Next","tagName":"h3"},{"title":"開啟 SIP​","type":1,"pageTitle":"[Mac] macOS BigSur 刪除 Mojava/Catalina 映像檔","url":"/moco/machintosh/mac-note_remove-installer-dmg/#開啟-sip","content":" 只要有良好電腦使用習慣, 關閉 SIP 並不會損害電腦. 使用習關不佳, 打開 SIP 也不會比較安全. 不過若想維持系統預設狀態, 可以重新開機到復原模式下啟用 SIP.  $ csrutil enable   Disabling and Enabling System Integrity Protection | Apple Developer Documentation[教學] 如何關閉 Mac 上的系統完整保護（SIP）macOS 开启或关闭 SIP - 少数派  ","version":"Next","tagName":"h3"},{"title":"後記​","type":1,"pageTitle":"[Mac] macOS BigSur 刪除 Mojava/Catalina 映像檔","url":"/moco/machintosh/mac-note_remove-installer-dmg/#後記","content":" 近來蘋果高層抱怨 macOS 惡意軟體的新聞不少, 以後 macOS 版本類似保固機制可能會越來越多.  開放用戶安裝未授權軟體！蘋果坦承Mac存在大量惡意程式 | 科技 | 新頭殼 NewtalkCraig Federighi：Mac惡意程式多到不可接受 » 網路資訊雜誌  如何在保護和使用便捷之間尋得最好的取捨, 相關議題 Windows 可說一直是不及格的, 期待 macOS 能優雅的找出解法. ","version":"Next","tagName":"h3"},{"title":"[Mac] shadowsocks setup","type":0,"sectionRef":"#","url":"/moco/machintosh/mac-note_install-shadowsocks/","content":"","keywords":"","version":"Next"},{"title":"安裝 shadowsocks-libev​","type":1,"pageTitle":"[Mac] shadowsocks setup","url":"/moco/machintosh/mac-note_install-shadowsocks/#安裝-shadowsocks-libev","content":" Shadowsocks 有不少 client 可用, 我選用 shadowsocks-libev. 他可以當系統服務, 也可以透過不少 plugin 來擴充功能, 相當強大方便.  透過套件管理工具 homebrew 即可安裝 shadowsocks-libev.  $ brew update $ brew install shadowsocks-libev ... To have launchd start shadowsocks-libev now and restart at login: brew services start shadowsocks-libev Or, if you don't want/need a background service you can just run: /usr/local/opt/shadowsocks-libev/bin/ss-local -c /usr/local/etc/shadowsocks-libev.json   出現後面這些訊息表示安裝成功, 先透過 CLI 確認 SS 連線可以正確 work.  $ ss-local -s &lt;SERVER_IP&gt; -p &lt;SERVER_PORT&gt; -k &lt;PASSWORD&gt; -b 0.0.0.0 -l 1080-m aes-256-gcm 2021-03-15 17:28:36 INFO: initializing ciphers... aes-256-gcm 2021-03-15 17:28:36 INFO: listening at 0.0.0.0:1080   出現 listening at 0.0.0.0:1080 表示 SS 連線成功, 可參考後面段落設置 Socks Proxy, 連線上網確認是否正確.  ","version":"Next","tagName":"h2"},{"title":"設定 shadowsocks-libev​","type":1,"pageTitle":"[Mac] shadowsocks setup","url":"/moco/machintosh/mac-note_install-shadowsocks/#設定-shadowsocks-libev","content":" shadowsocks-libev 可以服務方式運行, 配置文件在 /usr/local/etc/shadowsocks-libev.json  { &quot;server&quot;:&quot;abc.xyz.com&quot;, &quot;server_port&quot;:8888, &quot;local_port&quot;:1080, &quot;password&quot;:&quot;AbCdEfGhIjKlMn&quot;, &quot;timeout&quot;:5, &quot;method&quot;:&quot;chacha20-ietf-poly1305&quot;, &quot;mode&quot;:&quot;tcp_and_udp&quot;, }   修改後可透過 brew services 啟動服務.  $ brew services start shadowsocks-libev ==&gt; Successfully started `shadowsocks-libev` (label: homebrew.mxcl.shadowsocks-libev)   ","version":"Next","tagName":"h2"},{"title":"全區代理設定​","type":1,"pageTitle":"[Mac] shadowsocks setup","url":"/moco/machintosh/mac-note_install-shadowsocks/#全區代理設定","content":" macOS 可透過全區代理的方式, 讓所有連線都使用 SS 當跳板. 設定方式在:系統偏好設定 &gt; 網路 &gt; Wi-Fi &gt; 進階 &gt; 代理      在 SOCKS 欄位填上本地端對應的資訊即可.  ","version":"Next","tagName":"h2"},{"title":"快速開關代理​","type":1,"pageTitle":"[Mac] shadowsocks setup","url":"/moco/machintosh/mac-note_install-shadowsocks/#快速開關代理","content":" 一般來說不會設定為全區代理, 會透過 PAC 來設定白名單等自動代理. 但我個人需求比較簡單, 需要處理公務時開啟代理連線管理後台, 處理完畢即可關閉代理.  因此設定了簡單的 alias, 透過 CLI 來快速開關代理.  alias proxyon='brew services restart shadowsocks-libev; networksetup -setsocksfirewallproxy wi-fi localhost 1080' alias proxyoff='brew services stop shadowsocks-libev; networksetup -setsocksfirewallproxystate wi-fi off'   之後需要連線後台時, 在 Ternimal 打 poxyon 即可透過代理連線.  $ proxyon ==&gt; Successfully started `shadowsocks-libev` (label: homebrew.mxcl.shadowsocks-libev)   處理完畢後, 打 proxyoff 關閉代理, 回到原生網魯環境.  $ proxyoff Stopping `shadowsocks-libev`... (might take a while) ==&gt; Successfully stopped `shadowsocks-libev` (label: homebrew.mxcl.shadowsocks-libev)   ","version":"Next","tagName":"h2"},{"title":"See Also​","type":1,"pageTitle":"[Mac] shadowsocks setup","url":"/moco/machintosh/mac-note_install-shadowsocks/#see-also","content":" ","version":"Next","tagName":"h2"},{"title":"Reference​","type":1,"pageTitle":"[Mac] shadowsocks setup","url":"/moco/machintosh/mac-note_install-shadowsocks/#reference","content":" MacOS使用shadowsocks-libev+Simple-OBFS教程 - YAN LONG - MediumShadowSocks助力macOS科学上网 | Marvin's Blog【程式人生】Shadowsocks · Mac OS X 配置指南shadowsocks-libev &amp; acl on macOS'shadowsocks-libev+simple-obfs流量混淆的两种方案' | 无名老卒BLOG苹果 macOS 使用 Shadowsocks 设置教程 | Shadowsocksmacos - How to set proxy on OS X Terminal permanently? - Ask Different ","version":"Next","tagName":"h3"},{"title":"[Mac] macOS 實用小技巧與工具","type":0,"sectionRef":"#","url":"/moco/machintosh/mac-tip_awesome/","content":"","keywords":"","version":"Next"},{"title":"Setting​","type":1,"pageTitle":"[Mac] macOS 實用小技巧與工具","url":"/moco/machintosh/mac-tip_awesome/#setting","content":" ","version":"Next","tagName":"h2"},{"title":"Mac 會自己改變 Desktop 位置的問題​","type":1,"pageTitle":"[Mac] macOS 實用小技巧與工具","url":"/moco/machintosh/mac-tip_awesome/#mac-會自己改變-desktop-位置的問題","content":" System Preferences &gt; Mission Control Uncheck Automatically rearrange Spaces based on most recent use.    Ref: Mac 會自己改變 Desktop 位置的問題 – Gea-Suan Lin's BLOGmacos - How to prevent Mac from changing the order of Desktops/Spaces - Ask Different  ","version":"Next","tagName":"h3"},{"title":"Finder 讓資料夾自動排列在上方​","type":1,"pageTitle":"[Mac] macOS 實用小技巧與工具","url":"/moco/machintosh/mac-tip_awesome/#finder-讓資料夾自動排列在上方","content":" 打開 Finder 上方偏好設定    進到進階頁籤, 建議勾選:  顯示所有檔案副檔名將檔案夾保留在最上方（二個都勾起來） 這樣之後在 Finder 中查看檔案時, 資料夾就會自動排序在上方囉.    Ref: macOS 新手使用必學的五個小技巧，操作更加順手 | 就是教不落 - 給你最豐富的 3C 資訊、教學網站  ","version":"Next","tagName":"h3"},{"title":"Terminal & CLI​","type":1,"pageTitle":"[Mac] macOS 實用小技巧與工具","url":"/moco/machintosh/mac-tip_awesome/#terminal--cli","content":" ","version":"Next","tagName":"h2"},{"title":"找出被佔用的 IP 及port find IP port usage​","type":1,"pageTitle":"[Mac] macOS 實用小技巧與工具","url":"/moco/machintosh/mac-tip_awesome/#找出被佔用的-ip-及port-find-ip-port-usage","content":" Mac 是Unix-like 系統, 可在 terminal 使用 lsof -n -i | grep LISTEN 找出系統中正被使用的 port IP 及使用的程序.  如果要找出特定port號是否有被使用, 使用 lsof -n -i:&lt;port&gt; | grep LISTEN. port 為要查詢的port號。  lsof -n -i | grep LISTEN lsof -n -i:&lt;port&gt; | grep LISTEN   Ref: Mac 找出被佔用的IP及port find IP port usage  ","version":"Next","tagName":"h3"},{"title":"Shell script​","type":1,"pageTitle":"[Mac] macOS 實用小技巧與工具","url":"/moco/machintosh/mac-tip_awesome/#shell-script","content":" ","version":"Next","tagName":"h2"},{"title":"Check Operating System is Mac​","type":1,"pageTitle":"[Mac] macOS 實用小技巧與工具","url":"/moco/machintosh/mac-tip_awesome/#check-operating-system-is-mac","content":" if [[ $OSTYPE == 'darwin'* ]]; then echo 'macOS' fi   Ref: Bash: Check Operating System is Mac  ","version":"Next","tagName":"h3"},{"title":"See Also​","type":1,"pageTitle":"[Mac] macOS 實用小技巧與工具","url":"/moco/machintosh/mac-tip_awesome/#see-also","content":" 提高 Mac 生產力的高效小技巧！有些小彩蛋不說還真不知道哩 ~ 🥸 - YouTube10 MUST-KNOW Macbook Tips for Productivity! - YouTube ","version":"Next","tagName":"h2"},{"title":"[Mac] 自動依 Wifi 名稱更改網路位置","type":0,"sectionRef":"#","url":"/moco/machintosh/mac-util_location-changer/","content":"","keywords":"","version":"Next"},{"title":"Installation & Update​","type":1,"pageTitle":"[Mac] 自動依 Wifi 名稱更改網路位置","url":"/moco/machintosh/mac-util_location-changer/#installation--update","content":" curl -L https://github.com/eprev/locationchanger/raw/master/locationchanger.sh | bash   ","version":"Next","tagName":"h3"},{"title":"Cconfiguration​","type":1,"pageTitle":"[Mac] 自動依 Wifi 名稱更改網路位置","url":"/moco/machintosh/mac-util_location-changer/#cconfiguration","content":" ","version":"Next","tagName":"h3"},{"title":"Remove locationchanger​","type":1,"pageTitle":"[Mac] 自動依 Wifi 名稱更改網路位置","url":"/moco/machintosh/mac-util_location-changer/#remove-locationchanger","content":" # Unload and remove launch agent launchctl unload -w ~/Library/LaunchAgents/LocationChanger.plist rm ~/Library/LaunchAgents/LocationChanger.plist # Remove locationchanger binary sudo rm /usr/local/bin/locationchanger # Remove config rm ~/.locations/locations.conf # Remove logs rm ~/Library/Logs/LocationChanger.log  ","version":"Next","tagName":"h3"},{"title":"[Mac] 開發環境建構 2022.Aug","type":0,"sectionRef":"#","url":"/moco/machintosh/mac-setup_dev-env/","content":"","keywords":"","version":"Next"},{"title":"CLI Environment​","type":1,"pageTitle":"[Mac] 開發環境建構 2022.Aug","url":"/moco/machintosh/mac-setup_dev-env/#cli-environment","content":" ","version":"Next","tagName":"h2"},{"title":"iTerm2​","type":1,"pageTitle":"[Mac] 開發環境建構 2022.Aug","url":"/moco/machintosh/mac-setup_dev-env/#iterm2","content":" brew install iterm2   ","version":"Next","tagName":"h3"},{"title":"zsh and oh-my-zsh​","type":1,"pageTitle":"[Mac] 開發環境建構 2022.Aug","url":"/moco/machintosh/mac-setup_dev-env/#zsh-and-oh-my-zsh","content":" macOS Mojave (10.14.x) 開始內建 zsh, 而 Catalina (10.15.x) 以後預設 Shell 改為 zsh.  在 macOS Mojave 系統要把預設 shell 改為 zsh 以及配置 zsh 最方便也推薦的方式就是透過 Oh My Zsh  Oh My Zsh  macOS Mojave 以後已經內建 Zsh, 所以直接安裝 Oh My Zsh 即可.  sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;   brew install zsh-completion   ","version":"Next","tagName":"h3"},{"title":"Powerline Font​","type":1,"pageTitle":"[Mac] 開發環境建構 2022.Aug","url":"/moco/machintosh/mac-setup_dev-env/#powerline-font","content":" brew tap homebrew/cask-fonts brew install font-fira-code font-fira-mono font-fira-sans brew install font-source-code-pro brew install font-hack-nerd-font   ","version":"Next","tagName":"h3"},{"title":"Base Environment​","type":1,"pageTitle":"[Mac] 開發環境建構 2022.Aug","url":"/moco/machintosh/mac-setup_dev-env/#base-environment","content":" ","version":"Next","tagName":"h2"},{"title":"Docker​","type":1,"pageTitle":"[Mac] 開發環境建構 2022.Aug","url":"/moco/machintosh/mac-setup_dev-env/#docker","content":" brew install docker   ","version":"Next","tagName":"h3"},{"title":"Brew formulae​","type":1,"pageTitle":"[Mac] 開發環境建構 2022.Aug","url":"/moco/machintosh/mac-setup_dev-env/#brew-formulae","content":" brew install git tig zsh-completion tmux ncdu htop lesspipe sshtrix tldr diff-so-fancy fd ripgrep rclone thefuck ag svn moreutils asdf   ","version":"Next","tagName":"h3"},{"title":"Program Language​","type":1,"pageTitle":"[Mac] 開發環境建構 2022.Aug","url":"/moco/machintosh/mac-setup_dev-env/#program-language","content":" ","version":"Next","tagName":"h2"},{"title":"Node.js​","type":1,"pageTitle":"[Mac] 開發環境建構 2022.Aug","url":"/moco/machintosh/mac-setup_dev-env/#nodejs","content":" Node.js  Installing Node.js or io.js with nvm  NVM Manual install  git clone https://github.com/creationix/nvm.git ~/.nvm &amp;&amp; cd ~/.nvm &amp;&amp; git checkout `git describe --abbrev=0 --tags` cat &quot;. ~/.nvm/nvm.sh&quot; &gt;&gt; .bashrc   Install node.js  nvm install v8.11.1 nvm alias default tls nvm use default   ","version":"Next","tagName":"h3"},{"title":"Go​","type":1,"pageTitle":"[Mac] 開發環境建構 2022.Aug","url":"/moco/machintosh/mac-setup_dev-env/#go","content":" brew install go   ","version":"Next","tagName":"h3"},{"title":"Dart​","type":1,"pageTitle":"[Mac] 開發環境建構 2022.Aug","url":"/moco/machintosh/mac-setup_dev-env/#dart","content":" brew tap dart-lang/dart brew install dart   ","version":"Next","tagName":"h3"},{"title":"IDE & GUI Tools​","type":1,"pageTitle":"[Mac] 開發環境建構 2022.Aug","url":"/moco/machintosh/mac-setup_dev-env/#ide--gui-tools","content":" ","version":"Next","tagName":"h2"},{"title":"VSCode​","type":1,"pageTitle":"[Mac] 開發環境建構 2022.Aug","url":"/moco/machintosh/mac-setup_dev-env/#vscode","content":" brew install --cask visual-studio-code   ","version":"Next","tagName":"h3"},{"title":"GoLand​","type":1,"pageTitle":"[Mac] 開發環境建構 2022.Aug","url":"/moco/machintosh/mac-setup_dev-env/#goland","content":" brew install --cask goland   ","version":"Next","tagName":"h3"},{"title":"WebStorm​","type":1,"pageTitle":"[Mac] 開發環境建構 2022.Aug","url":"/moco/machintosh/mac-setup_dev-env/#webstorm","content":" brew install --cask webstorm   ","version":"Next","tagName":"h3"},{"title":"Others​","type":1,"pageTitle":"[Mac] 開發環境建構 2022.Aug","url":"/moco/machintosh/mac-setup_dev-env/#others","content":" Fork  Fork - a fast and friendly git client for Mac  brew install fork   Postman  The Collaboration Platform for API Development.  brew install postman   Sequel Pro  Sequel Pro is a fast, easy-to-use Mac database management application for working with MySQL databases.  brew install sequel-pro   TablePlus  Modern, Native Tool for Database Management.  brew install tableplus   Redis Desktop Manager  Redis GUI management tool for Windows, Mac OS X, Ubuntu and Debian.  brew install --cask another-redis-desktop-manager   Robo3T  Robo 3T. Free, open-source MongoDB GUI  brew install tableplus   ","version":"Next","tagName":"h3"},{"title":"See Also​","type":1,"pageTitle":"[Mac] 開發環境建構 2022.Aug","url":"/moco/machintosh/mac-setup_dev-env/#see-also","content":" ","version":"Next","tagName":"h2"},{"title":"遺珠​","type":1,"pageTitle":"[Mac] 開發環境建構 2022.Aug","url":"/moco/machintosh/mac-setup_dev-env/#遺珠","content":" 以下是曾為個人熱愛, 但因故越來越少用的軟體. 暫列於此...  Atom A hackable text editor for the 21st Century by github.SourceTree Free Mercurial and Git Client for Windows and MacGitKraken The downright luxurious Git client, for Windows, Mac &amp; LinuxHyperTermJS/HTML/CSS Terminalalacritty/alacritty: A cross-platform, OpenGL terminal emulator.  ","version":"Next","tagName":"h3"},{"title":"Reference​","type":1,"pageTitle":"[Mac] 開發環境建構 2022.Aug","url":"/moco/machintosh/mac-setup_dev-env/#reference","content":" Zsh  让你的 Mac 提前用上 macOS Catalina 的 Shell——Oh My Zsh 配置指南 - 少数派bash to zsh 設定流程. 參考這篇一步一步執行，因為我已裝過 homebrew以及 iterm2… | by Youngmi huang | Medium  iTerm2 + Oh My Zsh  [Tool] Mac + iTerm 2 + Oh My Zsh + Powerlevel9k 設定 - iT 邦幫忙::一起幫忙解決難題，拯救 IT 人的一天超簡單！十分鐘打造漂亮又好用的 zsh command line 環境 | by Gary Chu | 財報狗技術部落格 | Medium用Oh My Zsh把iTerm變美美. 使用終端機操作時常密密麻麻的，看一兩個小時還好，但如果長期這樣下去真的會眼殘，畫… | by Hazel Wu | Medium看膩了一成不變的小黑窗？改用iterm2 + oh-my-zsh吧 | by Nathan Chou | Medium  WebStorm  WebStorm 安裝與設定 | 點燈坊  Mac Dev  How to set up your Mac for Web Development – freeCodeCamp.orghomebrew - Mac OS X Yosemite 10.10 開発環境構築 - Qiita Python Development Environment on Mac OS X Mavericks 10.9 | Hacker CodexSet Up Python and Install Django on Mac OS X Lion 10.7 | Hacker Codex Setting Up a Mac Dev Machine From Zero to Hero With Dotfiles - Tuts+ Code TutorialMacOS 編輯器快捷建設定, short key of editor2018 最新 MacBook 必裝程式與設定 – Ryan Hsu – Medium ","version":"Next","tagName":"h3"},{"title":"[Mac] 系統與 Apps 安裝紀錄 2023.Mar","type":0,"sectionRef":"#","url":"/moco/machintosh/mac-setup_prod-env/","content":"","keywords":"","version":"Next"},{"title":"前置軟體​","type":1,"pageTitle":"[Mac] 系統與 Apps 安裝紀錄 2023.Mar","url":"/moco/machintosh/mac-setup_prod-env/#前置軟體","content":" ","version":"Next","tagName":"h2"},{"title":"Homebrew​","type":1,"pageTitle":"[Mac] 系統與 Apps 安裝紀錄 2023.Mar","url":"/moco/machintosh/mac-setup_prod-env/#homebrew","content":" Homebrew  homebrew cask 的支援越來越多, 越來越方便, 個人多數軟體都透過 homebrew 安裝. 在開始安裝各類軟體前, Homebrew 是必要的.  /bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;   ","version":"Next","tagName":"h3"},{"title":"Dropbox​","type":1,"pageTitle":"[Mac] 系統與 Apps 安裝紀錄 2023.Mar","url":"/moco/machintosh/mac-setup_prod-env/#dropbox","content":" 我的專案和軟體配置檔案 (.files) 都放在 Dropbox 上, .files 裡也存了為了新環境設定的簡單 setup.sh. 故新電腦的第二件事就是安裝 Dropbox Desktop, 把工作專案和環境配置同步到新電腦.  因 Dropbox 配合頻果的新政策更改了檔案位置, 反而讓自己一直習慣的路徑配置不方便使用. 加上免費仔只能連結三個裝置的限制, 現在改用第三方軟體取代官方桌面工具.  Open source Dropbox client, Maestral  brew install maestral   ","version":"Next","tagName":"h3"},{"title":"Google Chrome​","type":1,"pageTitle":"[Mac] 系統與 Apps 安裝紀錄 2023.Mar","url":"/moco/machintosh/mac-setup_prod-env/#google-chrome","content":" 雖已漸漸棄用 Chrome, 改用 Safari 和 Edge. 但在 Chrome 長期使用習慣, 仍無法馬上改變. 導致先安裝 Chrome 也是安裝系統的必備之一.  Microsoft Edge,Orion  ","version":"Next","tagName":"h3"},{"title":"Sublime Text​","type":1,"pageTitle":"[Mac] 系統與 Apps 安裝紀錄 2023.Mar","url":"/moco/machintosh/mac-setup_prod-env/#sublime-text","content":" 開發程式的主力已經轉為 VSCode, GoLand, WebStorm... 等. 但 Sublime Text 啟動速度快, 基本作業順暢, 仍是必然安裝的工具.  因安裝時 setup.sh 可能需要修改, 所以會先以 Sublime Text 開啟 setup.sh, 編改檢查後再行安裝各項軟體或依安裝情況修改配置.  Sublime Text 已可以用 brew 安裝.  brew install sublime-text   ","version":"Next","tagName":"h3"},{"title":"開發工具​","type":1,"pageTitle":"[Mac] 系統與 Apps 安裝紀錄 2023.Mar","url":"/moco/machintosh/mac-setup_prod-env/#開發工具","content":" 參考: macOS 開發環境建構  ","version":"Next","tagName":"h2"},{"title":"生產力工具​","type":1,"pageTitle":"[Mac] 系統與 Apps 安裝紀錄 2023.Mar","url":"/moco/machintosh/mac-setup_prod-env/#生產力工具","content":" ","version":"Next","tagName":"h2"},{"title":"Obsidian​","type":1,"pageTitle":"[Mac] 系統與 Apps 安裝紀錄 2023.Mar","url":"/moco/machintosh/mac-setup_prod-env/#obsidian","content":" ZettelkastenZettlr, Joplin, Trilium Notes  brew install obsidian   ","version":"Next","tagName":"h3"},{"title":"Raycast​","type":1,"pageTitle":"[Mac] 系統與 Apps 安裝紀錄 2023.Mar","url":"/moco/machintosh/mac-setup_prod-env/#raycast","content":" 取代 Spotlight 軟體, Raycast  brew install raycast   Alfred​  Alfred 大大減少離開來回鍵盤和觸控板的時間,參考教學  brew install alfred   ","version":"Next","tagName":"h3"},{"title":"AltTab​","type":1,"pageTitle":"[Mac] 系統與 Apps 安裝紀錄 2023.Mar","url":"/moco/machintosh/mac-setup_prod-env/#alttab","content":" AltTab 和 Windows 一樣使用 Alt + Tab 切換視窗, 可在同一程式多個視窗中切換, 比 macOS 內建僅能在應用程式間切換來得快速方邊.  ","version":"Next","tagName":"h3"},{"title":"Pure Paste​","type":1,"pageTitle":"[Mac] 系統與 Apps 安裝紀錄 2023.Mar","url":"/moco/machintosh/mac-setup_prod-env/#pure-paste","content":" Pure Paste讓預設貼上就是純文字，自動清除複製的文字樣式  ","version":"Next","tagName":"h3"},{"title":"Rectangle​","type":1,"pageTitle":"[Mac] 系統與 Apps 安裝紀錄 2023.Mar","url":"/moco/machintosh/mac-setup_prod-env/#rectangle","content":" Rectangl to snap windows to different positions. 快速整理安排視窗 Layout 的工具, 外接大螢幕時相當實用.  Mac 視窗管理工具《Rectangle》，一鍵完成視窗分割、縮放、排列 - 蘋果仁 - 果仁 iPhone/iOS/好物推薦科技媒體Mac 視窗分割，用 Rectangle 就對了 - Starbugs Weekly 星巴哥技術專欄 - MediumMoom vs Magnet vs Rectangle | MediumSee Also: Magnet 分割視窗軟體, 支援 「拖曳視窗到螢幕邊界後會自動分割」的功能  ","version":"Next","tagName":"h3"},{"title":"XMind Zen​","type":1,"pageTitle":"[Mac] 系統與 Apps 安裝紀錄 2023.Mar","url":"/moco/machintosh/mac-setup_prod-env/#xmind-zen","content":" 不得不說, 重新開發的 XMind Zen 不但跟原本的 XMind 一樣好用, 而且更美觀, 快速. 值得更換.  brew install xmind-zen   ","version":"Next","tagName":"h3"},{"title":"Menu Bar​","type":1,"pageTitle":"[Mac] 系統與 Apps 安裝紀錄 2023.Mar","url":"/moco/machintosh/mac-setup_prod-env/#menu-bar","content":" ","version":"Next","tagName":"h2"},{"title":"Itsycal​","type":1,"pageTitle":"[Mac] 系統與 Apps 安裝紀錄 2023.Mar","url":"/moco/machintosh/mac-setup_prod-env/#itsycal","content":" Itsycal在功能表列上便捷地查看日曆, 可以查看月曆和事件列表, 還能快速創建新事件.  brew install itsycal   ","version":"Next","tagName":"h3"},{"title":"Dozer​","type":1,"pageTitle":"[Mac] 系統與 Apps 安裝紀錄 2023.Mar","url":"/moco/machintosh/mac-setup_prod-env/#dozer","content":" 管理隱藏多餘的 menu bar icon, 使桌面保持清爽, 軟體一多很好用.  brew install dozer   Hidden Bar​  Hidden Bar  Hidden Bar 讓 Mac 工具列更乾淨，自動隱藏用不到的應用程式圖示隱藏、整理 Mac 選單列圖示，《Hidden Bar》幫你輕鬆搞定 - 蘋果仁 - 果仁 iPhone/iOS/好物推薦科技媒體Hidden Bar - 解決 Mac 狀態列圖示太多的小工具 – 蘋果迷 APPLEFANS  See Also:  BarTender3,  ","version":"Next","tagName":"h3"},{"title":"TopNotch​","type":1,"pageTitle":"[Mac] 系統與 Apps 安裝紀錄 2023.Mar","url":"/moco/machintosh/mac-setup_prod-env/#topnotch","content":" TopNotch Makes the notch disappear like a 🥷.  ","version":"Next","tagName":"h3"},{"title":"MenubarX​","type":1,"pageTitle":"[Mac] 系統與 Apps 安裝紀錄 2023.Mar","url":"/moco/machintosh/mac-setup_prod-env/#menubarx","content":" MenubarX AppStore A powerful menu bar browser. 可在 MenuBar 上放置一個小瀏覽器, 方便查閱資料或當作開發 RWD 網頁時的檢視工具. 亦可將某些網站放置在 menu bar 上當作 App 來使用.  MenubarX 在 Mac 選單列加入瀏覽器，固定經常使用的網頁MenubarX 讓你在 Mac 選單列中瀏覽網頁的小工具（內購限免） - 電腦王阿達讓 Mac 多一個小螢幕的《MenubarX》，打報告、查資料很好用 - 蘋果仁 - 果仁 iPhone/iOS/好物推薦科技媒體  ","version":"Next","tagName":"h3"},{"title":"Pomodorome​","type":1,"pageTitle":"[Mac] 系統與 Apps 安裝紀錄 2023.Mar","url":"/moco/machintosh/mac-setup_prod-env/#pomodorome","content":" Pomodorome在 menu bar 上的番茄時鐘, 方便調用. 亦有基本統計資訊, 方便追蹤時間使用.  ","version":"Next","tagName":"h3"},{"title":"網路通訊​","type":1,"pageTitle":"[Mac] 系統與 Apps 安裝紀錄 2023.Mar","url":"/moco/machintosh/mac-setup_prod-env/#網路通訊","content":" ","version":"Next","tagName":"h2"},{"title":"CloudMounter​","type":1,"pageTitle":"[Mac] 系統與 Apps 安裝紀錄 2023.Mar","url":"/moco/machintosh/mac-setup_prod-env/#cloudmounter","content":" CloudMounter 把网络云盘放进你的 Finder 里  Get From App Store  ","version":"Next","tagName":"h3"},{"title":"rclone​","type":1,"pageTitle":"[Mac] 系統與 Apps 安裝紀錄 2023.Mar","url":"/moco/machintosh/mac-setup_prod-env/#rclone","content":" rclone  brew install rclone   ","version":"Next","tagName":"h3"},{"title":"其他​","type":1,"pageTitle":"[Mac] 系統與 Apps 安裝紀錄 2023.Mar","url":"/moco/machintosh/mac-setup_prod-env/#其他","content":" ","version":"Next","tagName":"h2"},{"title":"IINA​","type":1,"pageTitle":"[Mac] 系統與 Apps 安裝紀錄 2023.Mar","url":"/moco/machintosh/mac-setup_prod-env/#iina","content":" IINA 是 Mac 上最強大的播放器, 幾乎支援所有影音格式. 開源, UI 美觀.  brew install iina   ","version":"Next","tagName":"h3"},{"title":"ExifRenamer​","type":1,"pageTitle":"[Mac] 系統與 Apps 安裝紀錄 2023.Mar","url":"/moco/machintosh/mac-setup_prod-env/#exifrenamer","content":" ExifRenamer  brew install exifrenamer   ","version":"Next","tagName":"h3"},{"title":"McBopomofo 小麥注音輸入法​","type":1,"pageTitle":"[Mac] 系統與 Apps 安裝紀錄 2023.Mar","url":"/moco/machintosh/mac-setup_prod-env/#mcbopomofo-小麥注音輸入法","content":" McBopomofo 小麥注音輸入法反應快速, 輕巧簡單, 為 Mac User 量身打造. 支援標準, 倚天, 許氏, 倚天26 鍵, IBM 以及漢語拼音鍵盤配置.  小麥注音的隱藏設定  ","version":"Next","tagName":"h3"},{"title":"See Also​","type":1,"pageTitle":"[Mac] 系統與 Apps 安裝紀錄 2023.Mar","url":"/moco/machintosh/mac-setup_prod-env/#see-also","content":" ","version":"Next","tagName":"h2"},{"title":"遺珠​","type":1,"pageTitle":"[Mac] 系統與 Apps 安裝紀錄 2023.Mar","url":"/moco/machintosh/mac-setup_prod-env/#遺珠","content":" 以下是曾為個人熱愛, 但因故越來越少用的軟體. 暫列於此...  Typora 基於 Markdown 開源的 IDE截圖 截圖除了豐富的標註工具, 支援 QR Code 跨螢幕傳圖, 倒數計時截圖, 標籤與貼紙等功能Franz 集大成的 IM 通訊軟體, 在同一個視窗內使用 Slack, Messenger, Telegram, ...Headset 極為好用的 Youtube 免費線上音樂播放工具! 豐富歌單, 電台以及個人收藏功能Welly 一套運行在 Mac 上功能豐富的BBS軟體, 被 PTT 網頁版 term.ptt.cc 取代了.  ","version":"Next","tagName":"h3"},{"title":"Reference​","type":1,"pageTitle":"[Mac] 系統與 Apps 安裝紀錄 2023.Mar","url":"/moco/machintosh/mac-setup_prod-env/#reference","content":" 節省工具箱 Jason Tools: [套件分享] 在 macOS 工作所用的自由與開源軟體 (持續更新)10 BEST Mac Apps for Productivity (in 2022)!5 款免费又好用的 Mac 菜单栏软件 - Mac云课堂22 FREE Mac Apps I use to BOOST MY PRODUCTIVITY - YouTubeAmazing FREE Mac Apps You Aren’t Using! - YouTube ","version":"Next","tagName":"h3"},{"title":"Awesome Dart Resources","type":0,"sectionRef":"#","url":"/moco/miscellaneous/dart/awesome/","content":"","keywords":"","version":"Next"},{"title":"See Also​","type":1,"pageTitle":"Awesome Dart Resources","url":"/moco/miscellaneous/dart/awesome/#see-also","content":" yissachar/awesome-dart: A curated list of awesome Dart frameworks, libraries, and software ","version":"Next","tagName":"h2"},{"title":"[Dart] Get started","type":0,"sectionRef":"#","url":"/moco/miscellaneous/dart/dart_get-started/","content":"","keywords":"","version":"Next"},{"title":"See Also​","type":1,"pageTitle":"[Dart] Get started","url":"/moco/miscellaneous/dart/dart_get-started/#see-also","content":"","version":"Next","tagName":"h2"},{"title":"Awesome Node.js Resources","type":0,"sectionRef":"#","url":"/moco/node.js/awesome/","content":"","keywords":"","version":"Next"},{"title":"JaveScript​","type":1,"pageTitle":"Awesome Node.js Resources","url":"/moco/node.js/awesome/#javescript","content":" JavaScript | MDN  ","version":"Next","tagName":"h2"},{"title":"CS in JS​","type":1,"pageTitle":"Awesome Node.js Resources","url":"/moco/node.js/awesome/#cs-in-js","content":" Posts tagged as &quot;以 JavaScript 學習演算法與資料結構&quot; | Arsene's Alibi ","version":"Next","tagName":"h2"},{"title":"[Dart] NSFW SDK","type":0,"sectionRef":"#","url":"/moco/miscellaneous/dart/dart_nsfw-sdk/","content":"","keywords":"","version":"Next"},{"title":"See Also​","type":1,"pageTitle":"[Dart] NSFW SDK","url":"/moco/miscellaneous/dart/dart_nsfw-sdk/#see-also","content":"","version":"Next","tagName":"h2"},{"title":"[Node.js] Docker w/ PM2","type":0,"sectionRef":"#","url":"/moco/node.js/docker_pm2/","content":"","keywords":"","version":"Next"},{"title":"See Also​","type":1,"pageTitle":"[Node.js] Docker w/ PM2","url":"/moco/node.js/docker_pm2/#see-also","content":" Docker, NodeJS/Express, PM2 and the 12 Factor AppPM2 - Docker | Integration | PM2 DocumentationPM2实用指南及容器Docker部署 - 掘金Building a Rest Api Using Node.js, Pm2, and Docker - Owlcation ","version":"Next","tagName":"h2"},{"title":"environment","type":0,"sectionRef":"#","url":"/moco/node.js/environment/","content":"environment","keywords":"","version":"Next"},{"title":"[Express] snippets","type":0,"sectionRef":"#","url":"/moco/node.js/express/express_snippets/","content":"[Express] snippets How to pass variables to the next middleware using next() in Express.js ? - GeeksforGeeks express 使用 JWT 製作登入 token 機制 | Penueling 磐凌科技","keywords":"","version":"Next"},{"title":"[Express] CORS","type":0,"sectionRef":"#","url":"/moco/node.js/express/express_cors/","content":"","keywords":"","version":"Next"},{"title":"Manually​","type":1,"pageTitle":"[Express] CORS","url":"/moco/node.js/express/express_cors/#manually","content":" ","version":"Next","tagName":"h2"},{"title":"Allow-Origin: *​","type":1,"pageTitle":"[Express] CORS","url":"/moco/node.js/express/express_cors/#allow-origin-","content":" 要允許不同 Origin 存取資料, Server 端在 response header 加上 Access-Control-Allow-Origin. Express 框架語法如下:  app.use((req, res, next)=&gt; { res.header('Access-Control-Allow-Origin', *) res.header('Access-Control-Allow-Credentials', false) next() })   如果 Access-Control-Allow-Origin 設定為* (接受任何跨領域的讀取),Access-Control-Allow-Credentials 只能設定為 false,說明連結  ","version":"Next","tagName":"h3"},{"title":"use credentials​","type":1,"pageTitle":"[Express] CORS","url":"/moco/node.js/express/express_cors/#use-credentials","content":" 因為設定 Access-Control-Allow-Credentials 為 false, 所以 client 不能傳送 cookie. 若需要跨 subdomain 存取 cookies credentials, 可以使用白名單的設計.  const allowedOrigins = ['http://xxx.star.com.tw', 'http://yyy.star.com.tw', 'http://zzz.star.com.tw'] const origin = req.headers.origin if (allowedOrigins.indexOf(origin) &gt; -1){ res.setHeader('Access-Control-Allow-Origin', origin) } res.header('Access-Control-Allow-Credentials', true)   如果符合 allowedOrigins 就可以接受 Credentials.  ","version":"Next","tagName":"h3"},{"title":"express/cors​","type":1,"pageTitle":"[Express] CORS","url":"/moco/node.js/express/express_cors/#expresscors","content":" Express 處理 CORS 設定雖然簡單, 但寫在程式中寫死 header 設置, 在維護修改都比較麻煩. 不同開發環境部署上也比較沒有彈性.  Express 官方自己出了一個套件 express/cors 方便大家在 Node.js 上設定 CORS:  npm install --save cors   var cors = require(cors) app.use(cors())   這樣就完成了. 但不是最好的配置方式, 因為 cors 預設為開好開滿, 所有跨域請求都接受:  { &quot;origin&quot;: &quot;*&quot;, &quot;methods&quot;: &quot;GET,HEAD,PUT,PATCH,POST,DELETE&quot;, &quot;preflightContinue&quot;: false, &quot;optionsSuccessStatus&quot;: 204 }   比較好的作法應該是授權指定的網域, 請求方法等, 針對需求去設定:  const corsOptions = { origin: [ 'http://www.example.com', 'http://localhost:8080', ], methods: 'GET,HEAD,PUT,PATCH,POST,DELETE,OPTIONS', allowedHeaders: ['Content-Type', 'Authorization'], }; app.use(cors(corsOptions));   注意 cors options 為一標準的 JSON 格式, 可以載入外部 config.json 檔使用, 就可以完成不同開發環境下的不同配置需求了.  ","version":"Next","tagName":"h2"},{"title":"參數​","type":1,"pageTitle":"[Express] CORS","url":"/moco/node.js/express/express_cors/#參數","content":" origin 設置可存取的網域, 也就是設置 Access-Control-Allow-Origin 參數. 可接受的資料型別為 Boolean | String | RegExp | Array&lt;String|RegExp&gt; | Functionmethods 設置可存取的方法, 也就是設置 Access-Control-Allow-Methods 參數. 可以接受的參數格式: GET, POST,DELETE 這種用逗號隔開的. 也接受 Array&lt;String&gt; 的格式, 如: ['GET', 'POST']allowedHeaders 設置可存取的 Header，也就是設置 Access-Control-Allow-Headers 參數, 可以接受的參數格式: Content-Type,Authorization 這種用逗號隔開的. 也接受 Array&lt;String&gt; 的格式, 如: 'Content-Type', 'Authorization'exposedHeaders 設置瀏覽器可檢視的其他 Header 項目, 也就是設置 Access-Control-Expose-Headers 參數. 可以接受的參數格式: Content-Range,X-Content-Range 這種用逗號隔開的. 也接受 Array&lt;String&gt; 的格式, 如: ['Content-Range', 'X-Content-Range']credentials 設置是否傳送 cookie, 也就是設置 Access-Control-Allow-Credentials 參數. 資料型別 Boolean.maxAge 設置合法期間, 使瀏覽器在這段期間內不必發送 OPTION 請求, 也就是設置 Access-Control-Max-Age 參數. 資料型別 Number 且需整數preflightContinue 傳遞 OPTION 請求的 response 到下一個 handleroptionsSuccessStatus 設置當 OPTION 請求成功時, 回傳的 HTTP Code  ","version":"Next","tagName":"h3"},{"title":"See Also​","type":1,"pageTitle":"[Express] CORS","url":"/moco/node.js/express/express_cors/#see-also","content":" ","version":"Next","tagName":"h2"},{"title":"References​","type":1,"pageTitle":"[Express] CORS","url":"/moco/node.js/express/express_cors/#references","content":" CORSCors Express端的設定. 最近工作上做了一個平台專門將圖片轉檔，現在這個平台要開始串接到網站上，由clie… | by Tinghuan Wang | summer's code life | Medium ","version":"Next","tagName":"h3"},{"title":"[Node.js] HTTP client library","type":0,"sectionRef":"#","url":"/moco/node.js/http_client/","content":"[Node.js] HTTP client library set-cookie-parser - npm方便易用, 但預設只能 parse 相同 domain 的 cookie, 父級網域的 cookie 會被忽略, 實務上可能導致 bug 產生. cheerio 5 Ways to Make HTTP Requests in Node.js | www.twilio.com","keywords":"","version":"Next"},{"title":"[Dart] Web Server Framework","type":0,"sectionRef":"#","url":"/moco/miscellaneous/dart/dart_web-server/","content":"","keywords":"","version":"Next"},{"title":"Performance​","type":1,"pageTitle":"[Dart] Web Server Framework","url":"/moco/miscellaneous/dart/dart_web-server/#performance","content":" Dart Web Server 效能表現上如何?  Dart vs Node.js: compare performance on HTTP server implementations / Sudo Null IT NewsDart vs Go REST Server Performance Comparison Study •  從這兩篇來看, 效能雖比不上 Go, 但也和 Node.js 不相上下. 這樣的效能表現是相當的好消息.  內部轉型推動上,  Flutter App 端 Dart SDK 先行開發使用, 介接舊系統服務.日後新建 Web Server 時, 原 Dart 元件轉移到後端,最終評估是否需要用 Go 或其他語言, 不介接舊系統, 重新開發 Web Server.  ","version":"Next","tagName":"h2"},{"title":"Framework​","type":1,"pageTitle":"[Dart] Web Server Framework","url":"/moco/miscellaneous/dart/dart_web-server/#framework","content":" 效能問題解決了, 那 Dart 是否有和 Go / Node.js 一樣方便的後端框架呢?  Dart REST Server Framework Performance Comparison Study •10 Open-source Dart Web server Frameworks  Project\tupdated\tstars\tforks\tstatus\tlicenseConduit\tOct 30, 2022\t294\t274 BSD-2 Aqueduct\tSep 1, 2020\t2.4k\t274\tarchived\tBSD-2 Lucifer\tDec 16, 2021\t18\t1\t-\tMIT Jaguar\tApr 9, 2022\t443\t32 - Stream\tOct 18, 2022\t220\t22 Apache-2 Alfred\tAug 19, 2022\t420\t23 MIT Start\tMay 12, 2021\t520\t51\t-\tMIT Vane\tMay 18, 2021\t55\t18\t-\tBSD-3 Angel\tApr 27, 2021\t1.1k\t73\tarchived\tMIT Shelf\tOct 26, 2022\t677\t111 BSD-3  Updated: Oct 30, 2022  畢竟 Dart 主要生態不在後端開發, 相關框架遠比不上 Go / Node.js 一樣多元, 但從以上社群參考發展而來的框架看來還夠用.  可惜早期開發, 使用者和社群最活躍的 Aqueduct 和 Angle 陸續不再維護. 幸運的是 Conduit 繼承了 Aqueduct 繼續開發, 另外也有 Sheif 這樣輕快的框架. 考量專案更新活躍度, 考慮從 Conduit / Sheif 中擇一當作服務器框架.  ","version":"Next","tagName":"h2"},{"title":"Conduit​","type":1,"pageTitle":"[Dart] Web Server Framework","url":"/moco/miscellaneous/dart/dart_web-server/#conduit","content":" ","version":"Next","tagName":"h2"},{"title":"Shelf​","type":1,"pageTitle":"[Dart] Web Server Framework","url":"/moco/miscellaneous/dart/dart_web-server/#shelf","content":" ","version":"Next","tagName":"h2"},{"title":"See Also​","type":1,"pageTitle":"[Dart] Web Server Framework","url":"/moco/miscellaneous/dart/dart_web-server/#see-also","content":" 10 Open-source Dart Web server FrameworksTop Flutter and Dart Backend, Web Server and Web Frameworks | Flutter GemsConduit: A modern Dart server frameworkAngel - Dart on the Server ","version":"Next","tagName":"h2"},{"title":"js_get-started","type":0,"sectionRef":"#","url":"/moco/node.js/js_get-started/","content":"js_get-started","keywords":"","version":"Next"},{"title":"Generate Random Numbers and Strings in JavaScript","type":0,"sectionRef":"#","url":"/moco/node.js/js-lib_random-string/","content":"","keywords":"","version":"Next"},{"title":"See Also:​","type":1,"pageTitle":"Generate Random Numbers and Strings in JavaScript","url":"/moco/node.js/js-lib_random-string/#see-also","content":" Generate Random Numbers and Strings in JavaScript ","version":"Next","tagName":"h2"},{"title":"axios_file-stream-pipe","type":0,"sectionRef":"#","url":"/moco/node.js/package/axios_file-stream-pipe/","content":"axios_file-stream-pipe","keywords":"","version":"Next"},{"title":"[Node.js] Axios snippets","type":0,"sectionRef":"#","url":"/moco/node.js/package/axios_snippets/","content":"[Node.js] Axios snippets AxiosGitHub - axios/axios: Promise based HTTP client for the browser and node.js JavaScript基本功修練：Day29 - axios基本語法與練習(GET、POST請求) - iT 邦幫忙::一起幫忙解決難題，拯救 IT 人的一天 [axios] 處理 x-www-form-urlencoded 格式問題 | Nomi Su@Coding axios让请求携带cookie的一些小问题 - 简书 node.js - axios go in catch function instead of then, if status is 302 - Stack Overflow 关于 axios 302 重定向的问题","keywords":"","version":"Next"},{"title":"Awesome TypeScript Resources","type":0,"sectionRef":"#","url":"/moco/node.js/typescript/awesome/","content":"","keywords":"","version":"Next"},{"title":"TypeScript.org​","type":1,"pageTitle":"Awesome TypeScript Resources","url":"/moco/node.js/typescript/awesome/#typescriptorg","content":" TypeScript: JavaScript With Syntax For Types. Docs |Handbook |Playground |Tools  ","version":"Next","tagName":"h2"},{"title":"Handbook​","type":1,"pageTitle":"Awesome TypeScript Resources","url":"/moco/node.js/typescript/awesome/#handbook","content":" Learn TypeScript using Step-by-Step TutorialsTypeScript 中文手册 - TypeScript 中文手册  ","version":"Next","tagName":"h2"},{"title":"Related Notes​","type":1,"pageTitle":"Awesome TypeScript Resources","url":"/moco/node.js/typescript/awesome/#related-notes","content":" Get Started ","version":"Next","tagName":"h2"},{"title":"[TypeScript] Get started","type":0,"sectionRef":"#","url":"/moco/node.js/typescript/ts_get-started/","content":"","keywords":"","version":"Next"},{"title":"TypeScript​","type":1,"pageTitle":"[TypeScript] Get started","url":"/moco/node.js/typescript/ts_get-started/#typescript","content":" TypeScript 是由微軟開發, 提供型別系統和 ES6 支援的 JavaScript 擴充. 它可以編譯成標準的 JavaScript, 編譯後的 JavaScript 可以在任何支援 JavaScript 的環境中執行.  官網定義如下:  TypeScript is a typed superset of JavaScript that compiles to plain JavaScript. Any browser. Any host. Any OS. Open source.  ","version":"Next","tagName":"h2"},{"title":"Install​","type":1,"pageTitle":"[TypeScript] Get started","url":"/moco/node.js/typescript/ts_get-started/#install","content":" TypeScript 編譯器是 npm 的套件, 需先準備 Node.js 開發環境. ([Node.js] Get Started) 準備好後, 透過下列指令安裝 TypeScript 編譯器.  $ npm install -g typescript   ","version":"Next","tagName":"h3"},{"title":"Hello World​","type":1,"pageTitle":"[TypeScript] Get started","url":"/moco/node.js/typescript/ts_get-started/#hello-world","content":" TypeScript 的檔案以 .ts 結尾, 需編譯成 .js 檔案才能被 JavaScript Runtime 執行.  hello.ts function sayHello(person: string) { return 'Hello, ' + person; } let user = 'Tom'; console.log(sayHello(user));   然後執行  $ tsc hello.ts   會得到 hello.js 如下:  hello.js function sayHello(person) { return 'Hello, ' + person; } var user = 'Tom'; console.log(sayHello(user));   此時可以透過任何 JS runtime 執行 hello.js  $ node ./hello.js Hello, Tom   ","version":"Next","tagName":"h3"},{"title":"Project​","type":1,"pageTitle":"[TypeScript] Get started","url":"/moco/node.js/typescript/ts_get-started/#project","content":" ","version":"Next","tagName":"h2"},{"title":"tsconfig.json​","type":1,"pageTitle":"[TypeScript] Get started","url":"/moco/node.js/typescript/ts_get-started/#tsconfigjson","content":" TypeScript 開發需要編譯後才能被執行, 而 tsc 編譯器有許多設定可以依專案需求調整. 除了都透過 CLI 逐一輸入命令與參數外, 通常會在專案根目錄新增 tsconfig.json 檔案, 所有有關 TS 的編譯設定都會寫在 tsconfig.json 檔案中.  tsconfig.json 是一個標準的 JSON 檔, 不能是空白檔案. 可以是一個空的 JSON 物件如下, 此時 tsc 會採用預設編譯設定, 去編譯專案資料夾下所有包含 .ts 的檔案.  $ echo &quot;{}&quot; &gt;&gt; tsconfig.json   一般使用上, 會透過 tsc --init 來建立預設的 tsconfig.json, 依開發環境版本不同, 可能不同的預設設定.   $ tsc --init Created a new tsconfig.json with: target: es2016 module: commonjs strict: true esModuleInterop: true skipLibCheck: true forceConsistentCasingInFileNames: true You can learn more at https://aka.ms/tsconfig.json { &quot;compilerOptions&quot;: { /* Visit https://aka.ms/tsconfig.json to read more about this file */ /* Projects */ /* Language and Environment */ &quot;target&quot;: &quot;es2016&quot;, /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */ /* Modules */ &quot;module&quot;: &quot;commonjs&quot;, /* Specify what module code is generated. */ /* Interop Constraints */ &quot;esModuleInterop&quot;: true, /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables `allowSyntheticDefaultImports` for type compatibility. */ &quot;forceConsistentCasingInFileNames&quot;: true, /* Ensure that casing is correct in imports. */ /* Type Checking */ &quot;strict&quot;: true, /* Enable all strict type-checking options. */ /* Completeness */ &quot;skipLibCheck&quot;: true /* Skip type checking all .d.ts files. */ } }   而不同開發框架或不同版本的開發環境, 建議的編譯設定也有所不同.  tsconfig/bases: Hosts TSConfigs to extend in a TypeScript app, tuned to a particular runtime environment這個 GitHub 專案收錄了常見的開發框架下建議的 tsconfig.json 設定. 除了透過 tsc --init 建立預設 tsconfig.json 外, 也可以根據專案框架, 找到推薦的 tsconfig.json 下載放置於專案資料夾.  ","version":"Next","tagName":"h3"},{"title":"package.json​","type":1,"pageTitle":"[TypeScript] Get started","url":"/moco/node.js/typescript/ts_get-started/#packagejson","content":" 雖然微軟不斷推動整合性 IDE 對 TypeScript 的原生支援, 但 TypeScript 開發環境大多還是依賴於 JavaScript (Node.js), 許多開發框架也是沿用 Node.js 上的資源. 因此 TypeScript 專案通常還是會建立 package.json   $ npm init This utility will walk you through creating a package.json file. It only covers the most common items, and tries to guess sensible defaults. ... $ yarn init yarn init v1.22.18 question name (sandbox): ...   ","version":"Next","tagName":"h3"},{"title":".files​","type":1,"pageTitle":"[TypeScript] Get started","url":"/moco/node.js/typescript/ts_get-started/#files","content":" 許多 Node.js 常用的開發工具如 ESLine, Jest, ...等, 在 TypeScript 都是適用的. 專案根目錄除了 tsconfig.json 和 package.json 外, 可能還有許多相關開發工具的配置設定檔.  Create an npm package template with TypeScript and rollup.js - DEV Community這篇文章逐步介紹了 TypeScript 專案如何配置. 而 ryansonshine/typescript-npm-package-template: Boilerplate to kickstart creating an npm package using TypeScript則是開發者分享了他個人 TypeScript 基本專案配置. 都是值得參考的資源.  ","version":"Next","tagName":"h3"},{"title":"小結​","type":1,"pageTitle":"[TypeScript] Get started","url":"/moco/node.js/typescript/ts_get-started/#小結","content":" ...TBD...  ","version":"Next","tagName":"h2"},{"title":"See Also​","type":1,"pageTitle":"[TypeScript] Get started","url":"/moco/node.js/typescript/ts_get-started/#see-also","content":" TypeScript 新手指南開始使用 TypeScript - Learn | Microsoft DocsTypescript 初心者手札 :: 第 11 屆 iThome 鐵人賽tsconfig.json tsconfig.json - TypeScript 中文手册【Day 03】 TypeScript 編譯設定 - tsconfig.json - iT 邦幫忙::一起幫忙解決難題，拯救 IT 人的一天 ","version":"Next","tagName":"h2"},{"title":"[Express] Using TypeScript","type":0,"sectionRef":"#","url":"/moco/node.js/express/express_typescript/","content":"","keywords":"","version":"Next"},{"title":"建立專案​","type":1,"pageTitle":"[Express] Using TypeScript","url":"/moco/node.js/express/express_typescript/#建立專案","content":" 和所有 Node.js 專案一樣, 使用 npm 初始化新的 package.json 不會有錯.  npm init yarn init   npm 和 yarn 指令依個人習慣擇一即可.  會需要填入一些專案的相關資訊:  package name 輸入專案名稱, 預設使用資料夾名稱version 版本號, 預設 1.0.0description 專案的詳細介紹, 可不填entry point 專案的程式載入點, 預設 index.jstest command 專案測試用的指令, 可不填git repository 輸入 git 遠端位址, 可不填keywords 輸入專案相關的關鍵字, 可不填author 輸入專案作者名稱, 可不填license 授權相關, 預設 ISC  ","version":"Next","tagName":"h2"},{"title":"--yes​","type":1,"pageTitle":"[Express] Using TypeScript","url":"/moco/node.js/express/express_typescript/#--yes","content":" 若專案不會有發布 npm 的需求, 只想快速產生 package.json 來管理套件. 可加上 --yes 快速建立預設值內容如下.  { &quot;name&quot;: &quot;express-typescript&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;description&quot;: &quot;&quot;, &quot;main&quot;: &quot;index.js&quot;, &quot;scripts&quot;: { &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot; }, &quot;type&quot;: &quot;module&quot;, &quot;keywords&quot;: [], &quot;author&quot;: &quot;&quot;, &quot;license&quot;: &quot;ISC&quot; }   ","version":"Next","tagName":"h3"},{"title":"TypeScript​","type":1,"pageTitle":"[Express] Using TypeScript","url":"/moco/node.js/express/express_typescript/#typescript","content":" 透過 npm 進行安裝 TypeScript. 依實際需求, 通常建議全域安裝.  npm i -g typescript yarn global add typescript   若真的沒有其他 TypeScript 專案開發需求, 以專案角度來說, TypeScript 只是開發上需要, 歸屬於開發依賴套件即可.  npm i typescript --save-dev yarn add typescript --dev   ","version":"Next","tagName":"h2"},{"title":"tsconfig.json​","type":1,"pageTitle":"[Express] Using TypeScript","url":"/moco/node.js/express/express_typescript/#tsconfigjson","content":" 要透過 TypeScript 指令初始化 tsconfig.json  $ tsc init $ npx tsc init Created a new tsconfig.json with: target: es2016 module: commonjs strict: true esModuleInterop: true skipLibCheck: true forceConsistentCasingInFileNames: true   自從多了 npx 之後, 部分 CLI 套件指令可以直接透過 npx 來執行. npx 會自動管理與處理套件依賴的下載等, 不一定需要安裝全域套件.  專案資落夾會多一個 tsconfig.json, 這個檔案是用來設定編譯選項的. 詳細設定可參考 官方文件  tsconfig.json { &quot;compilerOptions&quot;: { &quot;incremental&quot;: true, // 啟用增量編譯 &quot;target&quot;: &quot;ES2017&quot;, // 編譯成指定的 JavaScript 版本 &quot;module&quot;: &quot;commonjs&quot;, // 指定編譯成何種模組 &quot;declaration&quot;: true, // 產生 '.d.ts' 檔 &quot;sourceMap&quot;: true, // 產生 '.map' 檔 &quot;outDir&quot;: &quot;./dist&quot;, // 指定編譯後的檔案存放點 &quot;rootDir&quot;: &quot;./src&quot;, // 載入點的位置 &quot;removeComments&quot;: true, // 移除註解 &quot;strict&quot;: true, // 採用嚴格模式 &quot;baseUrl&quot;: &quot;./src&quot;, // 指定匯入檔案的基準路徑 &quot;esModuleInterop&quot;: true, // 兼容模組 &quot;experimentalDecorators&quot;: true, // 啟用裝飾器 &quot;emitDecoratorMetadata&quot;: true // 提供裝飾器 metadata }, &quot;include&quot;: [&quot;src/**/*.ts&quot;], // 納入編譯範圍 &quot;exclude&quot;: [&quot;node_modules&quot;, &quot;dist&quot;] //不納入編譯範圍 }   ","version":"Next","tagName":"h3"},{"title":"Express​","type":1,"pageTitle":"[Express] Using TypeScript","url":"/moco/node.js/express/express_typescript/#express","content":" 安裝 Express:  $ npm i express $ yarn add express yarn add v1.22.19 [1/4] 🔍 Resolving packages... [2/4] 🚚 Fetching packages... [3/4] 🔗 Linking dependencies... [4/4] 🔨 Building fresh packages... success Saved 1 new dependency. info Direct dependencies └─ express@4.18.1 info All dependencies └─ express@4.18.1 ✨ Done in 0.88s.   若指令順利執行完畢, 可看到 package.json 中的 dependencies 多了 express, 表示安裝成功. 接著要取得 Node.js 與 express 的 type 定義檔, 在開發時能夠清楚知道有哪些功能可以使用:  npm i @types/node @types/express --save-dev yarn add @types/node @types/express -D   ","version":"Next","tagName":"h2"},{"title":"index.js​","type":1,"pageTitle":"[Express] Using TypeScript","url":"/moco/node.js/express/express_typescript/#indexjs","content":" TypeScript .ts 原始檔需經編譯後才可執行, 為方便編譯設置, 建議放 src 資料夾下.  ├── src | └── index.ts ├── package.json └── tsconfig.json   index.ts import express from 'express'; const app = express(); app.get('/', (req, res, next) =&gt; { res.send('Hello, World!!'); }); app.listen(3000, () =&gt; console.log('http server is running at port 3000.'));   ","version":"Next","tagName":"h3"},{"title":"ts-node​","type":1,"pageTitle":"[Express] Using TypeScript","url":"/moco/node.js/express/express_typescript/#ts-node","content":" TypeScript 程式無法直接透過 Node.js 來啟動它, 必須要編譯過後才能透過 Node.js 啟動. 但每次要測試都要執行一次編譯實在太麻煩了, 所以我們安裝 ts-node 來解決這個問題:  npm i ts-node --save-dev yarn add ts-node -D   安裝完畢後, 可更改 package.json 的配置以透過 npm 的腳本來啟動 Express 專案. 在 package.json 中的 script 欄位添加 start 項目:  &quot;scripts&quot;: { &quot;dev&quot;: &quot;ts-node ./src/index.ts&quot; }   $ npm run dev $ yarn run dev $ ts-node ./src/index.ts http server is running at port 3000.   啟動成功後, 可以在瀏覽器中輸入 http://localhost:3000 來檢視結果.  ","version":"Next","tagName":"h3"},{"title":"編譯​","type":1,"pageTitle":"[Express] Using TypeScript","url":"/moco/node.js/express/express_typescript/#編譯","content":" 畢竟 ts-node 並不適合用在正式環境中, 還是需要編譯成 JavaScript 再透過 Node.js 來啟動.  要如何對專案進行編譯呢? 直接在專案下 tsc 即可編譯專案. tsc 會依 tsconfig.json 的設置從 rootDir 讀取所有 .ts 檔, 編譯後輸出到 outDir 位置.  $ tsc $ node ./dist/index.js   上述指令即可編譯與啟動 Express Server.  可以把相關命令寫入 package.json script 裡:  package.json &quot;scripts&quot;: { &quot;start&quot;: &quot;npm run build &amp;&amp; node ./dist/index.js&quot;, &quot;dev&quot;: &quot;ts-node ./src/index.ts&quot;, &quot;build&quot;: &quot;tsc&quot; }   每次要編譯並啟動正式環境就執行:  npm start   ","version":"Next","tagName":"h2"},{"title":"自動化​","type":1,"pageTitle":"[Express] Using TypeScript","url":"/moco/node.js/express/express_typescript/#自動化","content":" 開發階段若每次修改程式, 需手動停止服務再啟動才可更新. 可配合 nodemon 套件來做到程式修改後自動重載的管理.  npm i nodemon --save-dev yarn add nodemon -D   nodemon 會監看該資料夾裡所有檔案, 若檔案有更改, 則會自動重新執行指令.  package.json &quot;scripts&quot;: { &quot;start&quot;: &quot;npm run build &amp;&amp; node ./dist/index.js&quot;, &quot;dev&quot;: &quot;nodemon --exec ts-node ./src/index.ts&quot;, &quot;build&quot;: &quot;tsc&quot; }   如此一來, 只需要執行一次 npm run dev yarn run dev, 程式修改時就會自動重新載入.  ","version":"Next","tagName":"h2"},{"title":"pm2​","type":1,"pageTitle":"[Express] Using TypeScript","url":"/moco/node.js/express/express_typescript/#pm2","content":" nodemon 除了可以監看檔案變化外, 若 Node.js 程式出錯, 也會重新執行指令, 以確保服務繼續運行. 而在正式環境上, 較常用功能較強大的 pm2 來取代 nodemon 作為錯誤重啟的監控.  ","version":"Next","tagName":"h3"},{"title":"環境變數​","type":1,"pageTitle":"[Express] Using TypeScript","url":"/moco/node.js/express/express_typescript/#環境變數","content":" 開發環境和正式環境長會有不同配置檔, dotenv 這個套件可以方便管理環境變數.  npm i dotenv yarn add dotenv   通常至少會有 development / production 兩個環境:  . ├── src | ├── index.ts | └── environments | ├── development.env | └── production.env ├── package.json └── tsconfig.json   透過 npm 的腳本傳入參數來指定現在的環境是 development 還是 production:  package.json &quot;scripts&quot;: { &quot;start&quot;: &quot;npm run build &amp;&amp; NODE_ENV=production node ./dist/index.js&quot;, &quot;dev&quot;: &quot;nodemon --exec NODE_ENV=development ts-node ./src/index.ts&quot;, &quot;build&quot;: &quot;tsc&quot; }   最後調整 index.ts 的內容, 透過 NODE_ENV 參數 與 dotenv 來選定環境變數:  index.ts import express from 'express'; import path from 'path'; import dotenv from 'dotenv'; const app = express(); dotenv.config({ path: path.resolve(__dirname, `./environments/${ process.env.NODE_ENV }.env`) }); app.get('/', (req, res, next) =&gt; { res.send('Hello, World!!'); }); app.listen(process.env.PORT, () =&gt; console.log(`http server is running at port ${ process.env.PORT }.`));   $ yarn run dev yarn run v1.22.19 $ nodemon --exec NODE_ENV=development ts-node ./src/index.ts [nodemon] 2.0.20 [nodemon] to restart at any time, enter `rs` [nodemon] watching path(s): *.* [nodemon] watching extensions: ts,json [nodemon] starting `NODE_ENV=development ts-node ./src/index.ts` http server is running at port 3000.   ","version":"Next","tagName":"h2"},{"title":"Troubleshooting​","type":1,"pageTitle":"[Express] Using TypeScript","url":"/moco/node.js/express/express_typescript/#troubleshooting","content":" ","version":"Next","tagName":"h2"},{"title":"fail in prod​","type":1,"pageTitle":"[Express] Using TypeScript","url":"/moco/node.js/express/express_typescript/#fail-in-prod","content":" 依上述設定在開發環境下執行沒問題, 但執行 npm start 會出現 port undefined 錯誤如下:  $ yarn start yarn run v1.22.19 $ npm run build &amp;&amp; NODE_ENV=production node ./dist/index.js &gt; taostyler@1.0.0 build &gt; tsc http server is running at port undefined.   主要原因在 development.env 及 production.env 都放在 sec/environment 資料夾下, 測試時執行的 ts-node ./src/index.ts 可以讀到相對路徑下的環境設定檔, 而正式環境的指令 node ./dist/index.js, 在 disc 資料夾下僅有被編譯後的 .js 檔, 並不包含其他設定檔, 靜態資源等... 程式無法讀到對應環境配置檔而出錯.  專案根目錄​  解決方法之一是把設定檔和靜態資源檔挪出 src 資料夾, 如下:  ├── config │ └── env │ ├── development.env │ └── production.env ├── dist ├── package.json ├── src │ └── index.ts ├── tsconfig.json └── static   修改程式, 新增 ROOT 常態變數, 透過 ROOT 相對路徑去讀取環境配置檔或其他設定檔:  const ROOT = path.resolve(__dirname, `../`) dotenv.config({ path: `${ ROOT }/config/env/${ process.env.NODE_ENV }.env`}); app.set('ROOT', ROOT)   copyfiles​  另一個作法是把相關資源檔複製到 disc 資料夾下. 以維持和 src 資料夾下相同的結構.  然而 tsc 不支援編譯時候順便複製非 .ts 檔案到 disc 資料夾, 必須自己手動處理相關檔案的複製. 但可以修改 package.json 來簡化相關流程. 調整範例如下:  package.json // ... &quot;scripts&quot;: { &quot;clean&quot;: &quot;rimraf dist/&quot;, &quot;copy-files&quot;: &quot;copyfiles -u 1 src/**/*.html src/**/*.css src/**/*.env src/**/*.json dist/&quot;, &quot;build&quot;: &quot;yarn clean &amp;&amp; tsc &amp;&amp; yarn copy-files&quot; }, // ...   這邊用了兩個 node package 來簡化命令:  rimraf The UNIX command rm -rf for node.copyfiles, with a very descriptive name.  npm i --save-dev rimraf copyfiles yarn add -D rimraf copyfiles   這樣執行 npm build 時除了將 .ts 檔案編譯成 .js 之外, 也會把相關資源檔一起複製到 disc 資料夾下, 部署更新時, 直接更新 disc 資料夾下的檔案即可.  Ref: tsc: How to copy non-TypeScript files when building - Víctor Colombo  docker / packager​  上述方法適合專案初期對正式環境的測試使用, 但長期更新維護的專案, 正式環境通常會有更嚴謹的規範. 可能透過 dockerfile 或其他的打包工具, 依專案實際規範而定, 暫不討論.  ","version":"Next","tagName":"h3"},{"title":"See Also​","type":1,"pageTitle":"[Express] Using TypeScript","url":"/moco/node.js/express/express_typescript/#see-also","content":" 除了依本文從零開始建力與配置專案外, 也可以利用 typescript-express-starter 之類的套件, 或直接沿用 greenroach/express-ts-template 之類的樣板來建立專案.  文章內容步驟可能因版本迭代導致語法錯誤等, 但相關套件若有持續更新, 使用套件或樣板來建立專案, 仍是不錯的選擇.  ","version":"Next","tagName":"h2"},{"title":"References​","type":1,"pageTitle":"[Express] Using TypeScript","url":"/moco/node.js/express/express_typescript/#references","content":" [今晚我想來點 Express 佐 MVC 分層架構] DAY 04 - 建置專案 - iT 邦幫忙::一起幫忙解決難題，拯救 IT 人的一天How to set up TypeScript with Node.js and Express - LogRocket BlogSetup a Node Express API with TypeScript (2021) - DEV Community 👩‍💻👨‍💻 ","version":"Next","tagName":"h3"},{"title":"[Node.js] Sequelize Migration","type":0,"sectionRef":"#","url":"/moco/node.js/package/sequelize_migration-seeds/","content":"","keywords":"","version":"Next"},{"title":"什麼是 Migraiton ?​","type":1,"pageTitle":"[Node.js] Sequelize Migration","url":"/moco/node.js/package/sequelize_migration-seeds/#什麼是-migraiton-","content":" Migration 是用來描述 「資料庫的結構掌什麼樣子」 的檔案, 隨著專案開發過程中對資料庫的修改而逐漸增加.可以理解成資料庫格式變更的版本控制.    ","version":"Next","tagName":"h2"},{"title":"操作行為​","type":1,"pageTitle":"[Node.js] Sequelize Migration","url":"/moco/node.js/package/sequelize_migration-seeds/#操作行為","content":" Migration 是拿來變動資料表的, 所以會有幾種動作在這裡處理.  變動資料表變動欄位變動資料表關聯  ","version":"Next","tagName":"h3"},{"title":"可以幹嘛​","type":1,"pageTitle":"[Node.js] Sequelize Migration","url":"/moco/node.js/package/sequelize_migration-seeds/#可以幹嘛","content":" 紀錄操作過程降低人為操作錯誤的可能環境部署或是更換資料庫的時候，快速達成同步錯誤發生時，可以快速回到正確的版本  ","version":"Next","tagName":"h3"},{"title":"環境安裝與設置​","type":1,"pageTitle":"[Node.js] Sequelize Migration","url":"/moco/node.js/package/sequelize_migration-seeds/#環境安裝與設置","content":" ","version":"Next","tagName":"h2"},{"title":"sequelize-cli​","type":1,"pageTitle":"[Node.js] Sequelize Migration","url":"/moco/node.js/package/sequelize_migration-seeds/#sequelize-cli","content":" sequelize-cli 可系統全域安裝或安裝在專案項目, 依實際需求而定.  npm install --save-dev sequelize-cli   亦直接透過 npx sequelize 執行.  ","version":"Next","tagName":"h3"},{"title":"Project bootstrapping​","type":1,"pageTitle":"[Node.js] Sequelize Migration","url":"/moco/node.js/package/sequelize_migration-seeds/#project-bootstrapping","content":" npx sequelize-cli init   This will create following folders  config, contains config file, which tells CLI how to connect with databasemodels, contains all models for your projectmigrations, contains all migration filesseeders, contains all seed files    ","version":"Next","tagName":"h3"},{"title":"configure​","type":1,"pageTitle":"[Node.js] Sequelize Migration","url":"/moco/node.js/package/sequelize_migration-seeds/#configure","content":" 修改 config/config.json 裡頭連接 DB 的相關配置.  config.json &quot;development&quot;: { &quot;username&quot;: &quot;user&quot;, &quot;password&quot;: &quot;password&quot;, &quot;database&quot;: &quot;database name&quot;, &quot;host&quot;: &quot;127.0.0.1&quot;, &quot;dialect&quot;: &quot;mysql&quot; },   設定完後即可利用 sequelize 來操作 DB. 如新建一張 user table  sequelize model:generate --name user --attributes name:string,mail:string   ","version":"Next","tagName":"h3"},{"title":"基本使用指令​","type":1,"pageTitle":"[Node.js] Sequelize Migration","url":"/moco/node.js/package/sequelize_migration-seeds/#基本使用指令","content":" 透過下列指令可新增 migration, 並且想好 migration message.  sequelize migration:create --name &lt;migration message&gt;   就會產生檔案 migrations/&lt;YYYYMMDDHHMMSS&gt;-&lt;migration message&gt;.js. 用自己習慣的編輯器去修改 js, 搭配 Query Interface 語法去建立或調整資料庫 Schema 修改.  sequelize db:migrate   這個指令會自動執行到最後一個 migration.js 檔案裡面的 up(), 為資料庫欄位逐次修改調整過程.  sequelize db:migrate:undo   則執行 js 檔案裡面的 down(), 內容為對應修改的還原語法.  ","version":"Next","tagName":"h2"},{"title":"指令列表​","type":1,"pageTitle":"[Node.js] Sequelize Migration","url":"/moco/node.js/package/sequelize_migration-seeds/#指令列表","content":" Sequelize CLI [Node: 16.17.0, CLI: 6.4.1, ORM: 6.21.6] sequelize &lt;command&gt; Commands: sequelize db:migrate Run pending migrations sequelize db:migrate:schema:timestamps:add Update migration table to have timestamps sequelize db:migrate:status List the status of all migrations sequelize db:migrate:undo Reverts a migration sequelize db:migrate:undo:all Revert all migrations ran sequelize db:seed Run specified seeder sequelize db:seed:undo Deletes data from the database sequelize db:seed:all Run every seeder sequelize db:seed:undo:all Deletes data from the database sequelize db:create Create database specified by configuration sequelize db:drop Drop database specified by configuration sequelize init Initializes project sequelize init:config Initializes configuration sequelize init:migrations Initializes migrations sequelize init:models Initializes models sequelize init:seeders Initializes seeders sequelize migration:generate Generates a new migration file sequelize migration:create Generates a new migration file sequelize model:generate Generates a model and its migration sequelize model:create Generates a model and its migration sequelize seed:generate Generates a new seed file sequelize seed:create Generates a new seed file Options: --version Show version number [boolean] --help Show help   ","version":"Next","tagName":"h3"},{"title":"檔案架構​","type":1,"pageTitle":"[Node.js] Sequelize Migration","url":"/moco/node.js/package/sequelize_migration-seeds/#檔案架構","content":" up() down() 都回傳 promise  migration-&lt;DATA&gt;-&lt;MESSAGE&gt;.js 'use strict'; module.exports = { up: (queryInterface, Sequelize) =&gt; { // 要增加內容的動作 }, down: (queryInterface, Sequelize) =&gt; { // 要減少內容的動作 } };   ","version":"Next","tagName":"h2"},{"title":"Query Interface 常用方法​","type":1,"pageTitle":"[Node.js] Sequelize Migration","url":"/moco/node.js/package/sequelize_migration-seeds/#query-interface-常用方法","content":" 變動資料表 新增資料表 createTable(tableName, attributes, options)刪除資料表 dropTable(tableName, options)刪除所有資料表 dropAllTables(options)重新命名資料表 renameTable(before, after, options)顯示資料表陣列 showAllTables(options) tableNames 的 datatype Array 顯示資料表 schema describeTable(tableName, options) 變動欄位 增加欄位 addColumn(tableName, attributeName, dataTypeOrOptions, options)刪除欄位 removeColumn(tableName, attributeName, options)修改欄位設定 changeColumn(tableName, attributeName, dataTypeOrOptions, options)重新命名欄位 renameColumn(tableName, attrNameBefore, attrNameAfter, options) 變動索引(資料表屬性的功能) 建立索引 addIndex(tableName, attributes, options)移除索引 removeIndex(tableName, indexNameOrAttributes, options)  ","version":"Next","tagName":"h3"},{"title":"SQL 語法​","type":1,"pageTitle":"[Node.js] Sequelize Migration","url":"/moco/node.js/package/sequelize_migration-seeds/#sql-語法","content":" 除了呼叫 Query Interface 外, 使用 queryInterface.sequelize.query(SQL 語法) 的用法, 可以直接執行 SQL 語法, 補足 Query Interface 方法的不足. 或因故不想透過 Sequelize ORM 語法時, 可直接使用標準 SQL 來更改資料庫 Schema.  up: (queryInterface, Sequelize) =&gt; { return queryInterface.method( //... }).then(() =&gt; { queryInterface.sequelize.query(`UPDATE table SET column=field`) }) }   ","version":"Next","tagName":"h3"},{"title":"進階使用​","type":1,"pageTitle":"[Node.js] Sequelize Migration","url":"/moco/node.js/package/sequelize_migration-seeds/#進階使用","content":" ","version":"Next","tagName":"h2"},{"title":"回朔版本​","type":1,"pageTitle":"[Node.js] Sequelize Migration","url":"/moco/node.js/package/sequelize_migration-seeds/#回朔版本","content":" 可以建立也可以回溯  sequelize db:migrate:undo 一次退一個版本sequelize db:migrate:undo:all 退到初始狀態sequelize db:migrate:undo:all --to XXXXXXXXXXXXXX-create-user.js 退到指定版本  ","version":"Next","tagName":"h3"},{"title":"資料表關聯​","type":1,"pageTitle":"[Node.js] Sequelize Migration","url":"/moco/node.js/package/sequelize_migration-seeds/#資料表關聯","content":" 在 queryInterface.createTable / addColumn 中, 在 attributes 定義欄位的物件中, 寫 reference 決定資料庫變動後, 關聯是否存在.  return queryInterface.addColumn( 'tableName', 'fieldName', { type: Sequelize.INTEGER.UNSIGNED, references: { model: 'tableName', key: 'fieldName' }, onDelete: 'SET NULL', onUpdate: 'CASCADE' //... }) },   ","version":"Next","tagName":"h3"},{"title":"Hook​","type":1,"pageTitle":"[Node.js] Sequelize Migration","url":"/moco/node.js/package/sequelize_migration-seeds/#hook","content":" 當呼叫 add/set 函數時, beforeUpdate/afterUpdate 也會執行. 唯一可以執行 beforeDestroy/afterDestroy 的方式, 就是設定 associations 屬性 onDelete: ‘cascade’. 參考: http://docs.sequelizejs.com/manual/tutorial/hooks.html  呼叫 association 時設定 hook 選項, ex: onUpdate, onDelete. 預設所有的關聯, 更新用 CASCADE, 刪除用 SET NULL, 除了 n:m 關聯, 用 CASCADE 刪除.  RESTRICT, 同 NO ACTIONCASCADE, 同步 update/delete 更新子表 foreign keyNO ACTION, 不允許主表 update/deleteSET DEFAULT, 子表 foreign key 設為 default (Innodb not use)SET NULL, 子表 foreign key 設為 null  Available constraints:  UNIQUE queryInterface.addConstraint('Users', ['email'], { type: 'unique', name: 'custom_unique_constraint_name' }); DEFAULT (MSSQL only) queryInterface.addConstraint('Users', ['roles'], { type: 'default', defaultValue: 'guest' }); CHECK (MySQL - Ignored by the database engine) queryInterface.addConstraint('Users', ['roles'], { type: 'check', where: { roles: ['user', 'admin', 'moderator', 'guest'] } }); FOREIGN KEY queryInterface.addConstraint('Posts', ['username'], { type: 'foreign key', name: 'custom_fkey_constraint_name', references: { //Required field table: 'target_table_name', field: 'target_column_name' }, onDelete: 'cascade', onUpdate: 'cascade' }); PRIMARY KEY queryInterface.addConstraint('Users', ['username'], { type: 'primary key', name: 'custom_primary_constraint_name' });   ","version":"Next","tagName":"h3"},{"title":"See Also​","type":1,"pageTitle":"[Node.js] Sequelize Migration","url":"/moco/node.js/package/sequelize_migration-seeds/#see-also","content":" 雖然 Migration 是 Sequelize 所推出的, 但 sequelize-cli 可獨立使用. 使用 Sequelize Migration 來管理專案資料庫格式架構和程式中是否使用 Sequelize ORM 並無關係.  不喜使用 ORM 的開發者或既有的專案, 無須改變存取資料庫的方式, 程式可以不透過 Sequelize ORM, 自行處理資料庫存取介面. 專案也可以不依賴 qequelize-cli, 直接透過 npx sequelize COMMAND [OPTIONS] 來執行 Sequelize Migration.  ","version":"Next","tagName":"h2"},{"title":"Reference​","type":1,"pageTitle":"[Node.js] Sequelize Migration","url":"/moco/node.js/package/sequelize_migration-seeds/#reference","content":" Migrations | Sequelize Query InterfaceSequelize Migration - 《Chris 技術筆記》透過 sequelize 來達成 DB Schema Migration - HackMD ","version":"Next","tagName":"h3"},{"title":"[Node.js] Sequelize Migration Seeds","type":0,"sectionRef":"#","url":"/moco/node.js/package/sequelize_migration/","content":"","keywords":"","version":"Next"},{"title":"什麼是 Migraiton ?​","type":1,"pageTitle":"[Node.js] Sequelize Migration Seeds","url":"/moco/node.js/package/sequelize_migration/#什麼是-migraiton-","content":" Migration 是用來描述 「資料庫的結構掌什麼樣子」 的檔案, 隨著專案開發過程中對資料庫的修改而逐漸增加.可以理解成資料庫格式變更的版本控制.    ","version":"Next","tagName":"h2"},{"title":"操作行為​","type":1,"pageTitle":"[Node.js] Sequelize Migration Seeds","url":"/moco/node.js/package/sequelize_migration/#操作行為","content":" Migration 是拿來變動資料表的, 所以會有幾種動作在這裡處理.  變動資料表變動欄位變動資料表關聯  ","version":"Next","tagName":"h3"},{"title":"可以幹嘛​","type":1,"pageTitle":"[Node.js] Sequelize Migration Seeds","url":"/moco/node.js/package/sequelize_migration/#可以幹嘛","content":" 紀錄操作過程降低人為操作錯誤的可能環境部署或是更換資料庫的時候，快速達成同步錯誤發生時，可以快速回到正確的版本  ","version":"Next","tagName":"h3"},{"title":"環境安裝與設置​","type":1,"pageTitle":"[Node.js] Sequelize Migration Seeds","url":"/moco/node.js/package/sequelize_migration/#環境安裝與設置","content":" ","version":"Next","tagName":"h2"},{"title":"sequelize-cli​","type":1,"pageTitle":"[Node.js] Sequelize Migration Seeds","url":"/moco/node.js/package/sequelize_migration/#sequelize-cli","content":" sequelize-cli 可系統全域安裝或安裝在專案項目, 依實際需求而定.  npm install --save-dev sequelize-cli   亦直接透過 npx sequelize 執行.  ","version":"Next","tagName":"h3"},{"title":"Project bootstrapping​","type":1,"pageTitle":"[Node.js] Sequelize Migration Seeds","url":"/moco/node.js/package/sequelize_migration/#project-bootstrapping","content":" npx sequelize-cli init   This will create following folders  config, contains config file, which tells CLI how to connect with databasemodels, contains all models for your projectmigrations, contains all migration filesseeders, contains all seed files    ","version":"Next","tagName":"h3"},{"title":"configure​","type":1,"pageTitle":"[Node.js] Sequelize Migration Seeds","url":"/moco/node.js/package/sequelize_migration/#configure","content":" 修改 config/config.json 裡頭連接 DB 的相關配置.  config.json &quot;development&quot;: { &quot;username&quot;: &quot;user&quot;, &quot;password&quot;: &quot;password&quot;, &quot;database&quot;: &quot;database name&quot;, &quot;host&quot;: &quot;127.0.0.1&quot;, &quot;dialect&quot;: &quot;mysql&quot; },   設定完後即可利用 sequelize 來操作 DB. 如新建一張 user table  sequelize model:generate --name user --attributes name:string,mail:string   ","version":"Next","tagName":"h3"},{"title":"基本使用指令​","type":1,"pageTitle":"[Node.js] Sequelize Migration Seeds","url":"/moco/node.js/package/sequelize_migration/#基本使用指令","content":" 透過下列指令可新增 migration, 並且想好 migration message.  sequelize migration:create --name &lt;migration message&gt;   就會產生檔案 migrations/&lt;YYYYMMDDHHMMSS&gt;-&lt;migration message&gt;.js. 用自己習慣的編輯器去修改 js, 搭配 Query Interface 語法去建立或調整資料庫 Schema 修改.  sequelize db:migrate   這個指令會自動執行到最後一個 migration.js 檔案裡面的 up(), 為資料庫欄位逐次修改調整過程.  sequelize db:migrate:undo   則執行 js 檔案裡面的 down(), 內容為對應修改的還原語法.  ","version":"Next","tagName":"h2"},{"title":"指令列表​","type":1,"pageTitle":"[Node.js] Sequelize Migration Seeds","url":"/moco/node.js/package/sequelize_migration/#指令列表","content":" Sequelize CLI [Node: 16.17.0, CLI: 6.4.1, ORM: 6.21.6] sequelize &lt;command&gt; Commands: sequelize db:migrate Run pending migrations sequelize db:migrate:schema:timestamps:add Update migration table to have timestamps sequelize db:migrate:status List the status of all migrations sequelize db:migrate:undo Reverts a migration sequelize db:migrate:undo:all Revert all migrations ran sequelize db:seed Run specified seeder sequelize db:seed:undo Deletes data from the database sequelize db:seed:all Run every seeder sequelize db:seed:undo:all Deletes data from the database sequelize db:create Create database specified by configuration sequelize db:drop Drop database specified by configuration sequelize init Initializes project sequelize init:config Initializes configuration sequelize init:migrations Initializes migrations sequelize init:models Initializes models sequelize init:seeders Initializes seeders sequelize migration:generate Generates a new migration file sequelize migration:create Generates a new migration file sequelize model:generate Generates a model and its migration sequelize model:create Generates a model and its migration sequelize seed:generate Generates a new seed file sequelize seed:create Generates a new seed file Options: --version Show version number [boolean] --help Show help   ","version":"Next","tagName":"h3"},{"title":"檔案架構​","type":1,"pageTitle":"[Node.js] Sequelize Migration Seeds","url":"/moco/node.js/package/sequelize_migration/#檔案架構","content":" up() down() 都回傳 promise  migration-&lt;DATA&gt;-&lt;MESSAGE&gt;.js 'use strict'; module.exports = { up: (queryInterface, Sequelize) =&gt; { // 要增加內容的動作 }, down: (queryInterface, Sequelize) =&gt; { // 要減少內容的動作 } };   ","version":"Next","tagName":"h2"},{"title":"Query Interface 常用方法​","type":1,"pageTitle":"[Node.js] Sequelize Migration Seeds","url":"/moco/node.js/package/sequelize_migration/#query-interface-常用方法","content":" 變動資料表 新增資料表 createTable(tableName, attributes, options)刪除資料表 dropTable(tableName, options)刪除所有資料表 dropAllTables(options)重新命名資料表 renameTable(before, after, options)顯示資料表陣列 showAllTables(options) tableNames 的 datatype Array 顯示資料表 schema describeTable(tableName, options) 變動欄位 增加欄位 addColumn(tableName, attributeName, dataTypeOrOptions, options)刪除欄位 removeColumn(tableName, attributeName, options)修改欄位設定 changeColumn(tableName, attributeName, dataTypeOrOptions, options)重新命名欄位 renameColumn(tableName, attrNameBefore, attrNameAfter, options) 變動索引(資料表屬性的功能) 建立索引 addIndex(tableName, attributes, options)移除索引 removeIndex(tableName, indexNameOrAttributes, options)  ","version":"Next","tagName":"h3"},{"title":"SQL 語法​","type":1,"pageTitle":"[Node.js] Sequelize Migration Seeds","url":"/moco/node.js/package/sequelize_migration/#sql-語法","content":" 除了呼叫 Query Interface 外, 使用 queryInterface.sequelize.query(SQL 語法) 的用法, 可以直接執行 SQL 語法, 補足 Query Interface 方法的不足. 或因故不想透過 Sequelize ORM 語法時, 可直接使用標準 SQL 來更改資料庫 Schema.  up: (queryInterface, Sequelize) =&gt; { return queryInterface.method( //... }).then(() =&gt; { queryInterface.sequelize.query(`UPDATE table SET column=field`) }) }   ","version":"Next","tagName":"h3"},{"title":"進階使用​","type":1,"pageTitle":"[Node.js] Sequelize Migration Seeds","url":"/moco/node.js/package/sequelize_migration/#進階使用","content":" ","version":"Next","tagName":"h2"},{"title":"回朔版本​","type":1,"pageTitle":"[Node.js] Sequelize Migration Seeds","url":"/moco/node.js/package/sequelize_migration/#回朔版本","content":" 可以建立也可以回溯  sequelize db:migrate:undo 一次退一個版本sequelize db:migrate:undo:all 退到初始狀態sequelize db:migrate:undo:all --to XXXXXXXXXXXXXX-create-user.js 退到指定版本  ","version":"Next","tagName":"h3"},{"title":"資料表關聯​","type":1,"pageTitle":"[Node.js] Sequelize Migration Seeds","url":"/moco/node.js/package/sequelize_migration/#資料表關聯","content":" 在 queryInterface.createTable / addColumn 中, 在 attributes 定義欄位的物件中, 寫 reference 決定資料庫變動後, 關聯是否存在.  return queryInterface.addColumn( 'tableName', 'fieldName', { type: Sequelize.INTEGER.UNSIGNED, references: { model: 'tableName', key: 'fieldName' }, onDelete: 'SET NULL', onUpdate: 'CASCADE' //... }) },   ","version":"Next","tagName":"h3"},{"title":"Hook​","type":1,"pageTitle":"[Node.js] Sequelize Migration Seeds","url":"/moco/node.js/package/sequelize_migration/#hook","content":" 當呼叫 add/set 函數時, beforeUpdate/afterUpdate 也會執行. 唯一可以執行 beforeDestroy/afterDestroy 的方式, 就是設定 associations 屬性 onDelete: ‘cascade’. 參考: http://docs.sequelizejs.com/manual/tutorial/hooks.html  呼叫 association 時設定 hook 選項, ex: onUpdate, onDelete. 預設所有的關聯, 更新用 CASCADE, 刪除用 SET NULL, 除了 n:m 關聯, 用 CASCADE 刪除.  RESTRICT, 同 NO ACTIONCASCADE, 同步 update/delete 更新子表 foreign keyNO ACTION, 不允許主表 update/deleteSET DEFAULT, 子表 foreign key 設為 default (Innodb not use)SET NULL, 子表 foreign key 設為 null  Available constraints:  UNIQUE queryInterface.addConstraint('Users', ['email'], { type: 'unique', name: 'custom_unique_constraint_name' }); DEFAULT (MSSQL only) queryInterface.addConstraint('Users', ['roles'], { type: 'default', defaultValue: 'guest' }); CHECK (MySQL - Ignored by the database engine) queryInterface.addConstraint('Users', ['roles'], { type: 'check', where: { roles: ['user', 'admin', 'moderator', 'guest'] } }); FOREIGN KEY queryInterface.addConstraint('Posts', ['username'], { type: 'foreign key', name: 'custom_fkey_constraint_name', references: { //Required field table: 'target_table_name', field: 'target_column_name' }, onDelete: 'cascade', onUpdate: 'cascade' }); PRIMARY KEY queryInterface.addConstraint('Users', ['username'], { type: 'primary key', name: 'custom_primary_constraint_name' });   ","version":"Next","tagName":"h3"},{"title":"See Also​","type":1,"pageTitle":"[Node.js] Sequelize Migration Seeds","url":"/moco/node.js/package/sequelize_migration/#see-also","content":" 雖然 Migration 是 Sequelize 所推出的, 但 sequelize-cli 可獨立使用. 使用 Sequelize Migration 來管理專案資料庫格式架構和程式中是否使用 Sequelize ORM 並無關係.  不喜使用 ORM 的開發者或既有的專案, 無須改變存取資料庫的方式, 程式可以不透過 Sequelize ORM, 自行處理資料庫存取介面. 專案也可以不依賴 qequelize-cli, 直接透過 npx sequelize COMMAND [OPTIONS] 來執行 Sequelize Migration.  ","version":"Next","tagName":"h2"},{"title":"Reference​","type":1,"pageTitle":"[Node.js] Sequelize Migration Seeds","url":"/moco/node.js/package/sequelize_migration/#reference","content":" Migrations | Sequelize Query InterfaceSequelize Migration - 《Chris 技術筆記》透過 sequelize 來達成 DB Schema Migration - HackMD ","version":"Next","tagName":"h3"},{"title":"Awesome Python Resources","type":0,"sectionRef":"#","url":"/moco/python/awesome/","content":"","keywords":"","version":"Next"},{"title":"Python.org​","type":1,"pageTitle":"Awesome Python Resources","url":"/moco/python/awesome/#pythonorg","content":" Welcome to Python.org  ","version":"Next","tagName":"h2"},{"title":"Python Enhancement Proposals​","type":1,"pageTitle":"Awesome Python Resources","url":"/moco/python/awesome/#python-enhancement-proposals","content":" PEP 0 – Index of Python Enhancement Proposals (PEPs) | peps.python.orgPEP 8 – Style Guide for Python Code | peps.python.org  ","version":"Next","tagName":"h3"},{"title":"Bootcamp​","type":1,"pageTitle":"Awesome Python Resources","url":"/moco/python/awesome/#bootcamp","content":" Python Tutorial - w3schools.com  ","version":"Next","tagName":"h2"},{"title":"Tutorial​","type":1,"pageTitle":"Awesome Python Resources","url":"/moco/python/awesome/#tutorial","content":" Python Tutorial - Learn Python ProgrammingPython - yltang.net  ","version":"Next","tagName":"h3"},{"title":"See Also​","type":1,"pageTitle":"Awesome Python Resources","url":"/moco/python/awesome/#see-also","content":" ","version":"Next","tagName":"h2"},{"title":"Unsorted​","type":1,"pageTitle":"Awesome Python Resources","url":"/moco/python/awesome/#unsorted","content":"","version":"Next","tagName":"h3"},{"title":"[TypeScript] tsc Error Troubleshooting","type":0,"sectionRef":"#","url":"/moco/node.js/typescript/ts_tsc-error/","content":"","keywords":"","version":"Next"},{"title":"TS2304: Cannot find name 'process'​","type":1,"pageTitle":"[TypeScript] tsc Error Troubleshooting","url":"/moco/node.js/typescript/ts_tsc-error/#ts2304-cannot-find-name-process","content":" error TS2304: Cannot find name 'process'   You need to make sure that the type definitions for Node are available. The way to do this depends on which version of TypeScript you are using.  $ npm install --save-dev @types/node   Ref: javascript - Read arguments from command line - error TS2304: Cannot find name 'process' - Stack Overflow  ","version":"Next","tagName":"h2"},{"title":"TS2345: Type 'T1' is not assignable to type 'T2'​","type":1,"pageTitle":"[TypeScript] tsc Error Troubleshooting","url":"/moco/node.js/typescript/ts_tsc-error/#ts2345-type-t1-is-not-assignable-to-type-t2","content":" ","version":"Next","tagName":"h2"},{"title":"null​","type":1,"pageTitle":"[TypeScript] tsc Error Troubleshooting","url":"/moco/node.js/typescript/ts_tsc-error/#null","content":" Ref: Solve - Type 'null' is not assignable to type in TypeScript | bobbyhadz  ","version":"Next","tagName":"h3"},{"title":"TS2531: Object is possibly 'null'​","type":1,"pageTitle":"[TypeScript] tsc Error Troubleshooting","url":"/moco/node.js/typescript/ts_tsc-error/#ts2531-object-is-possibly-null","content":" error TS2531: Object is possibly 'null'.   ts 在編譯時診斷到物件可能會爲 null, 所以給出了這樣一個提示: 對象可能爲 null.  雖可修改 tsconfig.json 中 strictNullChecks = false 讓編譯器不檢查 null, 但專案管理上還是應該嚴謹一些看待.  files is defined to be FileList | null so it can be null. You should either check for null (using an if) or use a &quot;Non-null assertion operator&quot; (!) if you are sure it is not null:  如果程式流程中, 物件可能為 null 的話, 應該要在讀取物件值之前, 先判斷是否為 null.  若程式流程可以確定物件不會是 null 的話, 解決方式是在物件之後加一個 ! . 驚嘆號在 ts 編譯器中, 是物件 not null 的斷言操作符, 編譯器看到這個符號, 不會在編譯時檢查是否為 null.  ! 只是告訴編譯器在編譯不要檢查是否可能為 null, 開發時要確認流程上不會造成 null 才可使用, 否則實際執行還是會出錯.  Ref: angular - TS2531: Object is possibly 'null' - Stack Overflow ","version":"Next","tagName":"h2"},{"title":"Get Started","type":0,"sectionRef":"#","url":"/moco/python/py_get-started/","content":"Get Started","keywords":"","version":"Next"},{"title":"Awesome Tech Stack Resources","type":0,"sectionRef":"#","url":"/moco/techstack/awesome/","content":"","keywords":"","version":"Next"},{"title":"DataBase​","type":1,"pageTitle":"Awesome Tech Stack Resources","url":"/moco/techstack/awesome/#database","content":" MSSQLMySQLPostgreSQL  ","version":"Next","tagName":"h2"},{"title":"Communication Protocol​","type":1,"pageTitle":"Awesome Tech Stack Resources","url":"/moco/techstack/awesome/#communication-protocol","content":" gRPCOData  ","version":"Next","tagName":"h2"},{"title":"Open Standard & Spec​","type":1,"pageTitle":"Awesome Tech Stack Resources","url":"/moco/techstack/awesome/#open-standard--spec","content":" OpenAPI (aka Swagger)  ","version":"Next","tagName":"h2"},{"title":"Testing​","type":1,"pageTitle":"Awesome Tech Stack Resources","url":"/moco/techstack/awesome/#testing","content":" ","version":"Next","tagName":"h2"},{"title":"Performance & Stress Test​","type":1,"pageTitle":"Awesome Tech Stack Resources","url":"/moco/techstack/awesome/#performance--stress-test","content":" k6 notes locust notes ","version":"Next","tagName":"h3"},{"title":"Awesome MSSQL Resources","type":0,"sectionRef":"#","url":"/moco/techstack/mssql/awesome/","content":"Awesome MSSQL Resources","keywords":"","version":"Next"},{"title":"grpc","type":0,"sectionRef":"#","url":"/moco/techstack/grpc/","content":"grpc","keywords":"","version":"Next"},{"title":"OData - the Best Way to REST","type":0,"sectionRef":"#","url":"/moco/techstack/odata/","content":"","keywords":"","version":"Next"},{"title":"See Also​","type":1,"pageTitle":"OData - the Best Way to REST","url":"/moco/techstack/odata/#see-also","content":" OData - the Best Way to RESTDocumentationOData 語言概觀 - Azure Cognitive Search | Microsoft Docs ","version":"Next","tagName":"h2"},{"title":"Awesome OpenAPI Resources","type":0,"sectionRef":"#","url":"/moco/techstack/openapi/awesome/","content":"","keywords":"","version":"Next"},{"title":"Swagger.io​","type":1,"pageTitle":"Awesome OpenAPI Resources","url":"/moco/techstack/openapi/awesome/#swaggerio","content":" ","version":"Next","tagName":"h2"},{"title":"Tools​","type":1,"pageTitle":"Awesome OpenAPI Resources","url":"/moco/techstack/openapi/awesome/#tools","content":" REST API Documentation Tool | Swagger UIOpenAPI.Tools - an Open Source list of great tools for Open API  ","version":"Next","tagName":"h2"},{"title":"API Client​","type":1,"pageTitle":"Awesome OpenAPI Resources","url":"/moco/techstack/openapi/awesome/#api-client","content":" API Client and Postman alternativeInsomnia plugin develop note ","version":"Next","tagName":"h3"},{"title":"case_merge-openapi","type":0,"sectionRef":"#","url":"/moco/techstack/openapi/case_merge-openapi/","content":"case_merge-openapi","keywords":"","version":"Next"},{"title":"[OpenAPI] Multiple File","type":0,"sectionRef":"#","url":"/moco/techstack/openapi/openapi_multiple-file/","content":"","keywords":"","version":"Next"},{"title":"See Also​","type":1,"pageTitle":"[OpenAPI] Multiple File","url":"/moco/techstack/openapi/openapi_multiple-file/#see-also","content":"","version":"Next","tagName":"h2"},{"title":"[OpenAPI] Reuse Philosophy","type":0,"sectionRef":"#","url":"/moco/techstack/openapi/openapi_reuse/","content":"","keywords":"","version":"Next"},{"title":"See Also​","type":1,"pageTitle":"[OpenAPI] Reuse Philosophy","url":"/moco/techstack/openapi/openapi_reuse/#see-also","content":" OpenAPI-Specification/REUSE.md at main · OAI/OpenAPI-Specification ","version":"Next","tagName":"h2"},{"title":"Insomnia plugin develop note","type":0,"sectionRef":"#","url":"/moco/techstack/openapi/util_insomnia-plugin/","content":"","keywords":"","version":"Next"},{"title":"See Also​","type":1,"pageTitle":"Insomnia plugin develop note","url":"/moco/techstack/openapi/util_insomnia-plugin/#see-also","content":" Introduction to Plugins | Insomnia DocsBuilding custom insomnia plugin. The goal of this project is to build… | by Alex Laptseu | MediumHow I Built My Own Insomnia Plugin | by Tyler Hawkins | Better Programming ","version":"Next","tagName":"h2"},{"title":"[MySQL] Ubuntu 20.04 LTS 安裝 MySQL Server","type":0,"sectionRef":"#","url":"/moco/techstack/mysql/mysql_ubuntu-setup/","content":"","keywords":"","version":"Next"},{"title":"安裝 MySQL​","type":1,"pageTitle":"[MySQL] Ubuntu 20.04 LTS 安裝 MySQL Server","url":"/moco/techstack/mysql/mysql_ubuntu-setup/#安裝-mysql","content":" 除非要安裝其他社群維護 (Ex: mariadb) 或特別版本的 MySQL (Ex: AliSQL...), 否則在 Ubuntu 20.04 上安裝 MySQL, 直接透過 apt 安裝即可.  sudo apt update &amp;&amp; sudo apt install mysql-server   當提示安裝 MySQL 套件時, 按 y ENTER 確定安裝.  ","version":"Next","tagName":"h2"},{"title":"確認服務正常​","type":1,"pageTitle":"[MySQL] Ubuntu 20.04 LTS 安裝 MySQL Server","url":"/moco/techstack/mysql/mysql_ubuntu-setup/#確認服務正常","content":" MySQL 完成後, 可以檢查 MySQL 服務是否正在運行.  sudo service mysql status   服務正常運行的話, 會看到如下所示的綠色 Active 狀態.  ● mysql.service - MySQL Community Server Loaded: loaded (/lib/systemd/system/mysql.service; enabled; vendor preset: enabled) Active: active (running) since Wed 2021-09-08 07:16:49 UTC; 18s ago Main PID: 32713 (mysqld) Status: &quot;Server is operational&quot; Tasks: 38 (limit: 4705) Memory: 356.6M CGroup: /system.slice/mysql.service └─32713 /usr/sbin/mysqld Sep 08 07:16:48 ubuntu-20 systemd[1]: Starting MySQL Community Server... Sep 08 07:16:49 ubuntu-20 systemd[1]: Started MySQL Community Server.   ","version":"Next","tagName":"h3"},{"title":"設定安全性（Security）​","type":1,"pageTitle":"[MySQL] Ubuntu 20.04 LTS 安裝 MySQL Server","url":"/moco/techstack/mysql/mysql_ubuntu-setup/#設定安全性security","content":" mysql_secure_installation 是官方建議為 MySQL Server 配置安全性的小工具.  sudo mysql_secure_installation   如果已經有設置了 root 密碼, 會提示在此處輸入密碼.  ","version":"Next","tagName":"h2"},{"title":"驗證密碼插件​","type":1,"pageTitle":"[MySQL] Ubuntu 20.04 LTS 安裝 MySQL Server","url":"/moco/techstack/mysql/mysql_ubuntu-setup/#驗證密碼插件","content":" Securing the MySQL server deployment. Connecting to MySQL using a blank password. VALIDATE PASSWORD PLUGIN can be used to test passwords and improve security. It checks the strength of password and allows the users to set only those passwords which are secure enough. Would you like to setup VALIDATE PASSWORD plugin? Press y|Y for Yes, any other key for No:   是否要設定驗證密碼插件 (VALIDATE PASSWORD PLUGIN). 除非想要強制執行嚴格的密碼規則, 不然這並不是真正需要的.  如果不想設置驗證密碼插件的話, 直接按 ENTER.  ","version":"Next","tagName":"h3"},{"title":"root 密碼​","type":1,"pageTitle":"[MySQL] Ubuntu 20.04 LTS 安裝 MySQL Server","url":"/moco/techstack/mysql/mysql_ubuntu-setup/#root-密碼","content":" 如果沒有設置過 root 密碼, 會要求設置密碼:  Please set the password for root here. New password: Re-enter new password:   如果已有 root 密碼, 會詢問是否更改密碼.  Using existing password for root. Change the password for root ? ((Press y|Y for Yes, any other key for No) :   無法設定 root 密碼​  因版本預設配置不同, 設定 root 密碼時可能會出現錯誤  ... Failed! Error: SET PASSWORD has no significance for user 'root'@'localhost' as the authentication method used doesn't store authentication data in the MySQL server. Please consider using ALTER USER instead if you want to change authentication parameters.  遇到這情況先中斷 mysql_secure_installation 流程, 在主機上直接透過 MySQL client 進去設定 root 密碼再重新執行 mysql_secure_installation.  $ sudo mysql ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password by 'mynewpassword';   Ref: MySQL installation on Ubuntu 20.04 error when using mysql_secure_installation - Stack Overflow  ","version":"Next","tagName":"h3"},{"title":"匿名用戶​","type":1,"pageTitle":"[MySQL] Ubuntu 20.04 LTS 安裝 MySQL Server","url":"/moco/techstack/mysql/mysql_ubuntu-setup/#匿名用戶","content":" By default, a MySQL installation has an anonymous user, allowing anyone to log into MySQL without having to have a user account created for them. This is intended only for testing, and to make the installation go a bit smoother. You should remove them before moving into a production environment. Remove anonymous users? (Press y|Y for Yes, any other key for No) :   y ENTER 刪除匿名用戶.  ","version":"Next","tagName":"h3"},{"title":"禁止遠端 root 登錄​","type":1,"pageTitle":"[MySQL] Ubuntu 20.04 LTS 安裝 MySQL Server","url":"/moco/techstack/mysql/mysql_ubuntu-setup/#禁止遠端-root-登錄","content":" Normally, root should only be allowed to connect from 'localhost'. This ensures that someone cannot guess at the root password from the network. Disallow root login remotely? (Press y|Y for Yes, any other key for No) :   y ENTER 禁止遠端 root 登錄, 可防止機器人和駭客嘗試猜測 root 密碼.  ","version":"Next","tagName":"h3"},{"title":"刪除測試資料庫​","type":1,"pageTitle":"[MySQL] Ubuntu 20.04 LTS 安裝 MySQL Server","url":"/moco/techstack/mysql/mysql_ubuntu-setup/#刪除測試資料庫","content":" By default, MySQL comes with a database named 'test' that anyone can access. This is also intended only for testing, and should be removed before moving into a production environment. Remove test database and access to it? (Press y|Y for Yes, any other key for No) :   y ENTER 刪除測試資料庫.  ","version":"Next","tagName":"h3"},{"title":"重新載入權限表​","type":1,"pageTitle":"[MySQL] Ubuntu 20.04 LTS 安裝 MySQL Server","url":"/moco/techstack/mysql/mysql_ubuntu-setup/#重新載入權限表","content":" Reloading the privilege tables will ensure that all changes made so far will take effect immediately. Reload privilege tables now? (Press y|Y for Yes, any other key for No) :   y ENTER 重新載入權限表 (Privilege Tables).  ","version":"Next","tagName":"h3"},{"title":"確認服務運作​","type":1,"pageTitle":"[MySQL] Ubuntu 20.04 LTS 安裝 MySQL Server","url":"/moco/techstack/mysql/mysql_ubuntu-setup/#確認服務運作","content":" 完成後, 即可測試 MySQL 是否正常運作. 以下登錄 MySQL Server 並運行 version 命令.  sudo mysqladmin -p -u root version mysqladmin Ver 8.0.26-0ubuntu0.20.04.2 for Linux on x86_64 ((Ubuntu)) Copyright (c) 2000, 2021, Oracle and/or its affiliates. Oracle is a registered trademark of Oracle Corporation and/or its affiliates. Other names may be trademarks of their respective owners. Server version 8.0.26-0ubuntu0.20.04.2 Protocol version 10 Connection Localhost via UNIX socket UNIX socket /var/run/mysqld/mysqld.sock Uptime: 6 min 23 sec Threads: 2 Questions: 11 Slow queries: 0 Opens: 130 Flush tables: 3 Open tables: 49 Queries per second avg: 0.028   出現版本資訊後, 表示已經成功地在 Ubuntu 20.04 上安裝和配置了 MySQL.  ","version":"Next","tagName":"h3"},{"title":"新建管理使用者​","type":1,"pageTitle":"[MySQL] Ubuntu 20.04 LTS 安裝 MySQL Server","url":"/moco/techstack/mysql/mysql_ubuntu-setup/#新建管理使用者","content":" ...TBD...  ","version":"Next","tagName":"h2"},{"title":"See Also​","type":1,"pageTitle":"[MySQL] Ubuntu 20.04 LTS 安裝 MySQL Server","url":"/moco/techstack/mysql/mysql_ubuntu-setup/#see-also","content":" [教學][Ubuntu 架站] 在 Ubuntu 20.04 上安裝 MySQL Server | 優程式MySQL installation on Ubuntu 20.04 error when using mysql_secure_installation - Stack OverflowMariaDB Foundation - MariaDB.orgalibaba/AliSQL: AliSQL is a MySQL branch originated from Alibaba Group. Fetch document from Release Notes at bottom ","version":"Next","tagName":"h2"},{"title":"Stoplight Prism","type":0,"sectionRef":"#","url":"/moco/techstack/openapi/util_prism/","content":"","keywords":"","version":"Next"},{"title":"Installation​","type":1,"pageTitle":"Stoplight Prism","url":"/moco/techstack/openapi/util_prism/#installation","content":" ","version":"Next","tagName":"h2"},{"title":"customize fakejs​","type":1,"pageTitle":"Stoplight Prism","url":"/moco/techstack/openapi/util_prism/#customize-fakejs","content":" ","version":"Next","tagName":"h3"},{"title":"Run as container​","type":1,"pageTitle":"Stoplight Prism","url":"/moco/techstack/openapi/util_prism/#run-as-container","content":" stoplight/prism 官方有提供 docker image:stoplight/prism - Docker Image | Docker Hub  但 Docker Hub 相關說明卻並不是為 docker 使用而寫, 而是在 Github 專案上的 README.md  ","version":"Next","tagName":"h2"},{"title":"Create docker image & run it​","type":1,"pageTitle":"Stoplight Prism","url":"/moco/techstack/openapi/util_prism/#create-docker-image--run-it","content":" FROM stoplight/prism:4 ADD api-spec.json /usr/src/prism/ EXPOSE 4010 CMD [&quot;mock&quot;,&quot;-h&quot;,&quot;'0.0.0.0'&quot;,&quot;/usr/src/prism/api-spec.json&quot;]   ","version":"Next","tagName":"h3"},{"title":"Use external OpenAPI file​","type":1,"pageTitle":"Stoplight Prism","url":"/moco/techstack/openapi/util_prism/#use-external-openapi-file","content":" ","version":"Next","tagName":"h3"},{"title":"Add custom fake wording​","type":1,"pageTitle":"Stoplight Prism","url":"/moco/techstack/openapi/util_prism/#add-custom-fake-wording","content":" ","version":"Next","tagName":"h3"},{"title":"See Also​","type":1,"pageTitle":"Stoplight Prism","url":"/moco/techstack/openapi/util_prism/#see-also","content":" Stoplight Prism - Creating Docker image with API specification embeded inside | Greater Than 0 ","version":"Next","tagName":"h2"},{"title":"util_openapi-merge-cli","type":0,"sectionRef":"#","url":"/moco/techstack/openapi/util_openapi-merge-cli/","content":"util_openapi-merge-cli","keywords":"","version":"Next"},{"title":"Swagger Editor","type":0,"sectionRef":"#","url":"/moco/techstack/openapi/util_swagger-editor/","content":"","keywords":"","version":"Next"},{"title":"Docker​","type":1,"pageTitle":"Swagger Editor","url":"/moco/techstack/openapi/util_swagger-editor/#docker","content":" ","version":"Next","tagName":"h2"},{"title":"See Also​","type":1,"pageTitle":"Swagger Editor","url":"/moco/techstack/openapi/util_swagger-editor/#see-also","content":" GitHub - swagger-api/swagger-editor: Swagger Editorswagger入门和实践（含docker部署swagger）_腾讯数据架构师的博客-CSDN博客 ","version":"Next","tagName":"h2"},{"title":"Awesome PostgreSQL Resources","type":0,"sectionRef":"#","url":"/moco/techstack/postgresql/awesome/","content":"","keywords":"","version":"Next"},{"title":"Tutorial​","type":1,"pageTitle":"Awesome PostgreSQL Resources","url":"/moco/techstack/postgresql/awesome/#tutorial","content":" I. 新手教學 - PostgreSQL 正體中文使用手冊PostgreSQL教學  ","version":"Next","tagName":"h3"},{"title":"Get Started​","type":1,"pageTitle":"Awesome PostgreSQL Resources","url":"/moco/techstack/postgresql/awesome/#get-started","content":"","version":"Next","tagName":"h3"},{"title":"redis_stack","type":0,"sectionRef":"#","url":"/moco/techstack/redis/redis_stack/","content":"","keywords":"","version":"Next"},{"title":"TODO​","type":1,"pageTitle":"redis_stack","url":"/moco/techstack/redis/redis_stack/#todo","content":"  Redis Stack study &amp; survey 📅 2024-06-30 env client lib ","version":"Next","tagName":"h2"},{"title":"API Client and Postman alternative","type":0,"sectionRef":"#","url":"/moco/techstack/openapi/util_postman-alt/","content":"","keywords":"","version":"Next"},{"title":"API Client Compare​","type":1,"pageTitle":"API Client and Postman alternative","url":"/moco/techstack/openapi/util_postman-alt/#api-client-compare","content":" Name\tOS\tWeb\tDesktop\tCLI\tAPI Support\tCollaboration\t...Postman\t-\tgo.postman\tdownload\tnewman\tREST, GraphQL, WebSocket, gRPC, SOAP\tFree for 3\t- Hoppscotch\tMIT\tHoppscotch\tPWA\tHoppscotch CLI\tREST, GraphQL, WebSocket, MQTT\tunlimited\t- Insomnia\tMIT\t-\tElectron\tInso\tREST, gRPC, GraphQL, WebSocket\tpaid\tPlugin Hub RapidAPI\t-\tPAW\tVSCode\t-\t-\t-\t- HTTPie\tBSD3\treq.new\tElectron\thttpie\t-\t-\t- bruno\tMIT\tplay.usebruno\tElectron\t-\t-\t-\t-  ","version":"Next","tagName":"h2"},{"title":"Postman​","type":1,"pageTitle":"API Client and Postman alternative","url":"/moco/techstack/openapi/util_postman-alt/#postman","content":" Introduction | Postman Learning Center  ","version":"Next","tagName":"h2"},{"title":"Hoppscotch​","type":1,"pageTitle":"API Client and Postman alternative","url":"/moco/techstack/openapi/util_postman-alt/#hoppscotch","content":" Hoppscotch - Hoppscotch Documentation  ","version":"Next","tagName":"h2"},{"title":"Insomnia​","type":1,"pageTitle":"API Client and Postman alternative","url":"/moco/techstack/openapi/util_postman-alt/#insomnia","content":" Insomnia Docs  ","version":"Next","tagName":"h2"},{"title":"RapidAPI​","type":1,"pageTitle":"API Client and Postman alternative","url":"/moco/techstack/openapi/util_postman-alt/#rapidapi","content":" RapidAPI LearnFree Public APIs for Developers &amp; Free Alternatives List | RapidAPI打造世界最大的 API 市集平台，RapidAPI 要讓開發者更快找到對的 API | Star Rocket Blog  ","version":"Next","tagName":"h2"},{"title":"HTTPie​","type":1,"pageTitle":"API Client and Postman alternative","url":"/moco/techstack/openapi/util_postman-alt/#httpie","content":" HTTPie (latest) docs  ","version":"Next","tagName":"h2"},{"title":"bruno​","type":1,"pageTitle":"API Client and Postman alternative","url":"/moco/techstack/openapi/util_postman-alt/#bruno","content":" ","version":"Next","tagName":"h2"},{"title":"See Also​","type":1,"pageTitle":"API Client and Postman alternative","url":"/moco/techstack/openapi/util_postman-alt/#see-also","content":" 15 Best Postman Alternatives for Automated API Testing [2022 Updated]11 Postman alternatives you should know about ","version":"Next","tagName":"h2"},{"title":"Awesome K6","type":0,"sectionRef":"#","url":"/moco/techstack/test/k6_awesome/","content":"","keywords":"","version":"Next"},{"title":"k6 Documentation​","type":1,"pageTitle":"Awesome K6","url":"/moco/techstack/test/k6_awesome/#k6-documentation","content":" ","version":"Next","tagName":"h2"},{"title":"k6 API​","type":1,"pageTitle":"Awesome K6","url":"/moco/techstack/test/k6_awesome/#k6-api","content":" init-context / JavaScript API: openk6 / fail( [err] )sleep( t )  ","version":"Next","tagName":"h3"},{"title":"Using k6​","type":1,"pageTitle":"Awesome K6","url":"/moco/techstack/test/k6_awesome/#using-k6","content":" Test lifecycleExecution context variables  ","version":"Next","tagName":"h3"},{"title":"blog​","type":1,"pageTitle":"Awesome K6","url":"/moco/techstack/test/k6_awesome/#blog","content":" Ways to visualize k6 results  ","version":"Next","tagName":"h3"},{"title":"Extension​","type":1,"pageTitle":"Awesome K6","url":"/moco/techstack/test/k6_awesome/#extension","content":" GitHub - benc-uk/k6-reporter: Output K6 test run results as formatted &amp; easy to read HTML reports  ","version":"Next","tagName":"h2"},{"title":"User Story​","type":1,"pageTitle":"Awesome K6","url":"/moco/techstack/test/k6_awesome/#user-story","content":" 黑暗執行緒 K6 壓測練習 - 挑戰網站極限，逼出 HTTP 503-黑暗執行緒K6 壓力測試練習 - 壓測同時蒐集 CPU 使用率-黑暗執行緒 拯救 IT 人的一天 [Day24][負載測試] K6 使用上常見的參數設定(options)有哪些？ - iT 邦幫忙::一起幫忙解決難題，拯救 IT 人的一天[Day26][負載測試] K6 使用上常見的套件(module)有哪些？ - iT 邦幫忙::一起幫忙解決難題，拯救 IT 人的一天 ","version":"Next","tagName":"h2"},{"title":"k6_group","type":0,"sectionRef":"#","url":"/moco/techstack/test/k6_group/","content":"k6_group","keywords":"","version":"Next"},{"title":"[k6] Notes","type":0,"sectionRef":"#","url":"/moco/techstack/test/k6_notes/","content":"[k6] Notes 併發模式與 RPS 模式之爭，性能壓測領域的星球大戰 - 每日頭條并发用户、RPS、TPS的概念及关系_性能测试-阿里云帮助中心 負載壓力測試工具 - K6 | 余小章 @ 大內殿堂 - 點部落 API Performance Testing using k6. Write your first tests in Grafana k6 | by Updesh Kumar Singh | Medium Performance Testing with k6 Performance and load testing with K6: manual, metrics and reports | PFLB","keywords":"","version":"Next"},{"title":"[PGSQL] Basic setup","type":0,"sectionRef":"#","url":"/moco/techstack/postgresql/pgsql_setup/","content":"","keywords":"","version":"Next"},{"title":"PostgreSQL Server​","type":1,"pageTitle":"[PGSQL] Basic setup","url":"/moco/techstack/postgresql/pgsql_setup/#postgresql-server","content":"  初始安裝​ init.sh export PGSQL_HOME=&quot;$KYWK_HOME/workspace/docker/postgres&quot; docker run --name postgres -d \\ -v $PGSQL_HOME/data:/var/lib/postgresql/data \\ -p 5432:5432 \\ -e POSTGRES_DB=sandbox \\ -e POSTGRES_USER=admin \\ -e POSTGRES_PASSWORD='pw123456' \\ postgres:15 使用 docker run 建立 container, 若本機沒有 image, 會自動從 Docker Hub 下載. —name: container 名字以方便識別 postgres (若省略, Docker 會自動以亂數建立)-d: detach 建立 container 後就脫離目前 process-v: volume PostgresSQL 的資料放在 container 內的 /var/lib/postgresql/data 目錄. 這個設定讓 docker mapping host ~/workspace/docker/postgres 到 container 內的 /var/lib/postgresql/data. 如此 container 刪除後, 資料仍然會留在 host.-p: port mapping host 與 container post 的對應, 格式為 host port : container port. PostgreSQL 預設 port 為 5432-e: environment 設定 PostgreSQL 所需要的環境變數 POSTGRES_DB: database 名稱POSTGRES_USER: 帳號POSTGRES_PASSWORD: 密碼 postgress:15: image 名稱 啟用 / 停止服務​ docker start postgres docker stop postgres Docker-compose.yml version: &quot;3&quot; services: postgres: image: postgres:latest container_name: MyPostgres volumes: - ${HOST_DIR}:/var/lib/postgresql/data expose: - 5432 ports: - ${POSTGRES_PORT}:5432 environment: - POSTGRES_DB=${POSTGRES_DB} - POSTGRES_USER=${POSTGRES_USER} - POSTGRES_PASSWORD=${POSTGRES_PASSWORD} 安裝​ brew install postgresql 啟用 / 停止服務​ brew service start postgresql brew service stop postgresql   ","version":"Next","tagName":"h2"},{"title":"PostgreSQL Client​","type":1,"pageTitle":"[PGSQL] Basic setup","url":"/moco/techstack/postgresql/pgsql_setup/#postgresql-client","content":" ","version":"Next","tagName":"h2"},{"title":"CLI client​","type":1,"pageTitle":"[PGSQL] Basic setup","url":"/moco/techstack/postgresql/pgsql_setup/#cli-client","content":"  Install libpq &amp; symlink psql (and other libpq tools) into /usr/local/bin brew install libpq brew link --force libpq   ","version":"Next","tagName":"h3"},{"title":"psql connection​","type":1,"pageTitle":"[PGSQL] Basic setup","url":"/moco/techstack/postgresql/pgsql_setup/#psql-connection","content":" In order to connect to your PostgreSQL server, we’ll need the following connection params:  HostnamePortUsernamePasswordDatabase name  Option 1, the Unix-like cli arguments  psql -h [HOSTNAME] -p [PORT] -U [USERNAME] -W -d [DATABASENAME]   or, make a connection URI as following:  psql postgres://[USERNAME]:[PASSWORD]@[HOSTNAME]:[PORT]/[DATABASENAME]?sslmode=require   ","version":"Next","tagName":"h3"},{"title":"DB User​","type":1,"pageTitle":"[PGSQL] Basic setup","url":"/moco/techstack/postgresql/pgsql_setup/#db-user","content":" ","version":"Next","tagName":"h2"},{"title":"See Also​","type":1,"pageTitle":"[PGSQL] Basic setup","url":"/moco/techstack/postgresql/pgsql_setup/#see-also","content":" 如何使用 Docker 安裝 PostgreSQL ? | 點燈坊Docker筆記 - 進入Container，建立並操作 PostgreSQL Container | by Albert Hg | alberthg-docker-notes | Medium ","version":"Next","tagName":"h2"},{"title":"locust_notes","type":0,"sectionRef":"#","url":"/moco/techstack/test/locust_notes/","content":"locust_notes","keywords":"","version":"Next"},{"title":"[Android] Selected Icon Pack","type":0,"sectionRef":"#","url":"/moco/utilities/android/android_icon-pack/","content":"[Android] Selected Icon Pack","keywords":"","version":"Next"},{"title":"vivo_change_launcher","type":0,"sectionRef":"#","url":"/moco/utilities/android/vivo_change_launcher/","content":"vivo_change_launcher","keywords":"","version":"Next"},{"title":"Awesome Utilities Resources","type":0,"sectionRef":"#","url":"/moco/utilities/awesome/","content":"Awesome Utilities Resources Awesome Selfhosted","keywords":"","version":"Next"},{"title":"[ChromeOS] Dropbox HowTos","type":0,"sectionRef":"#","url":"/moco/utilities/ChromeOS Dropbox/","content":"","keywords":"","version":"Next"},{"title":"ChromeOS​","type":1,"pageTitle":"[ChromeOS] Dropbox HowTos","url":"/moco/utilities/ChromeOS Dropbox/#chromeos","content":" ","version":"Next","tagName":"h2"},{"title":"Dropbox App​","type":1,"pageTitle":"[ChromeOS] Dropbox HowTos","url":"/moco/utilities/ChromeOS Dropbox/#dropbox-app","content":" Dropbox 官方推薦安裝 Android 版 Dropbox 應用程式. 說明如下: 將 Dropbox 新增至 Chromebook 的「檔案」應用程式 - Dropbox.  官方應該最保險也是支援最完善的使用方式, 但可惜並不是所有 Chromebook 都能安裝 Android App, 無法安裝 Android App 的 ChromeOS Flex 就無法透過這種方式存取 Dropbox 了.  ","version":"Next","tagName":"h3"},{"title":"File System for Dropbox​","type":1,"pageTitle":"[ChromeOS] Dropbox HowTos","url":"/moco/utilities/ChromeOS Dropbox/#file-system-for-dropbox","content":" File System for Dropbox是非官方推出的 ChromeOS extension. 利用 ChromeOS File System API 介接了 Dropbox 的存取, 安裝後可在 Files.App 中看到 Dropbox 網路磁碟, 即可如同使用 Google Drive 一樣使用 Dropbox 了.    File System for Dropbox 除了可以讓 ChromeOS Flex 等無法使用 Android App 的 Chromebook 方便存取 Dropbox 外, 更因他是利用第三方 Application API 方式存取 Dropbox, 不受一個帳號只能連結三個裝置的限制, 對免費仔來說, 算是個福音.  目前來說是個不錯的選擇, 最大的疑慮是非官方維護, 不知道隨著版本迭代, 何時會 EOS.  ","version":"Next","tagName":"h3"},{"title":"LinuxBox​","type":1,"pageTitle":"[ChromeOS] Dropbox HowTos","url":"/moco/utilities/ChromeOS Dropbox/#linuxbox","content":" ChromeOS 內建支援 LinuxBos 以後, 使用者可以在 ChromeOS 中使用 Linux 原生軟體, 生態系變得豐富多了.  前述 File System for Dropbox 目前尚未支援 Share with Linux, 要在 LinuxBox 下存取 Dropbox 有以下方法.  ","version":"Next","tagName":"h2"},{"title":"Headless CLI​","type":1,"pageTitle":"[ChromeOS] Dropbox HowTos","url":"/moco/utilities/ChromeOS Dropbox/#headless-cli","content":" ChromeOS 的 LinuxBox 是個 Debian container, 使用上和一般 Debian 一樣. 可參考 Dropbox Headless CLI 方式設置 dropbox service 來同步檔案.  ","version":"Next","tagName":"h3"},{"title":"rclone​","type":1,"pageTitle":"[ChromeOS] Dropbox HowTos","url":"/moco/utilities/ChromeOS Dropbox/#rclone","content":" 若沒有即時同步需求時, 亦可利用 rclone 的方式, 手動同步 Dropbox 和本地端檔案. 設定好相關環境與配置, 手動同步專案資料夾其實還算相當方便.  ","version":"Next","tagName":"h3"},{"title":"See Also​","type":1,"pageTitle":"[ChromeOS] Dropbox HowTos","url":"/moco/utilities/ChromeOS Dropbox/#see-also","content":"","version":"Next","tagName":"h2"},{"title":"Awesome CLI Resources","type":0,"sectionRef":"#","url":"/moco/utilities/cli/awesome/","content":"Awesome CLI Resources","keywords":"","version":"Next"},{"title":"[ChromeOS] Setup / Usage Notes","type":0,"sectionRef":"#","url":"/moco/utilities/chromeos_note/","content":"","keywords":"","version":"Next"},{"title":"Desktop​","type":1,"pageTitle":"[ChromeOS] Setup / Usage Notes","url":"/moco/utilities/chromeos_note/#desktop","content":" 在 ChromeOS 上使用 Dropbox 可參考: Dropbox HowTos  注音輸入在後期的 ChromeOS 上已有內建, 從 Settings &gt; Advanced &gt; Languages amd inputs &gt; Inputs and keeyboards &gt; Add input methods找到注音輸入並新增即可.  ","version":"Next","tagName":"h2"},{"title":"Development​","type":1,"pageTitle":"[ChromeOS] Setup / Usage Notes","url":"/moco/utilities/chromeos_note/#development","content":" ","version":"Next","tagName":"h2"},{"title":"Linux on ChromeOS​","type":1,"pageTitle":"[ChromeOS] Setup / Usage Notes","url":"/moco/utilities/chromeos_note/#linux-on-chromeos","content":" Linux on ChromeOS | ChromeOS for developersChromeOS 2019 年後開始內建支援 Linux 容器. 只要在設定裡面去啟用 Linux. 並分配使用空間即可.  啟用後, 在 Files 裡面會看到 Linux files 資料夾, 可在 ChromeOS 下存取 Linux Box 裡面的檔案. 同時在 Files 裡面也可以設定 Share with Linux, 讓 Linux 下可以存取 ChromeOS / Google Drive / .. 等檔案.  內建的 Linux 容器是 debian 系統, 軟體安裝使用大致和一般 debian 相去不遠. 而在 Linux 容器安裝的程式, 也可以在 ChromeOS 下使用. 整合的相當完善.  在 Chrome OS 下玩 Linux | 易玄的空間Linux apps on ChromeOS in 2022: A complete guide  ","version":"Next","tagName":"h3"},{"title":"Termnal​","type":1,"pageTitle":"[ChromeOS] Setup / Usage Notes","url":"/moco/utilities/chromeos_note/#termnal","content":" Zsh + Oh-My-Zsh​  自定义 Chrome OS Linux 终端_weixin_0010034-DevPress官方社区  Fira Font​  In the terminal:  Use the keyboard shortcut CTRL + SHIFT + J to open the JavaScript Console.Copy &amp; paste the following 3 commands:  term_.prefs_.set('font-family', '&quot;Fira Code&quot;, Cousine, &quot;Roboto Mono&quot;, &quot;Source Code Pro&quot;, monospace'); term_.prefs_.set('user-css-text', &quot;x-row { font-feature-settings: 'liga', 'calt', 'ss01', 'ss02', 'ss03', 'ss04', 'ss05', 'ss06', 'ss07'; text-rendering: optimizeLegibility; }&quot;) term_.prefs_.set('user-css', 'https://cdn.jsdelivr.net/npm/firacode@latest/distr/fira_code.min.css')   ChromeOS Terminal · tonsky/FiraCode Wiki · GitHubChrome devtools instructions · tonsky/FiraCode Wiki · GitHubGitHub - wernight/powerline-web-fonts: Powerline Web Fonts for Chromebook  ","version":"Next","tagName":"h3"},{"title":"IDE​","type":1,"pageTitle":"[ChromeOS] Setup / Usage Notes","url":"/moco/utilities/chromeos_note/#ide","content":" 暫時使用線上版 vscode.dev 作為編輯器, 作為一個臨時方案, 基本需求都還能滿足.  最大的問題在一些快速鍵組合, 會和 Chrome 或 Chrome extension 衝突, 這部分仍適應中...  ","version":"Next","tagName":"h3"},{"title":"See Also​","type":1,"pageTitle":"[ChromeOS] Setup / Usage Notes","url":"/moco/utilities/chromeos_note/#see-also","content":" ChromeOS Flex 發佈後, 如何安裝 ChromeOS Flex 讓老電腦重生 之類的教學雨後春筍般. 實際使用後覺得 ChromeOS 確實厲害, m3-6Y30 / 4G 的筆電竟然順跑, 分頁開了一堆也不至於嚴重 lag.  本篇全在 ChromeOS 下編寫完成與發佈  一般使用上手輕鬆, 設定安裝後, 除了上網機外, 也可臨時充當開發機使用, 相當便利.  ChromeOS | ChromeOS for developersr/ChromeOS ","version":"Next","tagName":"h2"},{"title":"[BASH] Snippets","type":0,"sectionRef":"#","url":"/moco/utilities/cli/bash_snippets/","content":"","keywords":"","version":"Next"},{"title":"Number​","type":1,"pageTitle":"[BASH] Snippets","url":"/moco/utilities/cli/bash_snippets/#number","content":" ref: linux - How do I test if a variable is a number in Bash? - Stack Overflowref: Checking if a Variable Is a Number in Bash | Baeldung on Linux  ","version":"Next","tagName":"h3"},{"title":"String​","type":1,"pageTitle":"[BASH] Snippets","url":"/moco/utilities/cli/bash_snippets/#string","content":" Bash Strings Comparison Operators  Operator\tDescription[str1] == [str2]\tThe equality operator returns TRUE if both operands are equal. Used with the [[ command. [str1] != [str2]\tThe inequality operator returns TRUE if the specified operands are not equal.  ref: How to Compare Strings in Bash | Linuxize  ","version":"Next","tagName":"h3"},{"title":"Sleep​","type":1,"pageTitle":"[BASH] Snippets","url":"/moco/utilities/cli/bash_snippets/#sleep","content":" #!/bin/bash echo &quot;Hi, I'm sleeping for 5 seconds...&quot; sleep 5   並非所有版本的 BASH 都支援時間單位如下, 使用前需確認. 語法：sleep NUMBER[SUFFIX] SUFFIX 可以是: s for seconds (the default) m for minutes. h for hours. d for days.  ","version":"Next","tagName":"h3"},{"title":"See Also​","type":1,"pageTitle":"[BASH] Snippets","url":"/moco/utilities/cli/bash_snippets/#see-also","content":"","version":"Next","tagName":"h2"},{"title":"[Git] CLI Snippets","type":0,"sectionRef":"#","url":"/moco/utilities/cli/git_snippets/","content":"","keywords":"","version":"Next"},{"title":"git tag​","type":1,"pageTitle":"[Git] CLI Snippets","url":"/moco/utilities/cli/git_snippets/#git-tag","content":" Delete All local tags. (Optional Recommended)git tag -d $(git tag -l)  Fetch remote All tags. (Optional Recommended)git fetch --tags  Delete All remote tags.  Note: pushing once should be faster than multiple times  git push origin --delete $(git tag -l)   Delete All local tags.git tag -d $(git tag -l) ","version":"Next","tagName":"h3"},{"title":"[Git] Add empty folder","type":0,"sectionRef":"#","url":"/moco/utilities/cli/git_add-empty-folder/","content":"","keywords":"","version":"Next"},{"title":".gitignore​","type":1,"pageTitle":"[Git] Add empty folder","url":"/moco/utilities/cli/git_add-empty-folder/#gitignore","content":" 若該資料夾不該保存任何程式資源, 只是為了專案特殊需求而必須存在資料夾, 可新增 .gitignore 檔. 內容範例如後:  $ mkdir &lt;NEW_FOLDER&gt; $ cd &lt;NEW_FOLDER&gt; $ vi .gitignore # Ignore everything in this directory * # Except this file !.gitignore   往後專案開發在該資料夾放任何檔案, commit 時都不會被加入 git 倉儲, checkout 時也不會產生衝突或影響. 適合當作不同環境會有所不同開發測試資源, 臨時資料夾等.  ","version":"Next","tagName":"h3"},{"title":".gitkeep​","type":1,"pageTitle":"[Git] Add empty folder","url":"/moco/utilities/cli/git_add-empty-folder/#gitkeep","content":" 在資料夾底下新增一個 .gitkeep 的空白檔案, git 就不會認為是空資料夾了. 雖然命名很像 Git 的系統檔案, 但其實不是, 它只是個普通檔案.  這個方式可以保存資料夾, 日後資料夾有檔案增減時, 亦會被提交到專案倉儲.  題外話: 在 gitlab web 上新增資料夾時, gitlab 也是新增 .gitkeep 檔來處理空白資料夾的提交.  $ mkdir &lt;NEW_FOLDER&gt; $ cd &lt;NEW_FOLDER&gt; $ touch .gitkeep   ","version":"Next","tagName":"h3"},{"title":"README.md​","type":1,"pageTitle":"[Git] Add empty folder","url":"/moco/utilities/cli/git_add-empty-folder/#readmemd","content":" 和新增 .gitkeep 一樣, 在空資料夾下新增 README.md 檔案, 就不是空資料夾了.  不同的地方是 .gitkeep 會被視為系統隱藏檔, 大部分開發工具都會忽略它的存在, 而 README.md 則是個一般檔案, 要注意開發工具會不會引用而出錯.  若開發工具不會因為 README.md 出錯, 且專案是多人共同開發, 新增個 README.md 簡單說明一下該空資料夾作什麼用途, 是對團隊較為友善的方式.  $ mkdir &lt;NEW_FOLDER&gt; $ cd &lt;NEW_FOLDER&gt; $ vi README.md WHO CREATED THIS FOLDER WHY THIS FOLDER EXIST WHAT THIS FOLDER WORKING FOR   ","version":"Next","tagName":"h3"},{"title":"Reference​","type":1,"pageTitle":"[Git] Add empty folder","url":"/moco/utilities/cli/git_add-empty-folder/#reference","content":" How can I add an empty directory to a Git repository? - Stack Overflow【狀況題】新增目錄？ - 為你自己學 Git | 高見龍git提交空資料夾 - IT閱讀XYZ的筆記本: Git commit 空資料夾 ","version":"Next","tagName":"h3"},{"title":"[CLI] ./jq","type":0,"sectionRef":"#","url":"/moco/utilities/cli/jq_snippets/","content":"","keywords":"","version":"Next"},{"title":"Usage​","type":1,"pageTitle":"[CLI] ./jq","url":"/moco/utilities/cli/jq_snippets/#usage","content":" ","version":"Next","tagName":"h2"},{"title":"Trick & Tips​","type":1,"pageTitle":"[CLI] ./jq","url":"/moco/utilities/cli/jq_snippets/#trick--tips","content":" 在 BASH script 使用 jq 時, 若是透過 VAR=jq '.[&quot;foo&quot;]' 來設定變數為 jq parse 結果, 字串值 &quot;example&quot; 是代表 '&quot;example&quot;' 而非 'example' 承上, 若 jq 查不到資料的 null 實際上代表 'null'這是由於 BASH script 是利用一個字串去接收 jq 查詢結果的 stdout 所導致  ","version":"Next","tagName":"h2"},{"title":"See Also​","type":1,"pageTitle":"[CLI] ./jq","url":"/moco/utilities/cli/jq_snippets/#see-also","content":" ","version":"Next","tagName":"h2"},{"title":"Ref:​","type":1,"pageTitle":"[CLI] ./jq","url":"/moco/utilities/cli/jq_snippets/#ref","content":" jq 實戰教學 - MyApollojq : 命令列json處理工具. jq是一個command line的JSON處理器。 | by Evan | evan.fang | Medium ","version":"Next","tagName":"h3"},{"title":"[Rclone] Dropbox","type":0,"sectionRef":"#","url":"/moco/utilities/cli/rclone_dropbox/","content":"[Rclone] Dropbox ## rclone sync ## export RCLONE_CONF=&quot; --multi-thread-streams=25 --transfers=25 --checkers=25 --stats=10s --create-empty-src-dirs --progress --progress-terminal-title --delete-before &quot; # export DBX_REMOTE=dropbox # export DBX_LOCAL=$KYWK_HOME # obsidian # alias pull-obs=&quot;rclone sync $DBX_REMOTE:/obsidian $KYWK_HOME/Obsidian --exclude-from=$KYWK_HOME/Obsidian/.rcloneignore $RCLONE_CONF&quot; # alias push-obs=&quot;rclone sync $KYWK_HOME/obsidian $DBX_REMOTE:/obsidian --exclude-from=$KYWK_HOME/Obsidian/.rcloneignore $RCLONE_CONF&quot; # wildcard # alias push-here=&quot;rclone sync . $DBX_REMOTE:Share/rclone $RCLONE_CONF&quot; ","keywords":"","version":"Next"},{"title":"[Git] check if remote branch exists","type":0,"sectionRef":"#","url":"/moco/utilities/cli/git_check-remote-branch/","content":"[Git] check if remote branch exists 專案要幫一些舊項目導入 GitLab CI/CD, 案例是有多個項目需參考另一個 Git 共用元件項目, 通常會用 Git SubModule 來引用共用元件項目. 但因舊項目既有開發流程與版控管理已久, 有些需求實作就難以較正確的方式進行. 該案例中的管理流程是: 開發時, 主要功能和共用元件項目都建立相同名稱的 branch, (Ex: BR-A001) 若共用元件有更新. 則 build 時需 checkout 共用元件的 BR-A001 分支進行編譯. 若共用元件沒有更新, 則以 master 為主. 因此, 需在命令列模式下知道某個特定名稱的 Branch 是否存在. 找了一下, 原來 ls-remote 配合 --exit-code 可以得知某個 branch-name 是否存在遠端 repos 上.官方說明 如下: --exit-code Exit with status &quot;2&quot; when no matching refs are found in the remote repository. Usually the command exits with status &quot;0&quot; to indicate it successfully talked with the remote repository, whether it found any matching refs. UNiX-like Shell $ git ls-remote --exit-code --heads origin &lt;branch-that-exists-in-origin&gt; =&gt; return 0 $ git ls-remote --exit-code --heads origin &lt;branch-that-not-exists-origin&gt; =&gt; return 2 PowerShell $ if (git ls-remote --exit-code --heads origin &lt;branch-that-exists-in-origin&gt;) { $true } else { $false } Ref: git - How to check if remote branch exists on a given remote repository? - Stack Overflow","keywords":"","version":"Next"},{"title":"[Rclone] Dropbox","type":0,"sectionRef":"#","url":"/moco/utilities/cli/Rclone Dropbox/","content":"[Rclone] Dropbox ## rclone sync ## export RCLONE_CONF=&quot; --multi-thread-streams=25 --transfers=25 --checkers=25 --stats=10s --create-empty-src-dirs --progress --progress-terminal-title --delete-before &quot; # export DBX_REMOTE=dropbox # export DBX_LOCAL=$KYWK_HOME # obsidian # alias pull-obs=&quot;rclone sync $DBX_REMOTE:/obsidian $KYWK_HOME/Obsidian --exclude-from=$KYWK_HOME/Obsidian/.rcloneignore $RCLONE_CONF&quot; # alias push-obs=&quot;rclone sync $KYWK_HOME/obsidian $DBX_REMOTE:/obsidian --exclude-from=$KYWK_HOME/Obsidian/.rcloneignore $RCLONE_CONF&quot; # wildcard # alias push-here=&quot;rclone sync . $DBX_REMOTE:Share/rclone $RCLONE_CONF&quot; ","keywords":"","version":"Next"},{"title":"[Rclone] Exclude files","type":0,"sectionRef":"#","url":"/moco/utilities/cli/rclone_ignore/","content":"","keywords":"","version":"Next"},{"title":"See Also​","type":1,"pageTitle":"[Rclone] Exclude files","url":"/moco/utilities/cli/rclone_ignore/#see-also","content":" Rclone FilteringHow to specify what folders to sync and what to exclude -- include, exclude, filter? - Help and Support - rclone forum过滤，包含和排除规则 - rclone中文站 ","version":"Next","tagName":"h2"},{"title":"Awesome Dropbox resources","type":0,"sectionRef":"#","url":"/moco/utilities/Dropbox Awesome Resources/","content":"","keywords":"","version":"Next"},{"title":"kywk.github.io​","type":1,"pageTitle":"Awesome Dropbox resources","url":"/moco/utilities/Dropbox Awesome Resources/#kywkgithubio","content":" (Mac) Maestral, Open source Dropbox clientUse Dropbox in ChromeOS Headless CLI(Rclone) Dropbox  ","version":"Next","tagName":"h2"},{"title":"See Also​","type":1,"pageTitle":"Awesome Dropbox resources","url":"/moco/utilities/Dropbox Awesome Resources/#see-also","content":"","version":"Next","tagName":"h2"},{"title":"[SSH] .ssh/config & id_rsa","type":0,"sectionRef":"#","url":"/moco/utilities/cli/ssh_config/","content":"","keywords":"","version":"Next"},{"title":".ssh/config​","type":1,"pageTitle":"[SSH] .ssh/config & id_rsa","url":"/moco/utilities/cli/ssh_config/#sshconfig","content":" SSH config 可以簡化 SSH 連線時的指令, 除了 CLI 下使用方便外, CI/CD 配合適當的 config 也可以大幅簡化管理的複雜度.  SSH  Host alias-name # 用來連線的 alias 名稱 HostName server.name # host domain 或 ip Port port-number # host 的 SSH port IdentitiesOnly yes # 使用指定的 key IdentityFile ~/.ssh/private_ssh_file # 指定 pem 或 pub 的 key 路徑 User username-on-remote-machine # (選填)登入 SSH 的 username， # 只連 git 的話，可以不必要 ForwardX11 yes # (選填) 啟用回傳 GUI   設定好後, ssh 指令可以由  ssh user@hostname.domain.name -P port -i path-to-key   簡化為  ssh alias-name   ","version":"Next","tagName":"h2"},{"title":"ssh key​","type":1,"pageTitle":"[SSH] .ssh/config & id_rsa","url":"/moco/utilities/cli/ssh_config/#ssh-key","content":" ...TBD...  ","version":"Next","tagName":"h2"},{"title":"GitHub SSH key​","type":1,"pageTitle":"[SSH] .ssh/config & id_rsa","url":"/moco/utilities/cli/ssh_config/#github-ssh-key","content":" 透過 CLI 存取個人 GitHub repository 時常會設定 SSH Keys. 而若要用兩個不同使用者身分存取專案, GitHub 不允許使用同一把 Key. 必須為個別使用者建立獨立 ssh key 並上傳設定.  這情況下, ssh alias 就變得方便了.  依使用者身分設定對應的 SSH host alias 與 IdentityFile Host kywk.github Hostname ssh.github.com User git IdentityFile ~/.ssh/kywk_rsa Host cow.github Hostname ssh.github.com User git IdentityFile ~/.ssh/cow_rsa 如此一來, 相同主機透過不同 alias 可以指定不同登入帳號及對應的 Key, 使用上相當便利. 如: ssh kywk.github 就是使用 kywk_rsa 這把 key 來登入 ssh.github.com. 不同的 git repository 中, 對應的 remote 修改為 [remote &quot;origin&quot;] url = git@kywk.github:kywk/kywk.github.io.git fetch = +refs/heads/*:refs/remotes/origin/* [remote &quot;origin&quot;] url = git@cow.github:cow/sandbox.git fetch = +refs/heads/*:refs/remotes/origin/*   設置完後, 相同電腦存取不同 Github 帳號的專案, 和一般操作並無太不同.  ","version":"Next","tagName":"h2"},{"title":"See Also​","type":1,"pageTitle":"[SSH] .ssh/config & id_rsa","url":"/moco/utilities/cli/ssh_config/#see-also","content":" 增進 SSH 使用效率 - ssh_config · 完全用 GNU/Linux 工作How to setup SSH config ：使用 SSH 設定檔簡化指令與連線網址 | by awonwon | 浦島太郎的水族缸 | Medium ","version":"Next","tagName":"h2"},{"title":"[CLI] Tarball 加密打包","type":0,"sectionRef":"#","url":"/moco/utilities/cli/tar_encript/","content":"","keywords":"","version":"Next"},{"title":"TarBall​","type":1,"pageTitle":"[CLI] Tarball 加密打包","url":"/moco/utilities/cli/tar_encript/#tarball","content":" Tar 支援 gzip, bz2, xz... 等多種壓縮方式, 但 tar 並不支援加密. 在命令列模式下要加密 tarball, 需透過其他指令來完成, 最常用的是 openssl.  ","version":"Next","tagName":"h2"},{"title":"加密​","type":1,"pageTitle":"[CLI] Tarball 加密打包","url":"/moco/utilities/cli/tar_encript/#加密","content":" 簡單指令如下: (僅加密打包不壓縮)  $ tar cvf - FILE_NAME | openssl des3 -salt -k passw0rd -out /path/to/file.tar   這個指令主要分成兩部分  第一部分是 tar cvf - FILE_NAME, 意思是針對 FILE_NAME 進行打包, 其中三個參數的意思是:  c: create 創建一個新的 tarball 文件v: verbose 輸出詳細的處理過程f:file 需要打包的檔案 (Unix 下一切都是檔案, 資料夾也屬於檔案)  第二部分是 openssl des3 -salt -k passw0rd -out /path/to/file.tar意思是針對文件透過 des3 加密, 其中參數的意思是:  des3 指定用來加密的演算法, 常見有三種 des, des3, ideasalt 為密碼添加一個隨機數, 和 -k 一起使用, 可防範字典攻擊k 指定的密碼out 輸出文件名字  ","version":"Next","tagName":"h2"},{"title":"解密​","type":1,"pageTitle":"[CLI] Tarball 加密打包","url":"/moco/utilities/cli/tar_encript/#解密","content":" $ openssl des3 -d -k passw0rd -salt -in /path/to/file.tar.gz | tar xvf -   這指令剛好把加密打包的行為反過來. 先透過 openssl 把檔案解密後, 再利用 tar 解開 tarball 內容.  ","version":"Next","tagName":"h2"},{"title":"alias​","type":1,"pageTitle":"[CLI] Tarball 加密打包","url":"/moco/utilities/cli/tar_encript/#alias","content":" 整理資料時需大量的打包檔案, 未避免輸入時手誤打錯密碼, 直接在 bashrc 中新增加密和解密的 alias, 把密碼固定寫在 alias 中, 這樣加密打包時無須輸入一長串命令, 也不用擔心手誤 key 錯密碼.  alias ens='openssl des3 -salt -k passw0rd ' alias des='openssl des3 -d -salt -k passw0rd '   # 加密打包 $ tar cvf - FILE_NAME | ens -out FILE_NAME.tar.x # 解密 $ des -in FILE_NAME.tar.x | tar xvf -   ","version":"Next","tagName":"h2"},{"title":"See Also​","type":1,"pageTitle":"[CLI] Tarball 加密打包","url":"/moco/utilities/cli/tar_encript/#see-also","content":" GNU / Linux 各種壓縮與解壓縮指令 | 凍仁的筆記tar命令加密壓縮 - IT閱讀Linux tar加密壓縮解壓 - IT閱讀第二十四個夏天後: [Linux] 使用 Openssl 做簡易的(DES3)加密、解密 @ Ubuntu 14.04 ","version":"Next","tagName":"h2"},{"title":"[Dropbox] Headless Command Line Interface","type":0,"sectionRef":"#","url":"/moco/utilities/Dropbox Headless CLI/","content":"[Dropbox] Headless Command Line Interface How to install Headless Dropbox on Ubuntu Server | FOSS LinuxHow to Install Dropbox on Ubuntu 18.04/20.04 (Terminal/GUI)","keywords":"","version":"Next"},{"title":"Warp, The terminal built for the 21st century","type":0,"sectionRef":"#","url":"/moco/utilities/terminal_warp/","content":"","keywords":"","version":"Next"},{"title":"See Also​","type":1,"pageTitle":"Warp, The terminal built for the 21st century","url":"/moco/utilities/terminal_warp/#see-also","content":" Warp: The terminal for the 21st centuryWarp 教學，終端機也可以很酷炫 » 光輝咖碼能提高生產力的命令列工具: WARPWarp--为开发人员打造的Terminal - 知乎 ","version":"Next","tagName":"h2"},{"title":"[Manjaro] 系統安裝紀錄 2022.May","type":0,"sectionRef":"#","url":"/moco/utilities/linux_manjaro-setup/","content":"","keywords":"","version":"Next"},{"title":"First impression​","type":1,"pageTitle":"[Manjaro] 系統安裝紀錄 2022.May","url":"/moco/utilities/linux_manjaro-setup/#first-impression","content":" 有段期間 ubuntu GNOME 桌面風格改來改去, 資源耗用多也不好看, 實用美觀都未令人滿意. 自從換了 xubuntu 後就愛上他的輕巧. 實用之餘, 好好客製調整, 也挺賞心悅目的.  這回繼續選用 Manjaro Xfce 版, 使用 Live USB 安裝完系統後, 熟悉的界面回來了. 而包含顯卡 / Wifi / 藍芽等筆電的主要硬體設備都可以正常工作. 大幅降低 Linux 的學習曲線. 至於指紋辨識, 讀卡機等因尚無需求, 尚未進一步測試.    ","version":"Next","tagName":"h2"},{"title":"Package Manager​","type":1,"pageTitle":"[Manjaro] 系統安裝紀錄 2022.May","url":"/moco/utilities/linux_manjaro-setup/#package-manager","content":" 第一次使用 Manjaro / Arch Linux 系統, 安裝軟體時都得先 Google 一番. 如: manjaro install chrome, manjaro install dropbox... 等.  網路上回答和教學各有不同, 進而慢慢了解 Manjaro / Arch Linux 套件管理. Manjaro 上有幾種不同的套件管理方式, 官方論壇有著許多討論: Pacman vs Pamac vs Yay - Newbie Corner - Manjaro Linux Forum  They all install packages: pamac is Manjaro's package manager and it can install packages from the Manjaro repos or AUR pacman is the package manager from Arch. It can only install packages from the repos. yay is a wrapper that can install packages from the Manjaro repos or AUR. Feel free to use whichever you prefer EDIT: pamac also has a GUI version available pamac-manager which is in the menus as &quot;Add/Remove Software&quot;  Manjaro 並不使用 Arch 的套件庫, 而是使用自行維護的軟件庫. 官方表示他們會對軟體進行較詳細的測試後才上架, 好處是系統較為穩定有保障, 但缺點則是部份軟體更新會較慢. (可透過 AUR 解決, 如後敘述)  ","version":"Next","tagName":"h2"},{"title":"Pamac​","type":1,"pageTitle":"[Manjaro] 系統安裝紀錄 2022.May","url":"/moco/utilities/linux_manjaro-setup/#pamac","content":" Pamac (Add/Remove Software)是 Manjaro 預設的 Package Manager, 有 GUI 界面. Manjaro Desktop 安裝完成後, 可在 Application 選單上找到.    pamac 的 GUI 界面簡化了初學者對 Linux 套件管理的門檻, 界面簡單但功能齊全. 清晰列出了已安裝和可更新的套件 / 分類搜尋 / 簡介和相依性等的資訊, 都相當明確實用.  AUR​  Arch User Repository (AUR)是 Arch Linux 社群維護的套件庫. AUR 由社群組織和分享新軟體, 可以豐富 Arch Linux 上的軟體資源, 藉由社群力量, 加速主流軟體進入官方套件庫的時間.  AUR 也是開發人員在新軟體被納入 Arch 官方套件之前, 向 Arch Limux 提供軟體的途徑.什么是 Arch 用户仓库（AUR）以及如何使用？ | Linux 中国 - 知乎這篇文章中有對 AUR 較進階說明.  社群維護的 AUR 安全風險相對較高. 也曾發生被值入惡意程式事件:Arch Linux的AUR儲存庫部份套件程式碼被加料，勿輕忽社群程式碼儲存庫安全風險 | iThome 官方也提醒使用者不要太相信 AUR 上的內容.  Manjaro Linux 預設並不使用 AUR 套件庫, 可在 Pamac GUI 上啟用: Perfreences &gt; Third Party &gt; Enable AUR    ","version":"Next","tagName":"h3"},{"title":"Pacman​","type":1,"pageTitle":"[Manjaro] 系統安裝紀錄 2022.May","url":"/moco/utilities/linux_manjaro-setup/#pacman","content":" Pacman是 Arch Linux 上的 package manager, Manjaro 是基於 Arch Linux 衍申發展而來, 官方對 Pacman 說明如下:  Pacman is already installed in Manjaro Linux by defaultPacman is mainly developed/maintained by Arch Linux developersPacman can only be used from the command line.Pacman can only use the official Manjaro repository. There are separate articles available for accessing the Arch User Repository(AUR), using flatpaks and using snaps  官方文件感覺起來, Manjaro 上雖保留了 pacman. 但並不特別建議使用.  然而 pacman 上有些 pamac 所沒有的進階功能, 實務上常是 pacman / pamac 混用的. 網路上許多文件也常可見 pacman 和 pamac 交錯使用的情況.  ","version":"Next","tagName":"h3"},{"title":"Yay​","type":1,"pageTitle":"[Manjaro] 系統安裝紀錄 2022.May","url":"/moco/utilities/linux_manjaro-setup/#yay","content":" Yay 是用 Go 寫的 AUR Helper. AUR 上的套件包原則上是需要編譯後安裝的, AUR Helper 主要協助 AUR 套件下載編譯安裝流程. Yay 只需一個命令即可更輕鬆地安裝, 更新或刪除, 為多數用戶騰出在系統上花費的時間.  Manjaro 預設並不會安裝 yay, 需手動安裝:  sudo pacman -Syu sudo pacman -S yay   ","version":"Next","tagName":"h3"},{"title":"Snap​","type":1,"pageTitle":"[Manjaro] 系統安裝紀錄 2022.May","url":"/moco/utilities/linux_manjaro-setup/#snap","content":" Snap 是 Ubuntu 推的通用 Linux 套件格式. Snap 不是要取代原本的套件管理系統, 主要是用來發佈管理第三方套件 (不管有沒有 Open Source).  Linux 系統是否要支援 Snap 雖有爭議, 如 Linux Mint決定不支援Ubuntu Snap, 目前可在 Arch, Debian, Fedora, Ubuntu, ... 等環境使用.  Manjaro 也支援 Snap 格式, 需自行安裝相關套件管理程式:  sudo pacman -S snapd sudo systemctl enable --now snapd.socket sudo ln -s /var/lib/snapd/snap /snap sudo snap install snap-store   Ref: Install Snap Store on Manjaro Linux using the Snap Store | Snapcraft  ","version":"Next","tagName":"h3"},{"title":"Look and Feel​","type":1,"pageTitle":"[Manjaro] 系統安裝紀錄 2022.May","url":"/moco/utilities/linux_manjaro-setup/#look-and-feel","content":" 我的 T470 螢幕是 14&quot; FullHD, 預設解析度文字偏小, 在 Windows 10 下縮放為 125% 後比較清楚順眼. Xfce 下調整縮放的設定可從 Setting &gt; Apperance &gt; Fonts 中的 DPI 調整.  安裝完後預設是 96, 對我來說字體太小了, 調整到 128 後比較舒服.  ","version":"Next","tagName":"h2"},{"title":"macOS BigSur Like​","type":1,"pageTitle":"[Manjaro] 系統安裝紀錄 2022.May","url":"/moco/utilities/linux_manjaro-setup/#macos-bigsur-like","content":" 剛安裝完系統和一些常用軟體後, Youtube 推薦影片上跳出 UPDATE : How to Customize Your Xfce Desktop Look Like macOS Big Sur | Version 2.0 - YouTube看來網路足跡追蹤真的無所不在.  不過 macOS BigSur 系統樣式真的好看, 也適合長期使用 MacBook 的我. 跟著影片一步步設定安裝, 套用教學中的主題:  [Xfce] 桌面 macOS 化設定記錄  ","version":"Next","tagName":"h2"},{"title":"See Also​","type":1,"pageTitle":"[Manjaro] 系統安裝紀錄 2022.May","url":"/moco/utilities/linux_manjaro-setup/#see-also","content":" 重回 Linux 桌面環境, 初步感覺 Linux 在桌面使用下已脫胎換骨. 對 Manjaro + xfce + BigSur theme 相當滿意. 目前除了 Hotcorner 和 screenshot 尚找不到合用軟體外, 其餘和自己在 macOS 下的使用已相去不遠, 畢竟常用的就是開發工具, 這些軟體在各平台都是支援的.  本文即是 Manjaro 下完成. 也許日後會改變心意, 等日常使用一段時間後再寫篇心得回顧, 以及配置上的調整吧.  Manjaro user note Manjaro初次使用報告—簡約而不簡單 | 青鳥脈博 Desktop Theme / Tweak 教你如何将 Manjaro xfce 美化的像 MacOSManjaro安装、美化 - 丑心疼 ","version":"Next","tagName":"h2"},{"title":"[Xfce] 桌面 macOS 化設定記錄","type":0,"sectionRef":"#","url":"/moco/utilities/linux_xfce-macos-looks/","content":"","keywords":"","version":"Next"},{"title":"Theme​","type":1,"pageTitle":"[Xfce] 桌面 macOS 化設定記錄","url":"/moco/utilities/linux_xfce-macos-looks/#theme","content":" WM Theme: WhiteSur-DarkGTK Theme: WhiteSur-Dark [GTK2]Icon Theme: WhiteSur-darkFont: San Francisco Display 10  ","version":"Next","tagName":"h3"},{"title":"Plank​","type":1,"pageTitle":"[Xfce] 桌面 macOS 化設定記錄","url":"/moco/utilities/linux_xfce-macos-looks/#plank","content":" Plank是一款輕量的 Dock 工具列軟體. 可以直接用 pamac / pacman 安裝.  sudo pacman -S plank     ","version":"Next","tagName":"h3"},{"title":"Vala-Appmenu​","type":1,"pageTitle":"[Xfce] 桌面 macOS 化設定記錄","url":"/moco/utilities/linux_xfce-macos-looks/#vala-appmenu","content":" Vala-Appmenu是模仿 macOS 頂部工具列, 可在 xfce panel 上顯示應用程式選單的程式.  # Install Vala-Appmenu manjaro/arch : pamac build vala-panel-appmenu-common-git vala-panel-appmenu-registrar-git vala-panel-appmenu-xfce-git sudo pacman -S appmenu-gtk-module # Execute this command after enable vala-appmenu: xfconf-query -c xsettings -p /Gtk/ShellShowsMenubar -n -t bool -s true xfconf-query -c xsettings -p /Gtk/ShellShowsAppmenu -n -t bool -s true   ","version":"Next","tagName":"h3"},{"title":"Ulauncher​","type":1,"pageTitle":"[Xfce] 桌面 macOS 化設定記錄","url":"/moco/utilities/linux_xfce-macos-looks/#ulauncher","content":" ulauncher 是類似 macOS Spotlight 的搜尋框.  pamac build ulauncher     ","version":"Next","tagName":"h3"},{"title":"成果​","type":1,"pageTitle":"[Xfce] 桌面 macOS 化設定記錄","url":"/moco/utilities/linux_xfce-macos-looks/#成果","content":" 教學影片做的相當不錯, 章節清楚. 可依照影片教學一步步執行, 依個人習慣喜好調整設定. 更可在了解每個軟體功能後, 依實際需求決定是否安裝. 如: Comice Control center / Conky / LightDM-Webkit2-Greeter / ... 不符合我的實際需求, 就沒安裝了.    ","version":"Next","tagName":"h3"},{"title":"See Also​","type":1,"pageTitle":"[Xfce] 桌面 macOS 化設定記錄","url":"/moco/utilities/linux_xfce-macos-looks/#see-also","content":"","version":"Next","tagName":"h2"},{"title":"Awesome Visual Studio Code","type":0,"sectionRef":"#","url":"/moco/utilities/vscode/Awesome VSCode/","content":"Awesome Visual Studio Code","keywords":"","version":"Next"},{"title":"vscode_extensions","type":0,"sectionRef":"#","url":"/moco/utilities/vscode/vscode_extensions/","content":"vscode_extensions","keywords":"","version":"Next"},{"title":"vscode_java-springboot","type":0,"sectionRef":"#","url":"/moco/utilities/vscode/vscode_java-springboot/","content":"vscode_java-springboot","keywords":"","version":"Next"},{"title":"[VSCode] Trick & Tips","type":0,"sectionRef":"#","url":"/moco/utilities/vscode/vscode_tips/","content":"","keywords":"","version":"Next"},{"title":"Settings​","type":1,"pageTitle":"[VSCode] Trick & Tips","url":"/moco/utilities/vscode/vscode_tips/#settings","content":" ","version":"Next","tagName":"h2"},{"title":"Word Wrap​","type":1,"pageTitle":"[VSCode] Trick & Tips","url":"/moco/utilities/vscode/vscode_tips/#word-wrap","content":" ALT + Z to toggle Word Wrap on/off.  ","version":"Next","tagName":"h3"},{"title":"Language based​","type":1,"pageTitle":"[VSCode] Trick & Tips","url":"/moco/utilities/vscode/vscode_tips/#language-based","content":" ","version":"Next","tagName":"h2"},{"title":"Configure File Association​","type":1,"pageTitle":"[VSCode] Trick & Tips","url":"/moco/utilities/vscode/vscode_tips/#configure-file-association","content":" ","version":"Next","tagName":"h3"},{"title":"Configure language based settings​","type":1,"pageTitle":"[VSCode] Trick & Tips","url":"/moco/utilities/vscode/vscode_tips/#configure-language-based-settings","content":" ","version":"Next","tagName":"h3"},{"title":"See Also​","type":1,"pageTitle":"[VSCode] Trick & Tips","url":"/moco/utilities/vscode/vscode_tips/#see-also","content":"","version":"Next","tagName":"h2"},{"title":"nextcloud","type":0,"sectionRef":"#","url":"/moco/utilities/web/nextcloud/","content":"nextcloud","keywords":"","version":"Next"},{"title":"Awesome Self Hosted","type":0,"sectionRef":"#","url":"/moco/utilities/web/Awesome Self Hosted/","content":"","keywords":"","version":"Next"},{"title":"Software​","type":1,"pageTitle":"Awesome Self Hosted","url":"/moco/utilities/web/Awesome Self Hosted/#software","content":" ","version":"Next","tagName":"h2"},{"title":"Office Suites​","type":1,"pageTitle":"Awesome Self Hosted","url":"/moco/utilities/web/Awesome Self Hosted/#office-suites","content":" An office suiteis a collection of productivity software usually containing at least a word processor, spreadsheet and a presentation program.  Collabora Online Development Edition - Collabora Online Development Edition (CODE) is a powerful LibreOffice-based online office that supports all major document, spreadsheet and presentation file formats, which you can integrate in your own infrastructure. Source CodeMPL-2.0 C++CryptPad - CryptPad is a collaboration suite that is end-to-end-encrypted and open-source. It is built to enable collaboration, synchronizing changes to documents in real time. Source Code AGPL-3.0 NodejsONLYOFFICE - Office suite that enables you to manage documents, projects, team and customer relations in one place. Source Code AGPL-3.0 Nodejs  ","version":"Next","tagName":"h3"},{"title":"See Also​","type":1,"pageTitle":"Awesome Self Hosted","url":"/moco/utilities/web/Awesome Self Hosted/#see-also","content":" GitHub - awesome-selfhosted/awesome-selfhosted: A list of Free Software network services and web applications which can be hosted on your own serversBrowser based office suites and individual tools.. : selfhosted ","version":"Next","tagName":"h2"},{"title":"nextcloud-onlyoffice","type":0,"sectionRef":"#","url":"/moco/utilities/web/nextcloud-onlyoffice/","content":"nextcloud-onlyoffice","keywords":"","version":"Next"},{"title":"[Youtube] 利用 youtube-dl 下載影片","type":0,"sectionRef":"#","url":"/moco/utilities/yt_youtube-dl/","content":"","keywords":"","version":"Next"},{"title":"youtube-dl​","type":1,"pageTitle":"[Youtube] 利用 youtube-dl 下載影片","url":"/moco/utilities/yt_youtube-dl/#youtube-dl","content":" youtube-dl 是個 OpenSource 專案, 有興趣研究的可在 GitHub 上 Fork 專案.  日前曾因可能違反 DMCA 而導致 GitHub 上所有 youtube-dl 專案都被下架. (是的, 不單 youtube 影片可能下架, 連下載工具都可能被下架) 所幸後來在眾多熱心法律專業人士協助下, 確認並不違反 DMCA 而恢復專案.完整故事可到官方 blog 查看.  ","version":"Next","tagName":"h2"},{"title":"install​","type":1,"pageTitle":"[Youtube] 利用 youtube-dl 下載影片","url":"/moco/utilities/yt_youtube-dl/#install","content":" Mac 上透過 brew 安裝 youtube-dl 相當簡單.  $ brew install youtube-dl   ","version":"Next","tagName":"h3"},{"title":"ffmpeg​","type":1,"pageTitle":"[Youtube] 利用 youtube-dl 下載影片","url":"/moco/utilities/yt_youtube-dl/#ffmpeg","content":" youtube-dl 是 python script, 利用 python 適合寫爬蟲的特性, 解析 youtube 影片位置並下載. 目前 youtube 網站中高畫質格式多為 video-only 或 audio-only 的 webm 格式, 傳統 mp4 格式大多只到 720p. 而 youtube-dl 只能下載影片, 無法轉換影片格式, 若想下載更高畫質的影片, 則需安裝 ffmpeg 來轉檔, 嵌入字幕, 提取音頻, 加入專輯封面等等 Post-processing.  $ brew install ffmpeg   ","version":"Next","tagName":"h3"},{"title":"Usage​","type":1,"pageTitle":"[Youtube] 利用 youtube-dl 下載影片","url":"/moco/utilities/yt_youtube-dl/#usage","content":" 基本使用只要輸入 youtube 網址後就會開始下載, 預設是最佳影片格式. 若沒有安裝 ffmpeg 通常會下載 720p 的 mp4 檔, 有安裝 ffmpeg 則會下載最佳畫質的 video 和 audio 後合併.  $ youtube-dl https://www.youtube.com/watch?v=rkAfWfZkfyo [youtube] rkAfWfZkfyo: Downloading webpage [youtube] rkAfWfZkfyo: Downloading video info webpage [download] Resuming download at byte 31858886 [download] Destination: 4K UHD Video power of samsung 4k hdr demo test video for 4k tv-rkAfWfZkfyo.f313.webm [download] 100% of 634.40MiB in 01:10 [download] Destination: 4K UHD Video power of samsung 4k hdr demo test video for 4k tv-rkAfWfZkfyo.f251.webm [download] 100% of 5.43MiB in 00:00 [ffmpeg] Merging formats into &quot;4K UHD Video power of samsung 4k hdr demo test video for 4k tv-rkAfWfZkfyo.webm&quot; Deleting original file 4K UHD Video power of samsung 4k hdr demo test video for 4k tv-rkAfWfZkfyo.f313.webm (pass -k to keep) Deleting original file 4K UHD Video power of samsung 4k hdr demo test video for 4k tv-rkAfWfZkfyo.f251.webm (pass -k to keep)   ","version":"Next","tagName":"h2"},{"title":"下載指定格式​","type":1,"pageTitle":"[Youtube] 利用 youtube-dl 下載影片","url":"/moco/utilities/yt_youtube-dl/#下載指定格式","content":" Youtube-dl 預設會下載最高畫質的影片, 但可以自己選擇想要的品質  Ex: 下載解析度不高於 480p 的影片  $ youtube-dl -f 'bestvideo[height&lt;=480][ext=mp4]+bestaudio/best[height&lt;=480][ext=m4a]' &lt;url&gt;   下載不同畫質與格式  預設會下載最高畫質的影片, 如果要不同畫質可以先使用 -F, 會列出這個影片所有的畫質與格式  $ youtube-dl -F https://www.youtube.com/watch?v=rkAfWfZkfyo [youtube] rkAfWfZkfyo: Downloading webpage [youtube] rkAfWfZkfyo: Downloading video info webpage [info] Available formats for rkAfWfZkfyo: format code extension resolution note 249 webm audio only DASH audio 56k , opus @ 50k, 2.11MiB 250 webm audio only DASH audio 75k , opus @ 70k, 2.79MiB 140 m4a audio only DASH audio 128k , m4a_dash container, mp4a.40.2@128k, 5.14MiB 171 webm audio only DASH audio 135k , vorbis@128k, 5.05MiB 251 webm audio only DASH audio 141k , opus @160k, 5.43MiB 278 webm 256x144 144p 99k , webm container, vp9, 30fps, video only, 3.57MiB 160 mp4 256x144 144p 111k , avc1.4d400c, 30fps, video only, 2.79MiB 242 webm 426x240 240p 229k , vp9, 30fps, video only, 7.42MiB 133 mp4 426x240 240p 246k , avc1.4d4015, 30fps, video only, 5.85MiB 243 webm 640x360 360p 453k , vp9, 30fps, video only, 13.89MiB 134 mp4 640x360 360p 635k , avc1.4d401e, 30fps, video only, 16.18MiB 244 webm 854x480 480p 858k , vp9, 30fps, video only, 25.31MiB 135 mp4 854x480 480p 1337k , avc1.4d401f, 30fps, video only, 32.15MiB 247 webm 1280x720 720p 2100k , vp9, 30fps, video only, 52.51MiB 136 mp4 1280x720 720p 2673k , avc1.4d401f, 30fps, video only, 62.45MiB 248 webm 1920x1080 1080p 3857k , vp9, 30fps, video only, 94.03MiB 137 mp4 1920x1080 1080p 5017k , avc1.640028, 30fps, video only, 110.63MiB 271 webm 2560x1440 1440p 8886k , vp9, 30fps, video only, 281.05MiB 313 webm 3840x2160 2160p 18240k , vp9, 30fps, video only, 634.40MiB 43 webm 640x360 medium , vp8.0, vorbis@128k, 34.71MiB 18 mp4 640x360 medium 670k , avc1.42001E, mp4a.40.2@ 96k (44100Hz), 27.12MiB 22 mp4 1280x720 hd720 1670k , avc1.64001F, mp4a.40.2@192k (44100Hz) (best)   要下載不同格式使用 -f 'video code+audio code 就可以抓不同畫質與音質的影片.  例如要抓 1280x720 的畫質, 就選 video code 136 跟 audio code 140, 這樣 youtube-dl 就會抓對應的畫質與音質的影片下來了  $ youtube-dl -f '136+140' https://www.youtube.com/watch?v=rkAfWfZkfyo   ","version":"Next","tagName":"h3"},{"title":"下載播放清單​","type":1,"pageTitle":"[Youtube] 利用 youtube-dl 下載影片","url":"/moco/utilities/yt_youtube-dl/#下載播放清單","content":" 輸入播放清單網址, youtube-dl 則會自動下載清單. 除了影片網址的部分改成影片清單的網址, 其他部分和下載影片一樣。  $ youtube-dl -f mp4 &lt;playlist-url&gt;   指定起點和終點  --playlist-start NUMBER 指定起點—-playlist-end NUMBER 指定終點  Ex: 從第三個影片開始下載到最後一個影片  $ youtube-dl --playlist-start 3 -f mp4 &lt;playlist-url&gt;   Ex: 從第一個影片下載到倒數第二個影片  $ youtube-dl --playlist-end 2 -f mp4 &lt;playlist-url&gt;   Ex: 從第三個影片開始下載到倒數第二個影片  $ youtube-dl --playlist-start 3 --playlist-end 2 -f mp4 &lt;playlist-url&gt;   使用下載清單  若播放清單影片太多, 所需下載時間長, 可能必須分次執行時, 可以使用已下載清單的功能, 已避免重複下載.  $ youtube-dl --download-archive downloaded.txt -ciw &lt;playlist-url&gt;   With the option --download-archive FILE youtube-dl both reads and adds to a list of files not to download again. Every time a file is successfully downloaded, that video id is added to FILE.  建立已下載清單  若之前下載時忘了建立清單, 可透過下列 script 把既有的檔案輸出成已下載清單, 建立完成後再透過上述指令接續下載.  for n in *.* do if [[ &quot;$n&quot; =~ -[-_0-9a-zA-Z]{11}.*$ ]] then echo &quot;youtube ${n: -15: 11}&quot; &gt;&gt; downloaded.txt fi done   ","version":"Next","tagName":"h3"},{"title":"See Also​","type":1,"pageTitle":"[Youtube] 利用 youtube-dl 下載影片","url":"/moco/utilities/yt_youtube-dl/#see-also","content":" 以上筆記為超濃縮版, youtube-dl 還有更多強大的功能和參數可供使用. 如果要更詳細的參考文件, 可以直接參考官方文件: https://github.com/rg3/youtube-dl  ","version":"Next","tagName":"h2"},{"title":"Reference​","type":1,"pageTitle":"[Youtube] 利用 youtube-dl 下載影片","url":"/moco/utilities/yt_youtube-dl/#reference","content":" youtube-dl | 院長的筆記本Youtube-dl濃縮教學筆記 | 小蛇蛇的筆記Downloading youtube playlist with youtube-dl, skipping existing files - Ask Ubuntu  ","version":"Next","tagName":"h3"},{"title":"GUI Downloader​","type":1,"pageTitle":"[Youtube] 利用 youtube-dl 下載影片","url":"/moco/utilities/yt_youtube-dl/#gui-downloader","content":" FreeTube - The Private YouTube Client FreeTube 免費 YouTube 播放工具，無廣告、支援影片與音樂下載、訂閱功能 - 電腦王阿達 Gihosoft TubeGet - Free YouTube Downloader for PC &amp; Mac 如何在 Mac 下載 YouTube 1080P 高清影片 – APPLEFANS 蘋果迷 ","version":"Next","tagName":"h3"}],"options":{"id":"default"}}